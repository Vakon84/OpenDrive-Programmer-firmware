
OpenDrive-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000696c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08006a78  08006a78  00016a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ae4  08006ae4  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08006ae4  08006ae4  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ae4  08006ae4  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ae4  08006ae4  00016ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ae8  08006ae8  00016ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08006aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014a4  20000184  08006c70  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20001628  08006c70  00021628  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014280  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f01  00000000  00000000  0003442d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fe8  00000000  00000000  00037330  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e80  00000000  00000000  00038318  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016fa2  00000000  00000000  00039198  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e0db  00000000  00000000  0005013a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074ae7  00000000  00000000  0005e215  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d2cfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040e4  00000000  00000000  000d2d78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000184 	.word	0x20000184
 8000128:	00000000 	.word	0x00000000
 800012c:	08006a60 	.word	0x08006a60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000188 	.word	0x20000188
 8000148:	08006a60 	.word	0x08006a60

0800014c <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us (uint16_t us)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8000156:	4b08      	ldr	r3, [pc, #32]	; (8000178 <delay_us+0x2c>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	2200      	movs	r2, #0
 800015c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 800015e:	bf00      	nop
 8000160:	4b05      	ldr	r3, [pc, #20]	; (8000178 <delay_us+0x2c>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	429a      	cmp	r2, r3
 800016a:	d3f9      	bcc.n	8000160 <delay_us+0x14>
}
 800016c:	bf00      	nop
 800016e:	370c      	adds	r7, #12
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	200005e0 	.word	0x200005e0

0800017c <ready_led>:

void ready_led(void)	//Alternates leds, used to indicate successful initialization to user
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 8000180:	20c8      	movs	r0, #200	; 0xc8
 8000182:	f001 f97b 	bl	800147c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin, 0);
 8000186:	2200      	movs	r2, #0
 8000188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800018c:	4818      	ldr	r0, [pc, #96]	; (80001f0 <ready_led+0x74>)
 800018e:	f001 fbff 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000192:	20c8      	movs	r0, #200	; 0xc8
 8000194:	f001 f972 	bl	800147c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin, 1);
 8000198:	2201      	movs	r2, #1
 800019a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800019e:	4814      	ldr	r0, [pc, #80]	; (80001f0 <ready_led+0x74>)
 80001a0:	f001 fbf6 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80001a4:	20c8      	movs	r0, #200	; 0xc8
 80001a6:	f001 f969 	bl	800147c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin, 0);
 80001aa:	2200      	movs	r2, #0
 80001ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001b0:	480f      	ldr	r0, [pc, #60]	; (80001f0 <ready_led+0x74>)
 80001b2:	f001 fbed 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80001b6:	20c8      	movs	r0, #200	; 0xc8
 80001b8:	f001 f960 	bl	800147c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin, 1);
 80001bc:	2201      	movs	r2, #1
 80001be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c2:	480b      	ldr	r0, [pc, #44]	; (80001f0 <ready_led+0x74>)
 80001c4:	f001 fbe4 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80001c8:	20c8      	movs	r0, #200	; 0xc8
 80001ca:	f001 f957 	bl	800147c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin, 0);
 80001ce:	2200      	movs	r2, #0
 80001d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d4:	4806      	ldr	r0, [pc, #24]	; (80001f0 <ready_led+0x74>)
 80001d6:	f001 fbdb 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80001da:	20c8      	movs	r0, #200	; 0xc8
 80001dc:	f001 f94e 	bl	800147c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin, 1);
 80001e0:	2201      	movs	r2, #1
 80001e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e6:	4802      	ldr	r0, [pc, #8]	; (80001f0 <ready_led+0x74>)
 80001e8:	f001 fbd2 	bl	8001990 <HAL_GPIO_WritePin>
}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40011000 	.word	0x40011000

080001f4 <reset_addr>:

void reset_addr()					//Resets address counter chips
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, INCR_Pin, 1);		//Simulates needed waveform
 80001f8:	2201      	movs	r2, #1
 80001fa:	2120      	movs	r1, #32
 80001fc:	480c      	ldr	r0, [pc, #48]	; (8000230 <reset_addr+0x3c>)
 80001fe:	f001 fbc7 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RST_Pin, 1); 		//for successfully reseting
 8000202:	2201      	movs	r2, #1
 8000204:	2140      	movs	r1, #64	; 0x40
 8000206:	480a      	ldr	r0, [pc, #40]	; (8000230 <reset_addr+0x3c>)
 8000208:	f001 fbc2 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RST_Pin, 0); 		//address counter
 800020c:	2200      	movs	r2, #0
 800020e:	2140      	movs	r1, #64	; 0x40
 8000210:	4807      	ldr	r0, [pc, #28]	; (8000230 <reset_addr+0x3c>)
 8000212:	f001 fbbd 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RST_Pin, 1); 		//(74HC590)
 8000216:	2201      	movs	r2, #1
 8000218:	2140      	movs	r1, #64	; 0x40
 800021a:	4805      	ldr	r0, [pc, #20]	; (8000230 <reset_addr+0x3c>)
 800021c:	f001 fbb8 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, INCR_Pin, 0);		//
 8000220:	2200      	movs	r2, #0
 8000222:	2120      	movs	r1, #32
 8000224:	4802      	ldr	r0, [pc, #8]	; (8000230 <reset_addr+0x3c>)
 8000226:	f001 fbb3 	bl	8001990 <HAL_GPIO_WritePin>
}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40010c00 	.word	0x40010c00

08000234 <goto_addr>:

void goto_addr(uint32_t addr)		//Makes address counter chips
{									//count to a desired address
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	uint32_t loop;
	reset_addr();	//Reset address counter
 800023c:	f7ff ffda 	bl	80001f4 <reset_addr>
	while (loop < addr)		//Set a loop to count to a desired number (addr)
 8000240:	e00c      	b.n	800025c <goto_addr+0x28>
	{
		HAL_GPIO_WritePin(GPIOB, INCR_Pin, 1);	//Strobe 74HC590 count pin
 8000242:	2201      	movs	r2, #1
 8000244:	2120      	movs	r1, #32
 8000246:	4809      	ldr	r0, [pc, #36]	; (800026c <goto_addr+0x38>)
 8000248:	f001 fba2 	bl	8001990 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, INCR_Pin, 0);	//
 800024c:	2200      	movs	r2, #0
 800024e:	2120      	movs	r1, #32
 8000250:	4806      	ldr	r0, [pc, #24]	; (800026c <goto_addr+0x38>)
 8000252:	f001 fb9d 	bl	8001990 <HAL_GPIO_WritePin>
		loop=loop+1;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	3301      	adds	r3, #1
 800025a:	60fb      	str	r3, [r7, #12]
	while (loop < addr)		//Set a loop to count to a desired number (addr)
 800025c:	68fa      	ldr	r2, [r7, #12]
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	429a      	cmp	r2, r3
 8000262:	d3ee      	bcc.n	8000242 <goto_addr+0xe>
	}
}
 8000264:	bf00      	nop
 8000266:	3710      	adds	r7, #16
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40010c00 	.word	0x40010c00

08000270 <write>:

void write(uint8_t low, uint8_t high)		//Write a word to the Flash with a previously set address
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	460a      	mov	r2, r1
 800027a:	71fb      	strb	r3, [r7, #7]
 800027c:	4613      	mov	r3, r2
 800027e:	71bb      	strb	r3, [r7, #6]
	GPIOA->ODR = low;	//Set GPIOA with low part of the word (LSB)
 8000280:	4a10      	ldr	r2, [pc, #64]	; (80002c4 <write+0x54>)
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	60d3      	str	r3, [r2, #12]
	uint16_t gpiob_odr = GPIOB->ODR & 0xFF;		//Bit Mask low part of GPIOB (for preserving pins status)
 8000286:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <write+0x58>)
 8000288:	68db      	ldr	r3, [r3, #12]
 800028a:	b29b      	uxth	r3, r3
 800028c:	b2db      	uxtb	r3, r3
 800028e:	81fb      	strh	r3, [r7, #14]
	gpiob_odr|= (high) << 8;	//Combines high part of the word with masked bits
 8000290:	79bb      	ldrb	r3, [r7, #6]
 8000292:	021b      	lsls	r3, r3, #8
 8000294:	b21a      	sxth	r2, r3
 8000296:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800029a:	4313      	orrs	r3, r2
 800029c:	b21b      	sxth	r3, r3
 800029e:	81fb      	strh	r3, [r7, #14]
	GPIOB->ODR = gpiob_odr;		//Set GPIOB with high part of the word and masked bits
 80002a0:	4a09      	ldr	r2, [pc, #36]	; (80002c8 <write+0x58>)
 80002a2:	89fb      	ldrh	r3, [r7, #14]
 80002a4:	60d3      	str	r3, [r2, #12]

	HAL_GPIO_WritePin(GPIOB, WE_Pin, 0); //Strobe WE pin to write word to flash
 80002a6:	2200      	movs	r2, #0
 80002a8:	2180      	movs	r1, #128	; 0x80
 80002aa:	4807      	ldr	r0, [pc, #28]	; (80002c8 <write+0x58>)
 80002ac:	f001 fb70 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, WE_Pin, 1); //
 80002b0:	2201      	movs	r2, #1
 80002b2:	2180      	movs	r1, #128	; 0x80
 80002b4:	4804      	ldr	r0, [pc, #16]	; (80002c8 <write+0x58>)
 80002b6:	f001 fb6b 	bl	8001990 <HAL_GPIO_WritePin>

}
 80002ba:	bf00      	nop
 80002bc:	3710      	adds	r7, #16
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010800 	.word	0x40010800
 80002c8:	40010c00 	.word	0x40010c00

080002cc <write_feram>:

void write_feram(uint8_t low, uint8_t high)	//Write a word to the Flash with a previously set address
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	460a      	mov	r2, r1
 80002d6:	71fb      	strb	r3, [r7, #7]
 80002d8:	4613      	mov	r3, r2
 80002da:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, WE_Pin, 0); 	//Enable WE and CE pins (active low)
 80002dc:	2200      	movs	r2, #0
 80002de:	2180      	movs	r1, #128	; 0x80
 80002e0:	481a      	ldr	r0, [pc, #104]	; (800034c <write_feram+0x80>)
 80002e2:	f001 fb55 	bl	8001990 <HAL_GPIO_WritePin>
	delay_us(5);							//in sequence as FM1808 requires for
 80002e6:	2005      	movs	r0, #5
 80002e8:	f7ff ff30 	bl	800014c <delay_us>
	HAL_GPIO_WritePin(GPIOB, CE_Pin, 0);	//a CE controlled write. Address is
 80002ec:	2200      	movs	r2, #0
 80002ee:	2104      	movs	r1, #4
 80002f0:	4816      	ldr	r0, [pc, #88]	; (800034c <write_feram+0x80>)
 80002f2:	f001 fb4d 	bl	8001990 <HAL_GPIO_WritePin>
	delay_us(5);							//latched on CE falling edge
 80002f6:	2005      	movs	r0, #5
 80002f8:	f7ff ff28 	bl	800014c <delay_us>

	GPIOA->ODR = low; //Set GPIOA with low part of the word (LSB)
 80002fc:	4a14      	ldr	r2, [pc, #80]	; (8000350 <write_feram+0x84>)
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	60d3      	str	r3, [r2, #12]
	uint16_t gpiob_odr = GPIOB->ODR & 0xFF;		//Bit Mask low part of GPIOB (for preserving pins status)
 8000302:	4b12      	ldr	r3, [pc, #72]	; (800034c <write_feram+0x80>)
 8000304:	68db      	ldr	r3, [r3, #12]
 8000306:	b29b      	uxth	r3, r3
 8000308:	b2db      	uxtb	r3, r3
 800030a:	81fb      	strh	r3, [r7, #14]
	gpiob_odr|= (high) << 8;	//Combines high part of the word (MSB) with masked bits
 800030c:	79bb      	ldrb	r3, [r7, #6]
 800030e:	021b      	lsls	r3, r3, #8
 8000310:	b21a      	sxth	r2, r3
 8000312:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000316:	4313      	orrs	r3, r2
 8000318:	b21b      	sxth	r3, r3
 800031a:	81fb      	strh	r3, [r7, #14]
	GPIOB->ODR = gpiob_odr;		//Set GPIOB with high part of the word and masked bits
 800031c:	4a0b      	ldr	r2, [pc, #44]	; (800034c <write_feram+0x80>)
 800031e:	89fb      	ldrh	r3, [r7, #14]
 8000320:	60d3      	str	r3, [r2, #12]


	HAL_GPIO_WritePin(GPIOB, CE_Pin, 1); 	//Disable CE and WE pins in sequence
 8000322:	2201      	movs	r2, #1
 8000324:	2104      	movs	r1, #4
 8000326:	4809      	ldr	r0, [pc, #36]	; (800034c <write_feram+0x80>)
 8000328:	f001 fb32 	bl	8001990 <HAL_GPIO_WritePin>
	delay_us(5);							//as required by FM1808. Data is
 800032c:	2005      	movs	r0, #5
 800032e:	f7ff ff0d 	bl	800014c <delay_us>
	HAL_GPIO_WritePin(GPIOB, WE_Pin, 1); 	//latched in CE rising edge.
 8000332:	2201      	movs	r2, #1
 8000334:	2180      	movs	r1, #128	; 0x80
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <write_feram+0x80>)
 8000338:	f001 fb2a 	bl	8001990 <HAL_GPIO_WritePin>
	delay_us(5);							//
 800033c:	2005      	movs	r0, #5
 800033e:	f7ff ff05 	bl	800014c <delay_us>

}
 8000342:	bf00      	nop
 8000344:	3710      	adds	r7, #16
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40010c00 	.word	0x40010c00
 8000350:	40010800 	.word	0x40010800

08000354 <command_5555>:

void command_5555 (uint8_t cmd)		//Write a command to address 0x5555 of the flash
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, ADDR_EN_Pin, 1); 		//Disable 74HC590 Address counter output
 800035e:	2201      	movs	r2, #1
 8000360:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000364:	4812      	ldr	r0, [pc, #72]	; (80003b0 <command_5555+0x5c>)
 8000366:	f001 fb13 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ADDR_5555_Pin, 1); 	//Set 0x5555 address in the flash
 800036a:	2201      	movs	r2, #1
 800036c:	2101      	movs	r1, #1
 800036e:	4811      	ldr	r0, [pc, #68]	; (80003b4 <command_5555+0x60>)
 8000370:	f001 fb0e 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ADDR_2AAA_Pin, 0); 	//Disable 0x2AAA address in the flash
 8000374:	2200      	movs	r2, #0
 8000376:	2102      	movs	r1, #2
 8000378:	480e      	ldr	r0, [pc, #56]	; (80003b4 <command_5555+0x60>)
 800037a:	f001 fb09 	bl	8001990 <HAL_GPIO_WritePin>

	GPIOA->ODR = cmd; //Set GPIOA with low part of the word (LSB), in this function the command itself (byte command)
 800037e:	4a0e      	ldr	r2, [pc, #56]	; (80003b8 <command_5555+0x64>)
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	60d3      	str	r3, [r2, #12]
	uint16_t gpiob_odr = GPIOB->ODR & 0xFF;		//Bit Mask low part of GPIOB (for preserving pins status)
 8000384:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <command_5555+0x60>)
 8000386:	68db      	ldr	r3, [r3, #12]
 8000388:	b29b      	uxth	r3, r3
 800038a:	b2db      	uxtb	r3, r3
 800038c:	81fb      	strh	r3, [r7, #14]
	gpiob_odr|= (0x00) << 8; 	//Combines high part of the word (MSB) with masked bits
	GPIOB->ODR = gpiob_odr; 	//Set GPIOB with high part of the word and masked bits
 800038e:	4a09      	ldr	r2, [pc, #36]	; (80003b4 <command_5555+0x60>)
 8000390:	89fb      	ldrh	r3, [r7, #14]
 8000392:	60d3      	str	r3, [r2, #12]

	HAL_GPIO_WritePin(GPIOB, WE_Pin, 0); //Strobe WE pin to write word to flash
 8000394:	2200      	movs	r2, #0
 8000396:	2180      	movs	r1, #128	; 0x80
 8000398:	4806      	ldr	r0, [pc, #24]	; (80003b4 <command_5555+0x60>)
 800039a:	f001 faf9 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, WE_Pin, 1); //
 800039e:	2201      	movs	r2, #1
 80003a0:	2180      	movs	r1, #128	; 0x80
 80003a2:	4804      	ldr	r0, [pc, #16]	; (80003b4 <command_5555+0x60>)
 80003a4:	f001 faf4 	bl	8001990 <HAL_GPIO_WritePin>
}
 80003a8:	bf00      	nop
 80003aa:	3710      	adds	r7, #16
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40011000 	.word	0x40011000
 80003b4:	40010c00 	.word	0x40010c00
 80003b8:	40010800 	.word	0x40010800

080003bc <command_2AAA>:

void command_2AAA (uint8_t cmd)		//Write a command to address 0x2AAA of the flash
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, ADDR_EN_Pin, 1); 		//Disable 74HC590 Address counter output
 80003c6:	2201      	movs	r2, #1
 80003c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003cc:	4812      	ldr	r0, [pc, #72]	; (8000418 <command_2AAA+0x5c>)
 80003ce:	f001 fadf 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ADDR_5555_Pin, 0); 	//Disable 0x5555 address in the flash
 80003d2:	2200      	movs	r2, #0
 80003d4:	2101      	movs	r1, #1
 80003d6:	4811      	ldr	r0, [pc, #68]	; (800041c <command_2AAA+0x60>)
 80003d8:	f001 fada 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ADDR_2AAA_Pin, 1); 	//Set 0x2AAA address in the flash
 80003dc:	2201      	movs	r2, #1
 80003de:	2102      	movs	r1, #2
 80003e0:	480e      	ldr	r0, [pc, #56]	; (800041c <command_2AAA+0x60>)
 80003e2:	f001 fad5 	bl	8001990 <HAL_GPIO_WritePin>

	GPIOA->ODR = cmd; //Set GPIOA with low part of the word (LSB), in this function the command itself (byte command)
 80003e6:	4a0e      	ldr	r2, [pc, #56]	; (8000420 <command_2AAA+0x64>)
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	60d3      	str	r3, [r2, #12]
	uint16_t gpiob_odr = GPIOB->ODR & 0xFF;		//Bit Mask low part of GPIOB (for preserving pins status)
 80003ec:	4b0b      	ldr	r3, [pc, #44]	; (800041c <command_2AAA+0x60>)
 80003ee:	68db      	ldr	r3, [r3, #12]
 80003f0:	b29b      	uxth	r3, r3
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	81fb      	strh	r3, [r7, #14]
	gpiob_odr|= (0x00) << 8;	//Combines high part of the word (MSB) with masked bits
	GPIOB->ODR = gpiob_odr;		//Set GPIOB with high part of the word and masked bits
 80003f6:	4a09      	ldr	r2, [pc, #36]	; (800041c <command_2AAA+0x60>)
 80003f8:	89fb      	ldrh	r3, [r7, #14]
 80003fa:	60d3      	str	r3, [r2, #12]

	HAL_GPIO_WritePin(GPIOB, WE_Pin, 0); //Strobe WE pin to write word to flash
 80003fc:	2200      	movs	r2, #0
 80003fe:	2180      	movs	r1, #128	; 0x80
 8000400:	4806      	ldr	r0, [pc, #24]	; (800041c <command_2AAA+0x60>)
 8000402:	f001 fac5 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, WE_Pin, 1); //
 8000406:	2201      	movs	r2, #1
 8000408:	2180      	movs	r1, #128	; 0x80
 800040a:	4804      	ldr	r0, [pc, #16]	; (800041c <command_2AAA+0x60>)
 800040c:	f001 fac0 	bl	8001990 <HAL_GPIO_WritePin>
}
 8000410:	bf00      	nop
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40011000 	.word	0x40011000
 800041c:	40010c00 	.word	0x40010c00
 8000420:	40010800 	.word	0x40010800

08000424 <write_addr>:

void write_addr(uint8_t low, uint8_t high, int addr)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	603a      	str	r2, [r7, #0]
 800042e:	71fb      	strb	r3, [r7, #7]
 8000430:	460b      	mov	r3, r1
 8000432:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOC, ADDR_EN_Pin, 0); //ADDR EN
 8000434:	2200      	movs	r2, #0
 8000436:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800043a:	4822      	ldr	r0, [pc, #136]	; (80004c4 <write_addr+0xa0>)
 800043c:	f001 faa8 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ADDR_5555_Pin, 0); //5555 DIS
 8000440:	2200      	movs	r2, #0
 8000442:	2101      	movs	r1, #1
 8000444:	4820      	ldr	r0, [pc, #128]	; (80004c8 <write_addr+0xa4>)
 8000446:	f001 faa3 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ADDR_2AAA_Pin, 0); //2AAA DISABLE
 800044a:	2200      	movs	r2, #0
 800044c:	2102      	movs	r1, #2
 800044e:	481e      	ldr	r0, [pc, #120]	; (80004c8 <write_addr+0xa4>)
 8000450:	f001 fa9e 	bl	8001990 <HAL_GPIO_WritePin>
	uint32_t loop = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	60fb      	str	r3, [r7, #12]
	reset_addr();
 8000458:	f7ff fecc 	bl	80001f4 <reset_addr>
	while (loop < addr)
 800045c:	e00c      	b.n	8000478 <write_addr+0x54>
	{
		HAL_GPIO_WritePin(GPIOB, INCR_Pin, 1); //ADDR INCR
 800045e:	2201      	movs	r2, #1
 8000460:	2120      	movs	r1, #32
 8000462:	4819      	ldr	r0, [pc, #100]	; (80004c8 <write_addr+0xa4>)
 8000464:	f001 fa94 	bl	8001990 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, INCR_Pin, 0);
 8000468:	2200      	movs	r2, #0
 800046a:	2120      	movs	r1, #32
 800046c:	4816      	ldr	r0, [pc, #88]	; (80004c8 <write_addr+0xa4>)
 800046e:	f001 fa8f 	bl	8001990 <HAL_GPIO_WritePin>
		loop=loop+1;
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	3301      	adds	r3, #1
 8000476:	60fb      	str	r3, [r7, #12]
	while (loop < addr)
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	68fa      	ldr	r2, [r7, #12]
 800047c:	429a      	cmp	r2, r3
 800047e:	d3ee      	bcc.n	800045e <write_addr+0x3a>
	}
	GPIOA->ODR = low;
 8000480:	4a12      	ldr	r2, [pc, #72]	; (80004cc <write_addr+0xa8>)
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	60d3      	str	r3, [r2, #12]
	uint16_t gpiob_odr = GPIOB->ODR & 0xFF;
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <write_addr+0xa4>)
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	b29b      	uxth	r3, r3
 800048c:	b2db      	uxtb	r3, r3
 800048e:	817b      	strh	r3, [r7, #10]
	gpiob_odr|= (high) << 8;
 8000490:	79bb      	ldrb	r3, [r7, #6]
 8000492:	021b      	lsls	r3, r3, #8
 8000494:	b21a      	sxth	r2, r3
 8000496:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800049a:	4313      	orrs	r3, r2
 800049c:	b21b      	sxth	r3, r3
 800049e:	817b      	strh	r3, [r7, #10]
	GPIOB->ODR = gpiob_odr;
 80004a0:	4a09      	ldr	r2, [pc, #36]	; (80004c8 <write_addr+0xa4>)
 80004a2:	897b      	ldrh	r3, [r7, #10]
 80004a4:	60d3      	str	r3, [r2, #12]
	HAL_GPIO_WritePin(GPIOB, WE_Pin, 0); //SET READ
 80004a6:	2200      	movs	r2, #0
 80004a8:	2180      	movs	r1, #128	; 0x80
 80004aa:	4807      	ldr	r0, [pc, #28]	; (80004c8 <write_addr+0xa4>)
 80004ac:	f001 fa70 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, WE_Pin, 1); //SET READ
 80004b0:	2201      	movs	r2, #1
 80004b2:	2180      	movs	r1, #128	; 0x80
 80004b4:	4804      	ldr	r0, [pc, #16]	; (80004c8 <write_addr+0xa4>)
 80004b6:	f001 fa6b 	bl	8001990 <HAL_GPIO_WritePin>
}
 80004ba:	bf00      	nop
 80004bc:	3710      	adds	r7, #16
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40011000 	.word	0x40011000
 80004c8:	40010c00 	.word	0x40010c00
 80004cc:	40010800 	.word	0x40010800

080004d0 <buffer_write>:

void buffer_write()			//Write the 256bytes write buffer to the flash memory
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
	int buffer_read_addr = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	607b      	str	r3, [r7, #4]
	while (buffer_read_addr < 256)	//Sets a loop to write the 256bytes of the buffer
 80004da:	e017      	b.n	800050c <buffer_write+0x3c>
	{
		write(write_buffer[buffer_read_addr+1],write_buffer[buffer_read_addr]); //Write a buffer's word with "write" function
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3301      	adds	r3, #1
 80004e0:	4a0e      	ldr	r2, [pc, #56]	; (800051c <buffer_write+0x4c>)
 80004e2:	5cd0      	ldrb	r0, [r2, r3]
 80004e4:	4a0d      	ldr	r2, [pc, #52]	; (800051c <buffer_write+0x4c>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4413      	add	r3, r2
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	4619      	mov	r1, r3
 80004ee:	f7ff febf 	bl	8000270 <write>
		HAL_GPIO_WritePin(GPIOB, INCR_Pin, 1); 		//Strobe the address increase pin in the
 80004f2:	2201      	movs	r2, #1
 80004f4:	2120      	movs	r1, #32
 80004f6:	480a      	ldr	r0, [pc, #40]	; (8000520 <buffer_write+0x50>)
 80004f8:	f001 fa4a 	bl	8001990 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, INCR_Pin, 0);		//address counter and increases it by one
 80004fc:	2200      	movs	r2, #0
 80004fe:	2120      	movs	r1, #32
 8000500:	4807      	ldr	r0, [pc, #28]	; (8000520 <buffer_write+0x50>)
 8000502:	f001 fa45 	bl	8001990 <HAL_GPIO_WritePin>
		buffer_read_addr = buffer_read_addr+2;		//Increment loop by 2 (1word = 2bytes written)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	3302      	adds	r3, #2
 800050a:	607b      	str	r3, [r7, #4]
	while (buffer_read_addr < 256)	//Sets a loop to write the 256bytes of the buffer
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2bff      	cmp	r3, #255	; 0xff
 8000510:	dde4      	ble.n	80004dc <buffer_write+0xc>
	}
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000620 	.word	0x20000620
 8000520:	40010c00 	.word	0x40010c00

08000524 <buffer_write_feram>:

void buffer_write_feram()	//Write the 256bytes write buffer to the FeRAM memory
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
	int buffer_read_addr = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
	while (buffer_read_addr < 256)	//Sets a loop to write the 256bytes of the buffer
 800052e:	e017      	b.n	8000560 <buffer_write_feram+0x3c>
	{
		write_feram(write_buffer[buffer_read_addr+1],write_buffer[buffer_read_addr]); //Write a buffer's word with "write_feram" function
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	3301      	adds	r3, #1
 8000534:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <buffer_write_feram+0x4c>)
 8000536:	5cd0      	ldrb	r0, [r2, r3]
 8000538:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <buffer_write_feram+0x4c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4413      	add	r3, r2
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	f7ff fec3 	bl	80002cc <write_feram>
		HAL_GPIO_WritePin(GPIOB, INCR_Pin, 1); 	//Strobe the address increase pin in the
 8000546:	2201      	movs	r2, #1
 8000548:	2120      	movs	r1, #32
 800054a:	480a      	ldr	r0, [pc, #40]	; (8000574 <buffer_write_feram+0x50>)
 800054c:	f001 fa20 	bl	8001990 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, INCR_Pin, 0);	//address counter and increases it by one
 8000550:	2200      	movs	r2, #0
 8000552:	2120      	movs	r1, #32
 8000554:	4807      	ldr	r0, [pc, #28]	; (8000574 <buffer_write_feram+0x50>)
 8000556:	f001 fa1b 	bl	8001990 <HAL_GPIO_WritePin>
		buffer_read_addr = buffer_read_addr+2;	//Increment loop control variable by 2 (1word = 2bytes written)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	3302      	adds	r3, #2
 800055e:	607b      	str	r3, [r7, #4]
	while (buffer_read_addr < 256)	//Sets a loop to write the 256bytes of the buffer
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2bff      	cmp	r3, #255	; 0xff
 8000564:	dde4      	ble.n	8000530 <buffer_write_feram+0xc>
	}
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000620 	.word	0x20000620
 8000574:	40010c00 	.word	0x40010c00

08000578 <polling>:

void polling()		//Wait till 0x80 (Write completed) is returned by the Flash SR
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, OE_Pin, 0); 	//Enable Flash data output
 800057e:	2200      	movs	r2, #0
 8000580:	2108      	movs	r1, #8
 8000582:	4817      	ldr	r0, [pc, #92]	; (80005e0 <polling+0x68>)
 8000584:	f001 fa04 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DIR_Pin, 0); 	//Set programmer's bus transceivers to read direction
 8000588:	2200      	movs	r2, #0
 800058a:	2110      	movs	r1, #16
 800058c:	4814      	ldr	r0, [pc, #80]	; (80005e0 <polling+0x68>)
 800058e:	f001 f9ff 	bl	8001990 <HAL_GPIO_WritePin>

	uint8_t SR;		//Create local variable to read SR content
	GPIOA->CRL = port_read;		//Set GPIOA as input
 8000592:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <polling+0x6c>)
 8000594:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000598:	601a      	str	r2, [r3, #0]
	SR = GPIOA->IDR & 0x80;		//Read SR contents to SR variable
 800059a:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <polling+0x6c>)
 800059c:	689b      	ldr	r3, [r3, #8]
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80005a4:	71fb      	strb	r3, [r7, #7]
	while (SR != SR_ready)		//Set a loop that only stops when SR return 0x80 (Write complete)
 80005a6:	e005      	b.n	80005b4 <polling+0x3c>
	{
		SR = GPIOA->IDR & SR_ready;		//Read SR contents to SR variable
 80005a8:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <polling+0x6c>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80005b2:	71fb      	strb	r3, [r7, #7]
	while (SR != SR_ready)		//Set a loop that only stops when SR return 0x80 (Write complete)
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	2b80      	cmp	r3, #128	; 0x80
 80005b8:	d1f6      	bne.n	80005a8 <polling+0x30>
	}
	HAL_GPIO_WritePin(GPIOB, OE_Pin, 1); 	//Disable Flash data output
 80005ba:	2201      	movs	r2, #1
 80005bc:	2108      	movs	r1, #8
 80005be:	4808      	ldr	r0, [pc, #32]	; (80005e0 <polling+0x68>)
 80005c0:	f001 f9e6 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DIR_Pin, 1); 	//Set programmer's bus transceivers to write direction
 80005c4:	2201      	movs	r2, #1
 80005c6:	2110      	movs	r1, #16
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <polling+0x68>)
 80005ca:	f001 f9e1 	bl	8001990 <HAL_GPIO_WritePin>
	GPIOA->CRL = port_write;	//Set GPIOA as output
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <polling+0x6c>)
 80005d0:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80005d4:	601a      	str	r2, [r3, #0]
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40010c00 	.word	0x40010c00
 80005e4:	40010800 	.word	0x40010800

080005e8 <buffering>:

void buffering()	//Fill a 256byte write buffer for faster batch write operation
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
	ready = reset;	//Reset "ready" global flag
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <buffering+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
	buffer_write_addr = 0;	//Reset buffer address
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <buffering+0x54>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]

	int buffer_write_loop = 0;		//Set a buffer filling loop, four 64byte iterations
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
	while (buffer_write_loop < 4)	//totaling 256bytes. Done this way because STM32
 80005fe:	e014      	b.n	800062a <buffering+0x42>
	{								//USB buffer max at 64bytes

		next_block = set;					//Set "next_block" global flag signaling CDC receive function to store the next USB transfer
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <buffering+0x58>)
 8000602:	2201      	movs	r2, #1
 8000604:	601a      	str	r2, [r3, #0]

		mem_buffer[0] = 'n';				//Sends 'n' to host computer signaling that the programmer is ready to
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <buffering+0x5c>)
 8000608:	226e      	movs	r2, #110	; 0x6e
 800060a:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(mem_buffer, 1);		//receive the next 64bytes of data
 800060c:	2101      	movs	r1, #1
 800060e:	480d      	ldr	r0, [pc, #52]	; (8000644 <buffering+0x5c>)
 8000610:	f005 fe28 	bl	8006264 <CDC_Transmit_FS>

		while(ready != set){}				//Wait this "ready" global flag is set, signaling that all 64bytes have been stored in the write buffer
 8000614:	bf00      	nop
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <buffering+0x50>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d1fb      	bne.n	8000616 <buffering+0x2e>
		ready = reset;						//Reset "ready" global flag for next transfer
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <buffering+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]

		buffer_write_loop = buffer_write_loop+1; //Increases loop by 1
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3301      	adds	r3, #1
 8000628:	607b      	str	r3, [r7, #4]
	while (buffer_write_loop < 4)	//totaling 256bytes. Done this way because STM32
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b03      	cmp	r3, #3
 800062e:	dde7      	ble.n	8000600 <buffering+0x18>
	}
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200001a8 	.word	0x200001a8
 800063c:	200003d4 	.word	0x200003d4
 8000640:	200001a4 	.word	0x200001a4
 8000644:	200003dc 	.word	0x200003dc

08000648 <switch_to_sram>:

void switch_to_sram()		//Signals cartridge to map the FeRAM to a visible address (0x100000 in Mega Drive and 32X games)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, TIME_Pin, 0);	//Time signal goes low in preparation for creating a rising edge when the correct command is at the data bus
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000652:	481a      	ldr	r0, [pc, #104]	; (80006bc <switch_to_sram+0x74>)
 8000654:	f001 f99c 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, WE_Pin, 1);	//WE and OE are disabled to not interfere in the data bus
 8000658:	2201      	movs	r2, #1
 800065a:	2180      	movs	r1, #128	; 0x80
 800065c:	4818      	ldr	r0, [pc, #96]	; (80006c0 <switch_to_sram+0x78>)
 800065e:	f001 f997 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OE_Pin, 1);	//
 8000662:	2201      	movs	r2, #1
 8000664:	2108      	movs	r1, #8
 8000666:	4816      	ldr	r0, [pc, #88]	; (80006c0 <switch_to_sram+0x78>)
 8000668:	f001 f992 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DIR_Pin, 1);	//Programmer data bus direction is set to the cartridge
 800066c:	2201      	movs	r2, #1
 800066e:	2110      	movs	r1, #16
 8000670:	4813      	ldr	r0, [pc, #76]	; (80006c0 <switch_to_sram+0x78>)
 8000672:	f001 f98d 	bl	8001990 <HAL_GPIO_WritePin>
	GPIOA->CRL = port_write;	//Set GPIOA data pins as output
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <switch_to_sram+0x7c>)
 8000678:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800067c:	601a      	str	r2, [r3, #0]
	GPIOA->ODR = sram_ce;	//0xFF (mapper command to select FeRAM) is placed in the data bus
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <switch_to_sram+0x7c>)
 8000680:	22ff      	movs	r2, #255	; 0xff
 8000682:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(GPIOC, TIME_Pin, 1);	//Time goes high and the mapper latches the command, starting to show the FeRAM at 0x10000
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800068a:	480c      	ldr	r0, [pc, #48]	; (80006bc <switch_to_sram+0x74>)
 800068c:	f001 f980 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, TIME_Pin, 0);	//Time goes down in preparation for next pulses
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000696:	4809      	ldr	r0, [pc, #36]	; (80006bc <switch_to_sram+0x74>)
 8000698:	f001 f97a 	bl	8001990 <HAL_GPIO_WritePin>
	GPIOA->CRL = port_read;		//Set GPIOA as input
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <switch_to_sram+0x7c>)
 800069e:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80006a2:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, DIR_Pin, 0);	//Programmer data bus direction is set to the MCU
 80006a4:	2200      	movs	r2, #0
 80006a6:	2110      	movs	r1, #16
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <switch_to_sram+0x78>)
 80006aa:	f001 f971 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OE_Pin, 0);	//OE is enabled again
 80006ae:	2200      	movs	r2, #0
 80006b0:	2108      	movs	r1, #8
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <switch_to_sram+0x78>)
 80006b4:	f001 f96c 	bl	8001990 <HAL_GPIO_WritePin>

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40011000 	.word	0x40011000
 80006c0:	40010c00 	.word	0x40010c00
 80006c4:	40010800 	.word	0x40010800

080006c8 <switch_to_flash>:

void switch_to_flash()		//Signals cartridge to map the entire Flash addresses and hide FeRAM
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, TIME_Pin, 0);	//Time signal goes low in preparation for creating a rising edge when the correct command is at the data bus
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006d2:	481a      	ldr	r0, [pc, #104]	; (800073c <switch_to_flash+0x74>)
 80006d4:	f001 f95c 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, WE_Pin, 1);	//WE and OE are disabled to not interfere in the data bus
 80006d8:	2201      	movs	r2, #1
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	4818      	ldr	r0, [pc, #96]	; (8000740 <switch_to_flash+0x78>)
 80006de:	f001 f957 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OE_Pin, 1);	//
 80006e2:	2201      	movs	r2, #1
 80006e4:	2108      	movs	r1, #8
 80006e6:	4816      	ldr	r0, [pc, #88]	; (8000740 <switch_to_flash+0x78>)
 80006e8:	f001 f952 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DIR_Pin, 1);	//Programmer data bus direction is set to the cartridge
 80006ec:	2201      	movs	r2, #1
 80006ee:	2110      	movs	r1, #16
 80006f0:	4813      	ldr	r0, [pc, #76]	; (8000740 <switch_to_flash+0x78>)
 80006f2:	f001 f94d 	bl	8001990 <HAL_GPIO_WritePin>
	GPIOA->CRL = port_write;	//Set GPIOA as output
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <switch_to_flash+0x7c>)
 80006f8:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80006fc:	601a      	str	r2, [r3, #0]
	GPIOA->ODR = flash_ce;	//0x00 (mapper command to select Flash) is placed in the data bus
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <switch_to_flash+0x7c>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(GPIOC, TIME_Pin, 1);	//Time goes high and the mapper latches the command, hiding the FeRAM
 8000704:	2201      	movs	r2, #1
 8000706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800070a:	480c      	ldr	r0, [pc, #48]	; (800073c <switch_to_flash+0x74>)
 800070c:	f001 f940 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, TIME_Pin, 0);	//Time goes down in preparation for next pulses
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000716:	4809      	ldr	r0, [pc, #36]	; (800073c <switch_to_flash+0x74>)
 8000718:	f001 f93a 	bl	8001990 <HAL_GPIO_WritePin>
	GPIOA->CRL = port_read;		//Set GPIOA as input
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <switch_to_flash+0x7c>)
 800071e:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000722:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, DIR_Pin, 0);	//Programmer data bus direction is set to the MCU
 8000724:	2200      	movs	r2, #0
 8000726:	2110      	movs	r1, #16
 8000728:	4805      	ldr	r0, [pc, #20]	; (8000740 <switch_to_flash+0x78>)
 800072a:	f001 f931 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OE_Pin, 0);	//OE is enabled again
 800072e:	2200      	movs	r2, #0
 8000730:	2108      	movs	r1, #8
 8000732:	4803      	ldr	r0, [pc, #12]	; (8000740 <switch_to_flash+0x78>)
 8000734:	f001 f92c 	bl	8001990 <HAL_GPIO_WritePin>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40011000 	.word	0x40011000
 8000740:	40010c00 	.word	0x40010c00
 8000744:	40010800 	.word	0x40010800

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
	  /* USER CODE END 1 */

	  /* MCU Configuration--------------------------------------------------------*/

	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 800074e:	f000 fe33 	bl	80013b8 <HAL_Init>
	  /* USER CODE BEGIN Init */

	  /* USER CODE END Init */

	  /* Configure the system clock */
	  SystemClock_Config();
 8000752:	f000 fc07 	bl	8000f64 <SystemClock_Config>
	  /* USER CODE BEGIN SysInit */

	  /* USER CODE END SysInit */

	  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 8000756:	f000 fcaf 	bl	80010b8 <MX_GPIO_Init>
	  MX_USB_DEVICE_Init();
 800075a:	f005 fbab 	bl	8005eb4 <MX_USB_DEVICE_Init>
	  MX_TIM1_Init();
 800075e:	f000 fc5b 	bl	8001018 <MX_TIM1_Init>
	  /* USER CODE BEGIN 2 */
	  HAL_TIM_Base_Start(&htim1);
 8000762:	488b      	ldr	r0, [pc, #556]	; (8000990 <main+0x248>)
 8000764:	f002 fcd9 	bl	800311a <HAL_TIM_Base_Start>
	  ready_led();
 8000768:	f7ff fd08 	bl	800017c <ready_led>
	  reset_addr();
 800076c:	f7ff fd42 	bl	80001f4 <reset_addr>

	  HAL_GPIO_WritePin(GPIOB, DIR_Pin, 0); //SET DIR WRITE
 8000770:	2200      	movs	r2, #0
 8000772:	2110      	movs	r1, #16
 8000774:	4887      	ldr	r0, [pc, #540]	; (8000994 <main+0x24c>)
 8000776:	f001 f90b 	bl	8001990 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, OE_Pin, 0); //SET DIR WRITE
 800077a:	2200      	movs	r2, #0
 800077c:	2108      	movs	r1, #8
 800077e:	4885      	ldr	r0, [pc, #532]	; (8000994 <main+0x24c>)
 8000780:	f001 f906 	bl	8001990 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, WE_Pin, 1); //SET READ
 8000784:	2201      	movs	r2, #1
 8000786:	2180      	movs	r1, #128	; 0x80
 8000788:	4882      	ldr	r0, [pc, #520]	; (8000994 <main+0x24c>)
 800078a:	f001 f901 	bl	8001990 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TIME_Pin, 0); //TIME DISABLE
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000794:	4880      	ldr	r0, [pc, #512]	; (8000998 <main+0x250>)
 8000796:	f001 f8fb 	bl	8001990 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, CE_Pin, 0); //CE EN
 800079a:	2200      	movs	r2, #0
 800079c:	2104      	movs	r1, #4
 800079e:	487d      	ldr	r0, [pc, #500]	; (8000994 <main+0x24c>)
 80007a0:	f001 f8f6 	bl	8001990 <HAL_GPIO_WritePin>
	  switch_to_flash();
 80007a4:	f7ff ff90 	bl	80006c8 <switch_to_flash>
	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */
	  while (1)	//nullState, nothing happens unless is said to. Waiting for orders mode
	    {

	  	  if (mode_control == readBuffer_mode) //Read Buffer mode
 80007a8:	4b7c      	ldr	r3, [pc, #496]	; (800099c <main+0x254>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b0a      	cmp	r3, #10
 80007ae:	f040 80a6 	bne.w	80008fe <main+0x1b6>
	  	  {
	  		  reset_addr();	//Reset address counter to 0
 80007b2:	f7ff fd1f 	bl	80001f4 <reset_addr>
	  		  delay_us(3000);	//Not sure if necessary, probably not
 80007b6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007ba:	f7ff fcc7 	bl	800014c <delay_us>
	  		  if (memory_mode == flash) //Check memory mode
 80007be:	4b78      	ldr	r3, [pc, #480]	; (80009a0 <main+0x258>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d101      	bne.n	80007ca <main+0x82>
	  		  {
	  			  switch_to_flash(); //Map full Flash range to address space and hide FeRAM
 80007c6:	f7ff ff7f 	bl	80006c8 <switch_to_flash>
	  		  }

	  		  if (memory_mode == feram) //Check memory mode
 80007ca:	4b75      	ldr	r3, [pc, #468]	; (80009a0 <main+0x258>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d105      	bne.n	80007de <main+0x96>
	  		  {
	  			  switch_to_sram();	//Map FeRAM to 0x100000
 80007d2:	f7ff ff39 	bl	8000648 <switch_to_sram>
	  			  goto_addr(FERAM_ADDR);	//Set Address counter to FeRAM first address
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f7ff fd2b 	bl	8000234 <goto_addr>
	  		  }

	  		  GPIOA->CRL = port_read;	//Set GPIOA data lines as input
 80007de:	4b71      	ldr	r3, [pc, #452]	; (80009a4 <main+0x25c>)
 80007e0:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80007e4:	601a      	str	r2, [r3, #0]
	  		  GPIOB->CRH = port_read;	//Set GPIOB data lines as input
 80007e6:	4b6b      	ldr	r3, [pc, #428]	; (8000994 <main+0x24c>)
 80007e8:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80007ec:	605a      	str	r2, [r3, #4]

	  		  HAL_GPIO_WritePin(GPIOB, WE_Pin, 1);	//Disable WE as not a reading operation
 80007ee:	2201      	movs	r2, #1
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	4868      	ldr	r0, [pc, #416]	; (8000994 <main+0x24c>)
 80007f4:	f001 f8cc 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, OE_Pin, 0); 	//Enable memory output
 80007f8:	2200      	movs	r2, #0
 80007fa:	2108      	movs	r1, #8
 80007fc:	4865      	ldr	r0, [pc, #404]	; (8000994 <main+0x24c>)
 80007fe:	f001 f8c7 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, DIR_Pin, 0);	//Set Programmer data bus toward the MCU
 8000802:	2200      	movs	r2, #0
 8000804:	2110      	movs	r1, #16
 8000806:	4863      	ldr	r0, [pc, #396]	; (8000994 <main+0x24c>)
 8000808:	f001 f8c2 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, ADDR_5555_Pin, 0);	//Pull down 0x5555
 800080c:	2200      	movs	r2, #0
 800080e:	2101      	movs	r1, #1
 8000810:	4860      	ldr	r0, [pc, #384]	; (8000994 <main+0x24c>)
 8000812:	f001 f8bd 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, ADDR_2AAA_Pin, 0); 	//Pull down 0x5555
 8000816:	2200      	movs	r2, #0
 8000818:	2102      	movs	r1, #2
 800081a:	485e      	ldr	r0, [pc, #376]	; (8000994 <main+0x24c>)
 800081c:	f001 f8b8 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOC, ADDR_EN_Pin, 0);	//Enable address counter output
 8000820:	2200      	movs	r2, #0
 8000822:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000826:	485c      	ldr	r0, [pc, #368]	; (8000998 <main+0x250>)
 8000828:	f001 f8b2 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, CE_Pin, 1);	//Disable CE signal (because of FeRAM compatibility
 800082c:	2201      	movs	r2, #1
 800082e:	2104      	movs	r1, #4
 8000830:	4858      	ldr	r0, [pc, #352]	; (8000994 <main+0x24c>)
 8000832:	f001 f8ad 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin, 0);	//Turn status LED on signaling the user of operation start
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083c:	4856      	ldr	r0, [pc, #344]	; (8000998 <main+0x250>)
 800083e:	f001 f8a7 	bl	8001990 <HAL_GPIO_WritePin>

	  		  mem_buffer[0] = 'r';				//Send a 'r' character to the host
 8000842:	4b59      	ldr	r3, [pc, #356]	; (80009a8 <main+0x260>)
 8000844:	2272      	movs	r2, #114	; 0x72
 8000846:	701a      	strb	r2, [r3, #0]
	  		  CDC_Transmit_FS(mem_buffer, 1);	//to signal that the firmware is ready to send data
 8000848:	2101      	movs	r1, #1
 800084a:	4857      	ldr	r0, [pc, #348]	; (80009a8 <main+0x260>)
 800084c:	f005 fd0a 	bl	8006264 <CDC_Transmit_FS>

	  		  int reading = set;	//Set a reading loop controlled by the reading var
 8000850:	2301      	movs	r3, #1
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
	  		  while(reading == 1)	//
 8000854:	e050      	b.n	80008f8 <main+0x1b0>
	  		  {
	  			  while(ready != 1){}	//Wait for ready global flag to set signaling that a transfer was received
 8000856:	bf00      	nop
 8000858:	4b54      	ldr	r3, [pc, #336]	; (80009ac <main+0x264>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d1fb      	bne.n	8000858 <main+0x110>
	  			  ready = reset;	//Reset the ready global flag for the next iteration
 8000860:	4b52      	ldr	r3, [pc, #328]	; (80009ac <main+0x264>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
	  			  if (mem_buffer[0] == 'n')	//Checks if the transfer received was a 'n' with is the host command to request the next 512byte block
 8000866:	4b50      	ldr	r3, [pc, #320]	; (80009a8 <main+0x260>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b6e      	cmp	r3, #110	; 0x6e
 800086c:	d136      	bne.n	80008dc <main+0x194>
	  			  {
	  				  int buffer_addr = 0;						//Set a read loop to fill a 512byte b
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
	  				  while (buffer_addr < readbuffer_size)		//contents to the host
 8000872:	e029      	b.n	80008c8 <main+0x180>
	  				  {
	  					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0); //Enable CE to latch the address for the FeRAM (Flash does not care)
 8000874:	2200      	movs	r2, #0
 8000876:	2104      	movs	r1, #4
 8000878:	4846      	ldr	r0, [pc, #280]	; (8000994 <main+0x24c>)
 800087a:	f001 f889 	bl	8001990 <HAL_GPIO_WritePin>
	  					  delay_us(10);	//Not sure if necessary
 800087e:	200a      	movs	r0, #10
 8000880:	f7ff fc64 	bl	800014c <delay_us>
	  					  mem_buffer[buffer_addr+1] = (GPIOA->IDR & 0x00FF);	//Read GPIOA input register to a buffer address. Does it through a 0x00FF bit mask to select only the data pins (0-7).
 8000884:	4b47      	ldr	r3, [pc, #284]	; (80009a4 <main+0x25c>)
 8000886:	689a      	ldr	r2, [r3, #8]
 8000888:	6a3b      	ldr	r3, [r7, #32]
 800088a:	3301      	adds	r3, #1
 800088c:	b2d1      	uxtb	r1, r2
 800088e:	4a46      	ldr	r2, [pc, #280]	; (80009a8 <main+0x260>)
 8000890:	54d1      	strb	r1, [r2, r3]
	  					  mem_buffer[buffer_addr] = (GPIOB->IDR & 0xFF00)>>8;	//Read GPIOB input register to a buffer address. Does it through a 0xFF00 bit mask to select only the data pins (8-15) and shift the bits left 8 times.
 8000892:	4b40      	ldr	r3, [pc, #256]	; (8000994 <main+0x24c>)
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	0a1b      	lsrs	r3, r3, #8
 8000898:	b2d9      	uxtb	r1, r3
 800089a:	4a43      	ldr	r2, [pc, #268]	; (80009a8 <main+0x260>)
 800089c:	6a3b      	ldr	r3, [r7, #32]
 800089e:	4413      	add	r3, r2
 80008a0:	460a      	mov	r2, r1
 80008a2:	701a      	strb	r2, [r3, #0]
	  					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1); //Disable CE to set it to the next iteration
 80008a4:	2201      	movs	r2, #1
 80008a6:	2104      	movs	r1, #4
 80008a8:	483a      	ldr	r0, [pc, #232]	; (8000994 <main+0x24c>)
 80008aa:	f001 f871 	bl	8001990 <HAL_GPIO_WritePin>
	  					  buffer_addr = buffer_addr+2;	//Increment buffer_addr by two because two bytes were read
 80008ae:	6a3b      	ldr	r3, [r7, #32]
 80008b0:	3302      	adds	r3, #2
 80008b2:	623b      	str	r3, [r7, #32]

	  					  HAL_GPIO_WritePin(GPIOB, INCR_Pin, 1); //Strobe address counter increase pin to increment it by 1
 80008b4:	2201      	movs	r2, #1
 80008b6:	2120      	movs	r1, #32
 80008b8:	4836      	ldr	r0, [pc, #216]	; (8000994 <main+0x24c>)
 80008ba:	f001 f869 	bl	8001990 <HAL_GPIO_WritePin>
	  					  HAL_GPIO_WritePin(GPIOB, INCR_Pin, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2120      	movs	r1, #32
 80008c2:	4834      	ldr	r0, [pc, #208]	; (8000994 <main+0x24c>)
 80008c4:	f001 f864 	bl	8001990 <HAL_GPIO_WritePin>
	  				  while (buffer_addr < readbuffer_size)		//contents to the host
 80008c8:	6a3b      	ldr	r3, [r7, #32]
 80008ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008ce:	dbd1      	blt.n	8000874 <main+0x12c>


	  				  }
	  				  CDC_Transmit_FS(mem_buffer, readbuffer_size);	//Transmit the 512byte buffer to the host
 80008d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d4:	4834      	ldr	r0, [pc, #208]	; (80009a8 <main+0x260>)
 80008d6:	f005 fcc5 	bl	8006264 <CDC_Transmit_FS>
 80008da:	e00d      	b.n	80008f8 <main+0x1b0>
	  			  }
	  			  else	//If the received char is not 'n' -> Terminate exection and go back to nullState
	  			  {
	  				  reading = reset;	//Reset reading to terminate the loop
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
	  				  ready = reset;	//Reset ready because why not
 80008e0:	4b32      	ldr	r3, [pc, #200]	; (80009ac <main+0x264>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
	  				  mode_control = nullState_mode;	//Return control mode to nullState
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <main+0x254>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
	  				  HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin, 1);	//Turn the led off to signal the user that the operation terminated
 80008ec:	2201      	movs	r2, #1
 80008ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f2:	4829      	ldr	r0, [pc, #164]	; (8000998 <main+0x250>)
 80008f4:	f001 f84c 	bl	8001990 <HAL_GPIO_WritePin>
	  		  while(reading == 1)	//
 80008f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d0ab      	beq.n	8000856 <main+0x10e>
	  			  }
	  		  }
	  	  }

	  	  if (mode_control == readAddr_mode) //Read Address, Ignore for now
 80008fe:	4b27      	ldr	r3, [pc, #156]	; (800099c <main+0x254>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2b0c      	cmp	r3, #12
 8000904:	f040 8086 	bne.w	8000a14 <main+0x2cc>
	  	  {
	  		  GPIOA->CRL = port_read;
 8000908:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <main+0x25c>)
 800090a:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 800090e:	601a      	str	r2, [r3, #0]
	  		  GPIOB->CRH = port_read;
 8000910:	4b20      	ldr	r3, [pc, #128]	; (8000994 <main+0x24c>)
 8000912:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000916:	605a      	str	r2, [r3, #4]


	  		  HAL_GPIO_WritePin(GPIOB, WE_Pin, 1); //SET READ
 8000918:	2201      	movs	r2, #1
 800091a:	2180      	movs	r1, #128	; 0x80
 800091c:	481d      	ldr	r0, [pc, #116]	; (8000994 <main+0x24c>)
 800091e:	f001 f837 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, OE_Pin, 0); //SET READ
 8000922:	2200      	movs	r2, #0
 8000924:	2108      	movs	r1, #8
 8000926:	481b      	ldr	r0, [pc, #108]	; (8000994 <main+0x24c>)
 8000928:	f001 f832 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, DIR_Pin, 0); //SET DIR READ
 800092c:	2200      	movs	r2, #0
 800092e:	2110      	movs	r1, #16
 8000930:	4818      	ldr	r0, [pc, #96]	; (8000994 <main+0x24c>)
 8000932:	f001 f82d 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, ADDR_5555_Pin, 0); //5555 DISABLE
 8000936:	2200      	movs	r2, #0
 8000938:	2101      	movs	r1, #1
 800093a:	4816      	ldr	r0, [pc, #88]	; (8000994 <main+0x24c>)
 800093c:	f001 f828 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, ADDR_2AAA_Pin, 0); //2AAA DISABLE
 8000940:	2200      	movs	r2, #0
 8000942:	2102      	movs	r1, #2
 8000944:	4813      	ldr	r0, [pc, #76]	; (8000994 <main+0x24c>)
 8000946:	f001 f823 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOC, ADDR_EN_Pin, 0); //ADDR EN
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000950:	4811      	ldr	r0, [pc, #68]	; (8000998 <main+0x250>)
 8000952:	f001 f81d 	bl	8001990 <HAL_GPIO_WritePin>

	  		  reset_addr();
 8000956:	f7ff fc4d 	bl	80001f4 <reset_addr>

	  		  HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin, 0); //Status pin on
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <main+0x250>)
 8000962:	f001 f815 	bl	8001990 <HAL_GPIO_WritePin>
	  		  uint32_t addr = mem_buffer[1] | (mem_buffer[2] << 8) | (mem_buffer[3] << 16);
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <main+0x260>)
 8000968:	785b      	ldrb	r3, [r3, #1]
 800096a:	461a      	mov	r2, r3
 800096c:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <main+0x260>)
 800096e:	789b      	ldrb	r3, [r3, #2]
 8000970:	021b      	lsls	r3, r3, #8
 8000972:	431a      	orrs	r2, r3
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <main+0x260>)
 8000976:	78db      	ldrb	r3, [r3, #3]
 8000978:	041b      	lsls	r3, r3, #16
 800097a:	4313      	orrs	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
	  		  uint32_t loop = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
	  		  HAL_GPIO_WritePin(GPIOB, CE_Pin, 1); //CE DISABLE
 8000982:	2201      	movs	r2, #1
 8000984:	2104      	movs	r1, #4
 8000986:	4803      	ldr	r0, [pc, #12]	; (8000994 <main+0x24c>)
 8000988:	f001 f802 	bl	8001990 <HAL_GPIO_WritePin>
	  		  while (loop < addr)
 800098c:	e01d      	b.n	80009ca <main+0x282>
 800098e:	bf00      	nop
 8000990:	200005e0 	.word	0x200005e0
 8000994:	40010c00 	.word	0x40010c00
 8000998:	40011000 	.word	0x40011000
 800099c:	200001a0 	.word	0x200001a0
 80009a0:	200003d8 	.word	0x200003d8
 80009a4:	40010800 	.word	0x40010800
 80009a8:	200003dc 	.word	0x200003dc
 80009ac:	200001a8 	.word	0x200001a8
	  		  {
	  			  HAL_GPIO_WritePin(GPIOB, INCR_Pin, 1); //ADDR INCR
 80009b0:	2201      	movs	r2, #1
 80009b2:	2120      	movs	r1, #32
 80009b4:	4880      	ldr	r0, [pc, #512]	; (8000bb8 <main+0x470>)
 80009b6:	f000 ffeb 	bl	8001990 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOB, INCR_Pin, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2120      	movs	r1, #32
 80009be:	487e      	ldr	r0, [pc, #504]	; (8000bb8 <main+0x470>)
 80009c0:	f000 ffe6 	bl	8001990 <HAL_GPIO_WritePin>
	  			  loop=loop+1;
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	3301      	adds	r3, #1
 80009c8:	61fb      	str	r3, [r7, #28]
	  		  while (loop < addr)
 80009ca:	69fa      	ldr	r2, [r7, #28]
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d3ee      	bcc.n	80009b0 <main+0x268>
	  		  }
	  		  HAL_GPIO_WritePin(GPIOB, CE_Pin, 0); //CE EN
 80009d2:	2200      	movs	r2, #0
 80009d4:	2104      	movs	r1, #4
 80009d6:	4878      	ldr	r0, [pc, #480]	; (8000bb8 <main+0x470>)
 80009d8:	f000 ffda 	bl	8001990 <HAL_GPIO_WritePin>
	  		  delay_us(3000);
 80009dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009e0:	f7ff fbb4 	bl	800014c <delay_us>
	  		  mem_buffer[0] = (GPIOA->IDR & 0x00FF);
 80009e4:	4b75      	ldr	r3, [pc, #468]	; (8000bbc <main+0x474>)
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b75      	ldr	r3, [pc, #468]	; (8000bc0 <main+0x478>)
 80009ec:	701a      	strb	r2, [r3, #0]
	  		  mem_buffer[1] = (GPIOB->IDR & 0xFF00)>>8;
 80009ee:	4b72      	ldr	r3, [pc, #456]	; (8000bb8 <main+0x470>)
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	0a1b      	lsrs	r3, r3, #8
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4b72      	ldr	r3, [pc, #456]	; (8000bc0 <main+0x478>)
 80009f8:	705a      	strb	r2, [r3, #1]
	  		  CDC_Transmit_FS(mem_buffer, 2);
 80009fa:	2102      	movs	r1, #2
 80009fc:	4870      	ldr	r0, [pc, #448]	; (8000bc0 <main+0x478>)
 80009fe:	f005 fc31 	bl	8006264 <CDC_Transmit_FS>
	  		  mode_control = 0;
 8000a02:	4b70      	ldr	r3, [pc, #448]	; (8000bc4 <main+0x47c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
	  		  HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin, 1); //Status off
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0e:	486e      	ldr	r0, [pc, #440]	; (8000bc8 <main+0x480>)
 8000a10:	f000 ffbe 	bl	8001990 <HAL_GPIO_WritePin>
	  	  }

	  	  if (mode_control == writeFlash_mode) //Write file to Flash
 8000a14:	4b6b      	ldr	r3, [pc, #428]	; (8000bc4 <main+0x47c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b19      	cmp	r3, #25
 8000a1a:	d17c      	bne.n	8000b16 <main+0x3ce>
	  	  {
	  		  reset_addr();	//Reset address counter to 0
 8000a1c:	f7ff fbea 	bl	80001f4 <reset_addr>
	  		  switch_to_flash(); //Map full Flash range to address space and hide FeRAM
 8000a20:	f7ff fe52 	bl	80006c8 <switch_to_flash>

	  		  GPIOA->CRL = port_write;	//Set GPIOA data pins as output
 8000a24:	4b65      	ldr	r3, [pc, #404]	; (8000bbc <main+0x474>)
 8000a26:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000a2a:	601a      	str	r2, [r3, #0]
	  		  GPIOB->CRH = port_write;	//Set GPIOB data pins as output
 8000a2c:	4b62      	ldr	r3, [pc, #392]	; (8000bb8 <main+0x470>)
 8000a2e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000a32:	605a      	str	r2, [r3, #4]
	  		  uint32_t blocks = mem_buffer[1] | (mem_buffer[2] << 8) | (mem_buffer[3] << 16);	//Parse the 3byte file size in blocks to a uint32 var
 8000a34:	4b62      	ldr	r3, [pc, #392]	; (8000bc0 <main+0x478>)
 8000a36:	785b      	ldrb	r3, [r3, #1]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b61      	ldr	r3, [pc, #388]	; (8000bc0 <main+0x478>)
 8000a3c:	789b      	ldrb	r3, [r3, #2]
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	431a      	orrs	r2, r3
 8000a42:	4b5f      	ldr	r3, [pc, #380]	; (8000bc0 <main+0x478>)
 8000a44:	78db      	ldrb	r3, [r3, #3]
 8000a46:	041b      	lsls	r3, r3, #16
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	60fb      	str	r3, [r7, #12]

	  		  HAL_GPIO_WritePin(GPIOB, WE_Pin, 1);	//Disable WE, important for correct waveform
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2180      	movs	r1, #128	; 0x80
 8000a50:	4859      	ldr	r0, [pc, #356]	; (8000bb8 <main+0x470>)
 8000a52:	f000 ff9d 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, OE_Pin, 1); 	//Disable Flash output, set cart level-shifter toward Flash chip
 8000a56:	2201      	movs	r2, #1
 8000a58:	2108      	movs	r1, #8
 8000a5a:	4857      	ldr	r0, [pc, #348]	; (8000bb8 <main+0x470>)
 8000a5c:	f000 ff98 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, DIR_Pin, 1);	//Set Programmer data bus toward the Cartridge
 8000a60:	2201      	movs	r2, #1
 8000a62:	2110      	movs	r1, #16
 8000a64:	4854      	ldr	r0, [pc, #336]	; (8000bb8 <main+0x470>)
 8000a66:	f000 ff93 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, ADDR_5555_Pin, 0);	//Pull down 0x5555
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	4852      	ldr	r0, [pc, #328]	; (8000bb8 <main+0x470>)
 8000a70:	f000 ff8e 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, ADDR_2AAA_Pin, 0); 	//Pull down 0x5555
 8000a74:	2200      	movs	r2, #0
 8000a76:	2102      	movs	r1, #2
 8000a78:	484f      	ldr	r0, [pc, #316]	; (8000bb8 <main+0x470>)
 8000a7a:	f000 ff89 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOC, ADDR_EN_Pin, 0);	//Disable address counter output, will be important later
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a84:	4850      	ldr	r0, [pc, #320]	; (8000bc8 <main+0x480>)
 8000a86:	f000 ff83 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin, 0);	//Turn status LED on signaling the user of operation start
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a90:	484d      	ldr	r0, [pc, #308]	; (8000bc8 <main+0x480>)
 8000a92:	f000 ff7d 	bl	8001990 <HAL_GPIO_WritePin>
	  		  ready = 0;
 8000a96:	4b4d      	ldr	r3, [pc, #308]	; (8000bcc <main+0x484>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]

	  		  uint32_t loop = 0;		//Initiate a block writing loop using the
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
	  		  while (loop < blocks)		//file size in blocks received earlier
 8000aa0:	e025      	b.n	8000aee <main+0x3a6>
	  		  {
	  			  buffering();	//Calls this function, it receives the data from the host and organizes it in a 256byte buffer
 8000aa2:	f7ff fda1 	bl	80005e8 <buffering>
	  			  command_5555(0xAA);	//Necessary command sequence to put
 8000aa6:	20aa      	movs	r0, #170	; 0xaa
 8000aa8:	f7ff fc54 	bl	8000354 <command_5555>
	  			  command_2AAA(0x55);	//the Flash internal controller in
 8000aac:	2055      	movs	r0, #85	; 0x55
 8000aae:	f7ff fc85 	bl	80003bc <command_2AAA>
	  			  command_5555(0xA0);	//write mode
 8000ab2:	20a0      	movs	r0, #160	; 0xa0
 8000ab4:	f7ff fc4e 	bl	8000354 <command_5555>

	  			  HAL_GPIO_WritePin(GPIOC, ADDR_EN_Pin, 0);	//Enable address counter output
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000abe:	4842      	ldr	r0, [pc, #264]	; (8000bc8 <main+0x480>)
 8000ac0:	f000 ff66 	bl	8001990 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOB, ADDR_2AAA_Pin, 0); //Pulls 0x2AAA down essentialy disabling it
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2102      	movs	r1, #2
 8000ac8:	483b      	ldr	r0, [pc, #236]	; (8000bb8 <main+0x470>)
 8000aca:	f000 ff61 	bl	8001990 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOB, ADDR_5555_Pin, 0); //Pulls 0x5555 down essentialy disabling it
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	4839      	ldr	r0, [pc, #228]	; (8000bb8 <main+0x470>)
 8000ad4:	f000 ff5c 	bl	8001990 <HAL_GPIO_WritePin>

	  			  buffer_write();	//Calls this function, it writes the whole 256byte buffer to the Flash
 8000ad8:	f7ff fcfa 	bl	80004d0 <buffer_write>
	  			  loop=loop+1;	//Increase by one block
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	61bb      	str	r3, [r7, #24]

	  			  //HAL_GPIO_WritePin(GPIOB, OE_Pin, 0); //Not sure why i've done this, may not be necessary, must test
	  			  delay_us(30000);	//A nice delay, needed for whatever reason to the write not have glitches, the polling function should have this function, but i must messed up something
 8000ae2:	f247 5030 	movw	r0, #30000	; 0x7530
 8000ae6:	f7ff fb31 	bl	800014c <delay_us>
	  			  polling();	//Waits for the 0x80 write completed signal from the Flash
 8000aea:	f7ff fd45 	bl	8000578 <polling>
	  		  while (loop < blocks)		//file size in blocks received earlier
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d3d5      	bcc.n	8000aa2 <main+0x35a>
	  		  }
	  		  mem_buffer[0] = 'e';				//Signals the host that the loop and operation has ended
 8000af6:	4b32      	ldr	r3, [pc, #200]	; (8000bc0 <main+0x478>)
 8000af8:	2265      	movs	r2, #101	; 0x65
 8000afa:	701a      	strb	r2, [r3, #0]
	  		  CDC_Transmit_FS(mem_buffer, 1);	//sending a 'e' chat
 8000afc:	2101      	movs	r1, #1
 8000afe:	4830      	ldr	r0, [pc, #192]	; (8000bc0 <main+0x478>)
 8000b00:	f005 fbb0 	bl	8006264 <CDC_Transmit_FS>
	  		  HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin, 1); //Turn the led off to signal the user that the operation terminated
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0a:	482f      	ldr	r0, [pc, #188]	; (8000bc8 <main+0x480>)
 8000b0c:	f000 ff40 	bl	8001990 <HAL_GPIO_WritePin>
	  		  mode_control = nullState_mode;	//Return firmware to standby nullState
 8000b10:	4b2c      	ldr	r3, [pc, #176]	; (8000bc4 <main+0x47c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
	  	  }

	  	  if (mode_control == writeFeram_mode) //Write file to FeRAM
 8000b16:	4b2b      	ldr	r3, [pc, #172]	; (8000bc4 <main+0x47c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b16      	cmp	r3, #22
 8000b1c:	d17c      	bne.n	8000c18 <main+0x4d0>
	  	  {
	  		  reset_addr();	//Reset address counter to 0
 8000b1e:	f7ff fb69 	bl	80001f4 <reset_addr>

	  		  switch_to_sram();	//Map FeRAM to 0x100000
 8000b22:	f7ff fd91 	bl	8000648 <switch_to_sram>
	  		  goto_addr(FERAM_ADDR);	//Set Address counter to FeRAM first address
 8000b26:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b2a:	f7ff fb83 	bl	8000234 <goto_addr>

	  		  GPIOA->CRL = port_write;	//Set GPIOA data pins as output
 8000b2e:	4b23      	ldr	r3, [pc, #140]	; (8000bbc <main+0x474>)
 8000b30:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000b34:	601a      	str	r2, [r3, #0]
	  		  GPIOB->CRH = port_write;	//Set GPIOB data pins as output
 8000b36:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <main+0x470>)
 8000b38:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000b3c:	605a      	str	r2, [r3, #4]
	  		  uint32_t blocks = mem_buffer[1] | (mem_buffer[2] << 8) | (mem_buffer[3] << 16);	//Parse the 3byte file size in blocks to a uint32 var
 8000b3e:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <main+0x478>)
 8000b40:	785b      	ldrb	r3, [r3, #1]
 8000b42:	461a      	mov	r2, r3
 8000b44:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <main+0x478>)
 8000b46:	789b      	ldrb	r3, [r3, #2]
 8000b48:	021b      	lsls	r3, r3, #8
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <main+0x478>)
 8000b4e:	78db      	ldrb	r3, [r3, #3]
 8000b50:	041b      	lsls	r3, r3, #16
 8000b52:	4313      	orrs	r3, r2
 8000b54:	60bb      	str	r3, [r7, #8]

	  		  HAL_GPIO_WritePin(GPIOB, CE_Pin, 1); //Disable CE, important for the FeRAM
 8000b56:	2201      	movs	r2, #1
 8000b58:	2104      	movs	r1, #4
 8000b5a:	4817      	ldr	r0, [pc, #92]	; (8000bb8 <main+0x470>)
 8000b5c:	f000 ff18 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, WE_Pin, 1);	//Disable WE, important for correct waveform
 8000b60:	2201      	movs	r2, #1
 8000b62:	2180      	movs	r1, #128	; 0x80
 8000b64:	4814      	ldr	r0, [pc, #80]	; (8000bb8 <main+0x470>)
 8000b66:	f000 ff13 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, OE_Pin, 1); 	//Disable Flash output, set cart level-shifter toward Flash chip
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2108      	movs	r1, #8
 8000b6e:	4812      	ldr	r0, [pc, #72]	; (8000bb8 <main+0x470>)
 8000b70:	f000 ff0e 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, DIR_Pin, 1);	//Set Programmer data bus toward the Cartridge
 8000b74:	2201      	movs	r2, #1
 8000b76:	2110      	movs	r1, #16
 8000b78:	480f      	ldr	r0, [pc, #60]	; (8000bb8 <main+0x470>)
 8000b7a:	f000 ff09 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, ADDR_5555_Pin, 0);	//Pull down 0x5555
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2101      	movs	r1, #1
 8000b82:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <main+0x470>)
 8000b84:	f000 ff04 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, ADDR_2AAA_Pin, 0); 	//Pull down 0x5555
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	480a      	ldr	r0, [pc, #40]	; (8000bb8 <main+0x470>)
 8000b8e:	f000 feff 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOC, ADDR_EN_Pin, 0);	//Enable Addres counter output
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b98:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <main+0x480>)
 8000b9a:	f000 fef9 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin, 0);	//Turn status LED on signaling the user of operation start
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba4:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <main+0x480>)
 8000ba6:	f000 fef3 	bl	8001990 <HAL_GPIO_WritePin>
	  		  ready = 0; //Don't know if this is important
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <main+0x484>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]

	  		  uint32_t loop = 0;		//Set a block write loop just like Flash
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
	  		  while (loop < blocks)		//not really needed for FeRAM, but keeps compatibility high to the host
 8000bb4:	e01c      	b.n	8000bf0 <main+0x4a8>
 8000bb6:	bf00      	nop
 8000bb8:	40010c00 	.word	0x40010c00
 8000bbc:	40010800 	.word	0x40010800
 8000bc0:	200003dc 	.word	0x200003dc
 8000bc4:	200001a0 	.word	0x200001a0
 8000bc8:	40011000 	.word	0x40011000
 8000bcc:	200001a8 	.word	0x200001a8
	  		  {
	  			  buffering();	//Calls this function, it receives the data from the host and organizes it in a 256byte buffer
 8000bd0:	f7ff fd0a 	bl	80005e8 <buffering>
	  			  buffer_write_feram();	//Calls this function, writes the whole buffer to the FeRAM
 8000bd4:	f7ff fca6 	bl	8000524 <buffer_write_feram>
	  			  loop=loop+1;	//Increases by one block
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	617b      	str	r3, [r7, #20]
	  			  HAL_GPIO_WritePin(GPIOB, OE_Pin, 0); //Also not sure about this, may not be needed
 8000bde:	2200      	movs	r2, #0
 8000be0:	2108      	movs	r1, #8
 8000be2:	48c0      	ldr	r0, [pc, #768]	; (8000ee4 <main+0x79c>)
 8000be4:	f000 fed4 	bl	8001990 <HAL_GPIO_WritePin>
	  			  delay_us(3000);	//Reminiscent of the other function, may not be needed, must test
 8000be8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000bec:	f7ff faae 	bl	800014c <delay_us>
	  		  while (loop < blocks)		//not really needed for FeRAM, but keeps compatibility high to the host
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d3eb      	bcc.n	8000bd0 <main+0x488>
	  		  }
	  		  mem_buffer[0] = 'e';	//
 8000bf8:	4bbb      	ldr	r3, [pc, #748]	; (8000ee8 <main+0x7a0>)
 8000bfa:	2265      	movs	r2, #101	; 0x65
 8000bfc:	701a      	strb	r2, [r3, #0]
	  		  CDC_Transmit_FS(mem_buffer, 1);
 8000bfe:	2101      	movs	r1, #1
 8000c00:	48b9      	ldr	r0, [pc, #740]	; (8000ee8 <main+0x7a0>)
 8000c02:	f005 fb2f 	bl	8006264 <CDC_Transmit_FS>
	  		  HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin, 1); // LED OFF
 8000c06:	2201      	movs	r2, #1
 8000c08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0c:	48b7      	ldr	r0, [pc, #732]	; (8000eec <main+0x7a4>)
 8000c0e:	f000 febf 	bl	8001990 <HAL_GPIO_WritePin>
	  		  mode_control = 0;
 8000c12:	4bb7      	ldr	r3, [pc, #732]	; (8000ef0 <main+0x7a8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
	  	  }

	  	  if (mode_control == writeFlashAddr_mode) //WRITE Address
 8000c18:	4bb5      	ldr	r3, [pc, #724]	; (8000ef0 <main+0x7a8>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b17      	cmp	r3, #23
 8000c1e:	d177      	bne.n	8000d10 <main+0x5c8>
	  	  {
	  		  GPIOA->CRL = 0x33333333;
 8000c20:	4bb4      	ldr	r3, [pc, #720]	; (8000ef4 <main+0x7ac>)
 8000c22:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000c26:	601a      	str	r2, [r3, #0]
	  		  GPIOB->CRH = 0x33333333;
 8000c28:	4bae      	ldr	r3, [pc, #696]	; (8000ee4 <main+0x79c>)
 8000c2a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000c2e:	605a      	str	r2, [r3, #4]
	  		  uint32_t addr = mem_buffer[1] | (mem_buffer[2] << 8) | (mem_buffer[3] << 16);
 8000c30:	4bad      	ldr	r3, [pc, #692]	; (8000ee8 <main+0x7a0>)
 8000c32:	785b      	ldrb	r3, [r3, #1]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4bac      	ldr	r3, [pc, #688]	; (8000ee8 <main+0x7a0>)
 8000c38:	789b      	ldrb	r3, [r3, #2]
 8000c3a:	021b      	lsls	r3, r3, #8
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	4baa      	ldr	r3, [pc, #680]	; (8000ee8 <main+0x7a0>)
 8000c40:	78db      	ldrb	r3, [r3, #3]
 8000c42:	041b      	lsls	r3, r3, #16
 8000c44:	4313      	orrs	r3, r2
 8000c46:	607b      	str	r3, [r7, #4]

	  		  HAL_GPIO_WritePin(GPIOB, OE_Pin, 1); //SET READ
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2108      	movs	r1, #8
 8000c4c:	48a5      	ldr	r0, [pc, #660]	; (8000ee4 <main+0x79c>)
 8000c4e:	f000 fe9f 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, DIR_Pin, 1); //SET DIR WRITE
 8000c52:	2201      	movs	r2, #1
 8000c54:	2110      	movs	r1, #16
 8000c56:	48a3      	ldr	r0, [pc, #652]	; (8000ee4 <main+0x79c>)
 8000c58:	f000 fe9a 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, WE_Pin, 1); //WRITE DISABLE
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2180      	movs	r1, #128	; 0x80
 8000c60:	48a0      	ldr	r0, [pc, #640]	; (8000ee4 <main+0x79c>)
 8000c62:	f000 fe95 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0); //5555 DISABLE
 8000c66:	2200      	movs	r2, #0
 8000c68:	2101      	movs	r1, #1
 8000c6a:	489e      	ldr	r0, [pc, #632]	; (8000ee4 <main+0x79c>)
 8000c6c:	f000 fe90 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); //2AAA DISABLE
 8000c70:	2200      	movs	r2, #0
 8000c72:	2102      	movs	r1, #2
 8000c74:	489b      	ldr	r0, [pc, #620]	; (8000ee4 <main+0x79c>)
 8000c76:	f000 fe8b 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1); //ADDR DISABLE
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c80:	489a      	ldr	r0, [pc, #616]	; (8000eec <main+0x7a4>)
 8000c82:	f000 fe85 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // LED ON
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8c:	4897      	ldr	r0, [pc, #604]	; (8000eec <main+0x7a4>)
 8000c8e:	f000 fe7f 	bl	8001990 <HAL_GPIO_WritePin>

	  		  //--------------------------------------------------------
  			  command_5555(0xAA);
 8000c92:	20aa      	movs	r0, #170	; 0xaa
 8000c94:	f7ff fb5e 	bl	8000354 <command_5555>
  			  command_2AAA(0x55);
 8000c98:	2055      	movs	r0, #85	; 0x55
 8000c9a:	f7ff fb8f 	bl	80003bc <command_2AAA>
  			  command_5555(0xA0);
 8000c9e:	20a0      	movs	r0, #160	; 0xa0
 8000ca0:	f7ff fb58 	bl	8000354 <command_5555>
	  		  write_addr(mem_buffer[4],mem_buffer[5],addr);
 8000ca4:	4b90      	ldr	r3, [pc, #576]	; (8000ee8 <main+0x7a0>)
 8000ca6:	7918      	ldrb	r0, [r3, #4]
 8000ca8:	4b8f      	ldr	r3, [pc, #572]	; (8000ee8 <main+0x7a0>)
 8000caa:	795b      	ldrb	r3, [r3, #5]
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f7ff fbb8 	bl	8000424 <write_addr>

	  		  //--------------------------------------------------------
	  		  GPIOA->CRL = 0x88888888;
 8000cb4:	4b8f      	ldr	r3, [pc, #572]	; (8000ef4 <main+0x7ac>)
 8000cb6:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000cba:	601a      	str	r2, [r3, #0]
	  		  GPIOB->CRH = 0x88888888;
 8000cbc:	4b89      	ldr	r3, [pc, #548]	; (8000ee4 <main+0x79c>)
 8000cbe:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000cc2:	605a      	str	r2, [r3, #4]

	  		  HAL_GPIO_WritePin(GPIOB, OE_Pin, 0); //SET READ
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2108      	movs	r1, #8
 8000cc8:	4886      	ldr	r0, [pc, #536]	; (8000ee4 <main+0x79c>)
 8000cca:	f000 fe61 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, DIR_Pin, 0); //SET DIR READ
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2110      	movs	r1, #16
 8000cd2:	4884      	ldr	r0, [pc, #528]	; (8000ee4 <main+0x79c>)
 8000cd4:	f000 fe5c 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_Delay(1000);
 8000cd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cdc:	f000 fbce 	bl	800147c <HAL_Delay>

	  		  mem_buffer[0] = (GPIOA->IDR & 0x00FF);
 8000ce0:	4b84      	ldr	r3, [pc, #528]	; (8000ef4 <main+0x7ac>)
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4b80      	ldr	r3, [pc, #512]	; (8000ee8 <main+0x7a0>)
 8000ce8:	701a      	strb	r2, [r3, #0]
	  		  mem_buffer[1] = (GPIOB->IDR & 0xFF00)>>8;
 8000cea:	4b7e      	ldr	r3, [pc, #504]	; (8000ee4 <main+0x79c>)
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	0a1b      	lsrs	r3, r3, #8
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4b7d      	ldr	r3, [pc, #500]	; (8000ee8 <main+0x7a0>)
 8000cf4:	705a      	strb	r2, [r3, #1]
	  		  CDC_Transmit_FS(mem_buffer, 2);
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	487b      	ldr	r0, [pc, #492]	; (8000ee8 <main+0x7a0>)
 8000cfa:	f005 fab3 	bl	8006264 <CDC_Transmit_FS>
	  		  mode_control = 0;
 8000cfe:	4b7c      	ldr	r3, [pc, #496]	; (8000ef0 <main+0x7a8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
	  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); //Status off
 8000d04:	2201      	movs	r2, #1
 8000d06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d0a:	4878      	ldr	r0, [pc, #480]	; (8000eec <main+0x7a4>)
 8000d0c:	f000 fe40 	bl	8001990 <HAL_GPIO_WritePin>
	  	  }

	  	  if (mode_control == resetFlash_mode) //RESET FLASH
 8000d10:	4b77      	ldr	r3, [pc, #476]	; (8000ef0 <main+0x7a8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b29      	cmp	r3, #41	; 0x29
 8000d16:	d153      	bne.n	8000dc0 <main+0x678>
	  	  {
	  		  GPIOA->CRL = port_write;
 8000d18:	4b76      	ldr	r3, [pc, #472]	; (8000ef4 <main+0x7ac>)
 8000d1a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000d1e:	601a      	str	r2, [r3, #0]
	  		  GPIOB->CRH = port_write;
 8000d20:	4b70      	ldr	r3, [pc, #448]	; (8000ee4 <main+0x79c>)
 8000d22:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000d26:	605a      	str	r2, [r3, #4]

	  		  //--------------------------------------------
	  		  HAL_GPIO_WritePin(GPIOB, OE_Pin, 1); //SET READ
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2108      	movs	r1, #8
 8000d2c:	486d      	ldr	r0, [pc, #436]	; (8000ee4 <main+0x79c>)
 8000d2e:	f000 fe2f 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, DIR_Pin, 1); //SET DIR WRITE
 8000d32:	2201      	movs	r2, #1
 8000d34:	2110      	movs	r1, #16
 8000d36:	486b      	ldr	r0, [pc, #428]	; (8000ee4 <main+0x79c>)
 8000d38:	f000 fe2a 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, WE_Pin, 1); //WRITE DISABLE
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	4868      	ldr	r0, [pc, #416]	; (8000ee4 <main+0x79c>)
 8000d42:	f000 fe25 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin, 0); // LED ON
 8000d46:	2200      	movs	r2, #0
 8000d48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4c:	4867      	ldr	r0, [pc, #412]	; (8000eec <main+0x7a4>)
 8000d4e:	f000 fe1f 	bl	8001990 <HAL_GPIO_WritePin>
  			  command_5555(0xAA);
 8000d52:	20aa      	movs	r0, #170	; 0xaa
 8000d54:	f7ff fafe 	bl	8000354 <command_5555>
  			  command_2AAA(0x55);
 8000d58:	2055      	movs	r0, #85	; 0x55
 8000d5a:	f7ff fb2f 	bl	80003bc <command_2AAA>
  			  command_5555(0xF0);
 8000d5e:	20f0      	movs	r0, #240	; 0xf0
 8000d60:	f7ff faf8 	bl	8000354 <command_5555>

	  		  //--------------------------------------------
	  		  GPIOA->CRL = port_read;
 8000d64:	4b63      	ldr	r3, [pc, #396]	; (8000ef4 <main+0x7ac>)
 8000d66:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000d6a:	601a      	str	r2, [r3, #0]
	  		  GPIOB->CRH = port_read;
 8000d6c:	4b5d      	ldr	r3, [pc, #372]	; (8000ee4 <main+0x79c>)
 8000d6e:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000d72:	605a      	str	r2, [r3, #4]

	  		  HAL_GPIO_WritePin(GPIOB, OE_Pin, 0); //SET READ
 8000d74:	2200      	movs	r2, #0
 8000d76:	2108      	movs	r1, #8
 8000d78:	485a      	ldr	r0, [pc, #360]	; (8000ee4 <main+0x79c>)
 8000d7a:	f000 fe09 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, DIR_Pin, 0); //SET DIR READ
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2110      	movs	r1, #16
 8000d82:	4858      	ldr	r0, [pc, #352]	; (8000ee4 <main+0x79c>)
 8000d84:	f000 fe04 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_Delay(1000);
 8000d88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d8c:	f000 fb76 	bl	800147c <HAL_Delay>

	  		  mem_buffer[0] = (GPIOA->IDR & 0x00FF);
 8000d90:	4b58      	ldr	r3, [pc, #352]	; (8000ef4 <main+0x7ac>)
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4b54      	ldr	r3, [pc, #336]	; (8000ee8 <main+0x7a0>)
 8000d98:	701a      	strb	r2, [r3, #0]
	  		  mem_buffer[1] = (GPIOB->IDR & 0xFF00)>>8;
 8000d9a:	4b52      	ldr	r3, [pc, #328]	; (8000ee4 <main+0x79c>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	0a1b      	lsrs	r3, r3, #8
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b51      	ldr	r3, [pc, #324]	; (8000ee8 <main+0x7a0>)
 8000da4:	705a      	strb	r2, [r3, #1]
	  		  CDC_Transmit_FS(mem_buffer, 2);
 8000da6:	2102      	movs	r1, #2
 8000da8:	484f      	ldr	r0, [pc, #316]	; (8000ee8 <main+0x7a0>)
 8000daa:	f005 fa5b 	bl	8006264 <CDC_Transmit_FS>
	  		  mode_control = 0;
 8000dae:	4b50      	ldr	r3, [pc, #320]	; (8000ef0 <main+0x7a8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
	  		  HAL_GPIO_WritePin(GPIOC,  STATUS_LED_Pin, 1); //Status off
 8000db4:	2201      	movs	r2, #1
 8000db6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dba:	484c      	ldr	r0, [pc, #304]	; (8000eec <main+0x7a4>)
 8000dbc:	f000 fde8 	bl	8001990 <HAL_GPIO_WritePin>
	  	  }

	  	  if (mode_control == readSR_mode) //STATUS REG READ
 8000dc0:	4b4b      	ldr	r3, [pc, #300]	; (8000ef0 <main+0x7a8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b2a      	cmp	r3, #42	; 0x2a
 8000dc6:	d153      	bne.n	8000e70 <main+0x728>
	  	  {

	  		  GPIOA->CRL = port_write;
 8000dc8:	4b4a      	ldr	r3, [pc, #296]	; (8000ef4 <main+0x7ac>)
 8000dca:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000dce:	601a      	str	r2, [r3, #0]
	  		  GPIOB->CRH = port_write;
 8000dd0:	4b44      	ldr	r3, [pc, #272]	; (8000ee4 <main+0x79c>)
 8000dd2:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000dd6:	605a      	str	r2, [r3, #4]

	  		  //--------------------------------------------
	  		  HAL_GPIO_WritePin(GPIOB, OE_Pin, 1); //SET READ
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2108      	movs	r1, #8
 8000ddc:	4841      	ldr	r0, [pc, #260]	; (8000ee4 <main+0x79c>)
 8000dde:	f000 fdd7 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, DIR_Pin, 1); //SET DIR WRITE
 8000de2:	2201      	movs	r2, #1
 8000de4:	2110      	movs	r1, #16
 8000de6:	483f      	ldr	r0, [pc, #252]	; (8000ee4 <main+0x79c>)
 8000de8:	f000 fdd2 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, WE_Pin, 1); //WRITE DISABLE
 8000dec:	2201      	movs	r2, #1
 8000dee:	2180      	movs	r1, #128	; 0x80
 8000df0:	483c      	ldr	r0, [pc, #240]	; (8000ee4 <main+0x79c>)
 8000df2:	f000 fdcd 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin, 0); // LED ON
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfc:	483b      	ldr	r0, [pc, #236]	; (8000eec <main+0x7a4>)
 8000dfe:	f000 fdc7 	bl	8001990 <HAL_GPIO_WritePin>
  			  command_5555(0xAA);
 8000e02:	20aa      	movs	r0, #170	; 0xaa
 8000e04:	f7ff faa6 	bl	8000354 <command_5555>
  			  command_2AAA(0x55);
 8000e08:	2055      	movs	r0, #85	; 0x55
 8000e0a:	f7ff fad7 	bl	80003bc <command_2AAA>
  			  command_5555(0x70);
 8000e0e:	2070      	movs	r0, #112	; 0x70
 8000e10:	f7ff faa0 	bl	8000354 <command_5555>

	  		  //--------------------------------------------
	  		  GPIOA->CRL = port_read;
 8000e14:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <main+0x7ac>)
 8000e16:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000e1a:	601a      	str	r2, [r3, #0]
	  		  GPIOB->CRH = port_read;
 8000e1c:	4b31      	ldr	r3, [pc, #196]	; (8000ee4 <main+0x79c>)
 8000e1e:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000e22:	605a      	str	r2, [r3, #4]

	  		  HAL_GPIO_WritePin(GPIOB, OE_Pin, 0); //SET READ
 8000e24:	2200      	movs	r2, #0
 8000e26:	2108      	movs	r1, #8
 8000e28:	482e      	ldr	r0, [pc, #184]	; (8000ee4 <main+0x79c>)
 8000e2a:	f000 fdb1 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, DIR_Pin, 0); //SET DIR READ
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2110      	movs	r1, #16
 8000e32:	482c      	ldr	r0, [pc, #176]	; (8000ee4 <main+0x79c>)
 8000e34:	f000 fdac 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_Delay(1000);
 8000e38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e3c:	f000 fb1e 	bl	800147c <HAL_Delay>

	  		  mem_buffer[0] = (GPIOA->IDR & 0x00FF);
 8000e40:	4b2c      	ldr	r3, [pc, #176]	; (8000ef4 <main+0x7ac>)
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <main+0x7a0>)
 8000e48:	701a      	strb	r2, [r3, #0]
	  		  mem_buffer[1] = (GPIOB->IDR & 0xFF00)>>8;
 8000e4a:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <main+0x79c>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	0a1b      	lsrs	r3, r3, #8
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <main+0x7a0>)
 8000e54:	705a      	strb	r2, [r3, #1]
	  		  CDC_Transmit_FS(mem_buffer, 2);
 8000e56:	2102      	movs	r1, #2
 8000e58:	4823      	ldr	r0, [pc, #140]	; (8000ee8 <main+0x7a0>)
 8000e5a:	f005 fa03 	bl	8006264 <CDC_Transmit_FS>
	  		  mode_control = 0;
 8000e5e:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <main+0x7a8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
	  		  HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin, 1); //Status off
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e6a:	4820      	ldr	r0, [pc, #128]	; (8000eec <main+0x7a4>)
 8000e6c:	f000 fd90 	bl	8001990 <HAL_GPIO_WritePin>
	  	  }

	  	  if (mode_control == erase_mode) //ERASE
 8000e70:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <main+0x7a8>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b1e      	cmp	r3, #30
 8000e76:	f47f ac97 	bne.w	80007a8 <main+0x60>
	  	  {
	  		  GPIOA->CRL = port_write;
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <main+0x7ac>)
 8000e7c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000e80:	601a      	str	r2, [r3, #0]
	  		  GPIOB->CRH = port_write;
 8000e82:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <main+0x79c>)
 8000e84:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000e88:	605a      	str	r2, [r3, #4]

	  		  HAL_GPIO_WritePin(GPIOB, OE_Pin, 1);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2108      	movs	r1, #8
 8000e8e:	4815      	ldr	r0, [pc, #84]	; (8000ee4 <main+0x79c>)
 8000e90:	f000 fd7e 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, WE_Pin, 1);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2180      	movs	r1, #128	; 0x80
 8000e98:	4812      	ldr	r0, [pc, #72]	; (8000ee4 <main+0x79c>)
 8000e9a:	f000 fd79 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, DIR_Pin, 1);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2110      	movs	r1, #16
 8000ea2:	4810      	ldr	r0, [pc, #64]	; (8000ee4 <main+0x79c>)
 8000ea4:	f000 fd74 	bl	8001990 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin, 0); //Status pin on
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eae:	480f      	ldr	r0, [pc, #60]	; (8000eec <main+0x7a4>)
 8000eb0:	f000 fd6e 	bl	8001990 <HAL_GPIO_WritePin>

  			  command_5555(0xAA);
 8000eb4:	20aa      	movs	r0, #170	; 0xaa
 8000eb6:	f7ff fa4d 	bl	8000354 <command_5555>
  			  command_2AAA(0x55);
 8000eba:	2055      	movs	r0, #85	; 0x55
 8000ebc:	f7ff fa7e 	bl	80003bc <command_2AAA>
  			  command_5555(0x80);
 8000ec0:	2080      	movs	r0, #128	; 0x80
 8000ec2:	f7ff fa47 	bl	8000354 <command_5555>
  			  command_5555(0xAA);
 8000ec6:	20aa      	movs	r0, #170	; 0xaa
 8000ec8:	f7ff fa44 	bl	8000354 <command_5555>
  			  command_2AAA(0x55);
 8000ecc:	2055      	movs	r0, #85	; 0x55
 8000ece:	f7ff fa75 	bl	80003bc <command_2AAA>
  			  command_5555(0x10);
 8000ed2:	2010      	movs	r0, #16
 8000ed4:	f7ff fa3e 	bl	8000354 <command_5555>

	  		  GPIOA->CRL = port_read;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <main+0x7ac>)
 8000eda:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	e00a      	b.n	8000ef8 <main+0x7b0>
 8000ee2:	bf00      	nop
 8000ee4:	40010c00 	.word	0x40010c00
 8000ee8:	200003dc 	.word	0x200003dc
 8000eec:	40011000 	.word	0x40011000
 8000ef0:	200001a0 	.word	0x200001a0
 8000ef4:	40010800 	.word	0x40010800
	  		  GPIOB->CRH = port_read;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <main+0x808>)
 8000efa:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000efe:	605a      	str	r2, [r3, #4]

	  		  HAL_GPIO_WritePin(GPIOB, OE_Pin, 0); //SET READ
 8000f00:	2200      	movs	r2, #0
 8000f02:	2108      	movs	r1, #8
 8000f04:	4812      	ldr	r0, [pc, #72]	; (8000f50 <main+0x808>)
 8000f06:	f000 fd43 	bl	8001990 <HAL_GPIO_WritePin>

	  		  HAL_GPIO_WritePin(GPIOB, DIR_Pin, 0); //SET DIR READ
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	4810      	ldr	r0, [pc, #64]	; (8000f50 <main+0x808>)
 8000f10:	f000 fd3e 	bl	8001990 <HAL_GPIO_WritePin>

	  		  HAL_Delay(1000);
 8000f14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f18:	f000 fab0 	bl	800147c <HAL_Delay>

	  		  mem_buffer[0] = (GPIOA->IDR & 0x00FF);
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <main+0x80c>)
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <main+0x810>)
 8000f24:	701a      	strb	r2, [r3, #0]
	  		  mem_buffer[1] = (GPIOB->IDR & 0xFF00)>>8;
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <main+0x808>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	0a1b      	lsrs	r3, r3, #8
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <main+0x810>)
 8000f30:	705a      	strb	r2, [r3, #1]
	  		  CDC_Transmit_FS(mem_buffer, 2);
 8000f32:	2102      	movs	r1, #2
 8000f34:	4808      	ldr	r0, [pc, #32]	; (8000f58 <main+0x810>)
 8000f36:	f005 f995 	bl	8006264 <CDC_Transmit_FS>
	  		  mode_control = 0;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <main+0x814>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
	  		  HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin, 1); //Status off
 8000f40:	2201      	movs	r2, #1
 8000f42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f46:	4806      	ldr	r0, [pc, #24]	; (8000f60 <main+0x818>)
 8000f48:	f000 fd22 	bl	8001990 <HAL_GPIO_WritePin>
	  	  if (mode_control == readBuffer_mode) //Read Buffer mode
 8000f4c:	e42c      	b.n	80007a8 <main+0x60>
 8000f4e:	bf00      	nop
 8000f50:	40010c00 	.word	0x40010c00
 8000f54:	40010800 	.word	0x40010800
 8000f58:	200003dc 	.word	0x200003dc
 8000f5c:	200001a0 	.word	0x200001a0
 8000f60:	40011000 	.word	0x40011000

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b094      	sub	sp, #80	; 0x50
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f6e:	2228      	movs	r2, #40	; 0x28
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f005 fd6c 	bl	8006a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f94:	2301      	movs	r3, #1
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000faa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fb0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 fbe2 	bl	8002784 <HAL_RCC_OscConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fc6:	f000 f913 	bl	80011f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fca:	230f      	movs	r3, #15
 8000fcc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fda:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 fe4c 	bl	8002c84 <HAL_RCC_ClockConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ff2:	f000 f8fd 	bl	80011f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ff6:	2310      	movs	r3, #16
 8000ff8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	4618      	mov	r0, r3
 8001002:	f001 ffa9 	bl	8002f58 <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800100c:	f000 f8f0 	bl	80011f0 <Error_Handler>
  }
}
 8001010:	bf00      	nop
 8001012:	3750      	adds	r7, #80	; 0x50
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101e:	f107 0308 	add.w	r3, r7, #8
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102c:	463b      	mov	r3, r7
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001034:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <MX_TIM1_Init+0x98>)
 8001036:	4a1f      	ldr	r2, [pc, #124]	; (80010b4 <MX_TIM1_Init+0x9c>)
 8001038:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <MX_TIM1_Init+0x98>)
 800103c:	2247      	movs	r2, #71	; 0x47
 800103e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <MX_TIM1_Init+0x98>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <MX_TIM1_Init+0x98>)
 8001048:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800104c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <MX_TIM1_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <MX_TIM1_Init+0x98>)
 8001056:	2200      	movs	r2, #0
 8001058:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <MX_TIM1_Init+0x98>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001060:	4813      	ldr	r0, [pc, #76]	; (80010b0 <MX_TIM1_Init+0x98>)
 8001062:	f002 f82f 	bl	80030c4 <HAL_TIM_Base_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800106c:	f000 f8c0 	bl	80011f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001074:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	4619      	mov	r1, r3
 800107c:	480c      	ldr	r0, [pc, #48]	; (80010b0 <MX_TIM1_Init+0x98>)
 800107e:	f002 f86f 	bl	8003160 <HAL_TIM_ConfigClockSource>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001088:	f000 f8b2 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800108c:	2300      	movs	r3, #0
 800108e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001094:	463b      	mov	r3, r7
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_TIM1_Init+0x98>)
 800109a:	f002 fa11 	bl	80034c0 <HAL_TIMEx_MasterConfigSynchronization>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80010a4:	f000 f8a4 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200005e0 	.word	0x200005e0
 80010b4:	40012c00 	.word	0x40012c00

080010b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010cc:	4b44      	ldr	r3, [pc, #272]	; (80011e0 <MX_GPIO_Init+0x128>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a43      	ldr	r2, [pc, #268]	; (80011e0 <MX_GPIO_Init+0x128>)
 80010d2:	f043 0310 	orr.w	r3, r3, #16
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b41      	ldr	r3, [pc, #260]	; (80011e0 <MX_GPIO_Init+0x128>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0310 	and.w	r3, r3, #16
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e4:	4b3e      	ldr	r3, [pc, #248]	; (80011e0 <MX_GPIO_Init+0x128>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a3d      	ldr	r2, [pc, #244]	; (80011e0 <MX_GPIO_Init+0x128>)
 80010ea:	f043 0320 	orr.w	r3, r3, #32
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b3b      	ldr	r3, [pc, #236]	; (80011e0 <MX_GPIO_Init+0x128>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0320 	and.w	r3, r3, #32
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <MX_GPIO_Init+0x128>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4a37      	ldr	r2, [pc, #220]	; (80011e0 <MX_GPIO_Init+0x128>)
 8001102:	f043 0304 	orr.w	r3, r3, #4
 8001106:	6193      	str	r3, [r2, #24]
 8001108:	4b35      	ldr	r3, [pc, #212]	; (80011e0 <MX_GPIO_Init+0x128>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001114:	4b32      	ldr	r3, [pc, #200]	; (80011e0 <MX_GPIO_Init+0x128>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a31      	ldr	r2, [pc, #196]	; (80011e0 <MX_GPIO_Init+0x128>)
 800111a:	f043 0308 	orr.w	r3, r3, #8
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <MX_GPIO_Init+0x128>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001132:	482c      	ldr	r0, [pc, #176]	; (80011e4 <MX_GPIO_Init+0x12c>)
 8001134:	f000 fc2c 	bl	8001990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OE_Pin|DIR_Pin|INCR_Pin|RST_Pin, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	2178      	movs	r1, #120	; 0x78
 800113c:	482a      	ldr	r0, [pc, #168]	; (80011e8 <MX_GPIO_Init+0x130>)
 800113e:	f000 fc27 	bl	8001990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WE_GPIO_Port, WE_Pin, GPIO_PIN_SET);
 8001142:	2201      	movs	r2, #1
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	4828      	ldr	r0, [pc, #160]	; (80011e8 <MX_GPIO_Init+0x130>)
 8001148:	f000 fc22 	bl	8001990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STATUS_LED_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 800114c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001150:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001152:	2301      	movs	r3, #1
 8001154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2302      	movs	r3, #2
 800115c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 0310 	add.w	r3, r7, #16
 8001162:	4619      	mov	r1, r3
 8001164:	481f      	ldr	r0, [pc, #124]	; (80011e4 <MX_GPIO_Init+0x12c>)
 8001166:	f000 fab9 	bl	80016dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800116a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800116e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001174:	2302      	movs	r3, #2
 8001176:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	4619      	mov	r1, r3
 800117e:	481b      	ldr	r0, [pc, #108]	; (80011ec <MX_GPIO_Init+0x134>)
 8001180:	f000 faac 	bl	80016dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001184:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001188:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800118e:	2302      	movs	r3, #2
 8001190:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	4619      	mov	r1, r3
 8001198:	4813      	ldr	r0, [pc, #76]	; (80011e8 <MX_GPIO_Init+0x130>)
 800119a:	f000 fa9f 	bl	80016dc <HAL_GPIO_Init>

  /*Configure GPIO pins : OE_Pin DIR_Pin INCR_Pin RST_Pin
                           WE_Pin */
  GPIO_InitStruct.Pin = OE_Pin|DIR_Pin|INCR_Pin|RST_Pin
 800119e:	23ff      	movs	r3, #255	; 0xff
 80011a0:	613b      	str	r3, [r7, #16]
                          |WE_Pin|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	4619      	mov	r1, r3
 80011b4:	480c      	ldr	r0, [pc, #48]	; (80011e8 <MX_GPIO_Init+0x130>)
 80011b6:	f000 fa91 	bl	80016dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80011ba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011c4:	2302      	movs	r3, #2
 80011c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c8:	2303      	movs	r3, #3
 80011ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	4619      	mov	r1, r3
 80011d2:	4804      	ldr	r0, [pc, #16]	; (80011e4 <MX_GPIO_Init+0x12c>)
 80011d4:	f000 fa82 	bl	80016dc <HAL_GPIO_Init>

}
 80011d8:	bf00      	nop
 80011da:	3720      	adds	r7, #32
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40011000 	.word	0x40011000
 80011e8:	40010c00 	.word	0x40010c00
 80011ec:	40010800 	.word	0x40010800

080011f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_MspInit+0x5c>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	4a14      	ldr	r2, [pc, #80]	; (8001258 <HAL_MspInit+0x5c>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6193      	str	r3, [r2, #24]
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_MspInit+0x5c>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <HAL_MspInit+0x5c>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	4a0e      	ldr	r2, [pc, #56]	; (8001258 <HAL_MspInit+0x5c>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	61d3      	str	r3, [r2, #28]
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_MspInit+0x5c>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_MspInit+0x60>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_MspInit+0x60>)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	40021000 	.word	0x40021000
 800125c:	40010000 	.word	0x40010000

08001260 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a09      	ldr	r2, [pc, #36]	; (8001294 <HAL_TIM_Base_MspInit+0x34>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d10b      	bne.n	800128a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_TIM_Base_MspInit+0x38>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	4a08      	ldr	r2, [pc, #32]	; (8001298 <HAL_TIM_Base_MspInit+0x38>)
 8001278:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800127c:	6193      	str	r3, [r2, #24]
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_TIM_Base_MspInit+0x38>)
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800128a:	bf00      	nop
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	40012c00 	.word	0x40012c00
 8001298:	40021000 	.word	0x40021000

0800129c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <HardFault_Handler+0x4>

080012ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <MemManage_Handler+0x4>

080012b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <BusFault_Handler+0x4>

080012ba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <UsageFault_Handler+0x4>

080012c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e8:	f000 f8ac 	bl	8001444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80012f6:	f000 fc6a 	bl	8001bce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200013bc 	.word	0x200013bc

08001304 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001308:	4b15      	ldr	r3, [pc, #84]	; (8001360 <SystemInit+0x5c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a14      	ldr	r2, [pc, #80]	; (8001360 <SystemInit+0x5c>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <SystemInit+0x5c>)
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	4911      	ldr	r1, [pc, #68]	; (8001360 <SystemInit+0x5c>)
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <SystemInit+0x60>)
 800131c:	4013      	ands	r3, r2
 800131e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <SystemInit+0x5c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <SystemInit+0x5c>)
 8001326:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800132a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800132e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <SystemInit+0x5c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <SystemInit+0x5c>)
 8001336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <SystemInit+0x5c>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	4a07      	ldr	r2, [pc, #28]	; (8001360 <SystemInit+0x5c>)
 8001342:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001346:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <SystemInit+0x5c>)
 800134a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800134e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <SystemInit+0x64>)
 8001352:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001356:	609a      	str	r2, [r3, #8]
#endif 
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	40021000 	.word	0x40021000
 8001364:	f8ff0000 	.word	0xf8ff0000
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800136c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800136e:	e003      	b.n	8001378 <LoopCopyDataInit>

08001370 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001372:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001374:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001376:	3104      	adds	r1, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001378:	480a      	ldr	r0, [pc, #40]	; (80013a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800137c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800137e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001380:	d3f6      	bcc.n	8001370 <CopyDataInit>
  ldr r2, =_sbss
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001384:	e002      	b.n	800138c <LoopFillZerobss>

08001386 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001388:	f842 3b04 	str.w	r3, [r2], #4

0800138c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800138e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001390:	d3f9      	bcc.n	8001386 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001392:	f7ff ffb7 	bl	8001304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001396:	f005 fb37 	bl	8006a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800139a:	f7ff f9d5 	bl	8000748 <main>
  bx lr
 800139e:	4770      	bx	lr
  ldr r3, =_sidata
 80013a0:	08006aec 	.word	0x08006aec
  ldr r0, =_sdata
 80013a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013a8:	20000184 	.word	0x20000184
  ldr r2, =_sbss
 80013ac:	20000184 	.word	0x20000184
  ldr r3, = _ebss
 80013b0:	20001628 	.word	0x20001628

080013b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC1_2_IRQHandler>
	...

080013b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_Init+0x28>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <HAL_Init+0x28>)
 80013c2:	f043 0310 	orr.w	r3, r3, #16
 80013c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c8:	2003      	movs	r0, #3
 80013ca:	f000 f945 	bl	8001658 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ce:	2000      	movs	r0, #0
 80013d0:	f000 f808 	bl	80013e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d4:	f7ff ff12 	bl	80011fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40022000 	.word	0x40022000

080013e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_InitTick+0x54>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_InitTick+0x58>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4619      	mov	r1, r3
 80013f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f95d 	bl	80016c2 <HAL_SYSTICK_Config>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e00e      	b.n	8001430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b0f      	cmp	r3, #15
 8001416:	d80a      	bhi.n	800142e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001418:	2200      	movs	r2, #0
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f000 f925 	bl	800166e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001424:	4a06      	ldr	r2, [pc, #24]	; (8001440 <HAL_InitTick+0x5c>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	e000      	b.n	8001430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000000 	.word	0x20000000
 800143c:	20000008 	.word	0x20000008
 8001440:	20000004 	.word	0x20000004

08001444 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_IncTick+0x1c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_IncTick+0x20>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4413      	add	r3, r2
 8001454:	4a03      	ldr	r2, [pc, #12]	; (8001464 <HAL_IncTick+0x20>)
 8001456:	6013      	str	r3, [r2, #0]
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	20000008 	.word	0x20000008
 8001464:	20000720 	.word	0x20000720

08001468 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b02      	ldr	r3, [pc, #8]	; (8001478 <HAL_GetTick+0x10>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	20000720 	.word	0x20000720

0800147c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001484:	f7ff fff0 	bl	8001468 <HAL_GetTick>
 8001488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001494:	d005      	beq.n	80014a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <HAL_Delay+0x40>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4413      	add	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a2:	bf00      	nop
 80014a4:	f7ff ffe0 	bl	8001468 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d8f7      	bhi.n	80014a4 <HAL_Delay+0x28>
  {
  }
}
 80014b4:	bf00      	nop
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000008 	.word	0x20000008

080014c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014dc:	4013      	ands	r3, r2
 80014de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f2:	4a04      	ldr	r2, [pc, #16]	; (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	60d3      	str	r3, [r2, #12]
}
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <__NVIC_GetPriorityGrouping+0x18>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	0a1b      	lsrs	r3, r3, #8
 8001512:	f003 0307 	and.w	r3, r3, #7
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	2b00      	cmp	r3, #0
 8001534:	db0b      	blt.n	800154e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	f003 021f 	and.w	r2, r3, #31
 800153c:	4906      	ldr	r1, [pc, #24]	; (8001558 <__NVIC_EnableIRQ+0x34>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	095b      	lsrs	r3, r3, #5
 8001544:	2001      	movs	r0, #1
 8001546:	fa00 f202 	lsl.w	r2, r0, r2
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	e000e100 	.word	0xe000e100

0800155c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	6039      	str	r1, [r7, #0]
 8001566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	db0a      	blt.n	8001586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	b2da      	uxtb	r2, r3
 8001574:	490c      	ldr	r1, [pc, #48]	; (80015a8 <__NVIC_SetPriority+0x4c>)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	0112      	lsls	r2, r2, #4
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	440b      	add	r3, r1
 8001580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001584:	e00a      	b.n	800159c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4908      	ldr	r1, [pc, #32]	; (80015ac <__NVIC_SetPriority+0x50>)
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	3b04      	subs	r3, #4
 8001594:	0112      	lsls	r2, r2, #4
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	440b      	add	r3, r1
 800159a:	761a      	strb	r2, [r3, #24]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000e100 	.word	0xe000e100
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b089      	sub	sp, #36	; 0x24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f1c3 0307 	rsb	r3, r3, #7
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	bf28      	it	cs
 80015ce:	2304      	movcs	r3, #4
 80015d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3304      	adds	r3, #4
 80015d6:	2b06      	cmp	r3, #6
 80015d8:	d902      	bls.n	80015e0 <NVIC_EncodePriority+0x30>
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3b03      	subs	r3, #3
 80015de:	e000      	b.n	80015e2 <NVIC_EncodePriority+0x32>
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	f04f 32ff 	mov.w	r2, #4294967295
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43da      	mvns	r2, r3
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	401a      	ands	r2, r3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001602:	43d9      	mvns	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	4313      	orrs	r3, r2
         );
}
 800160a:	4618      	mov	r0, r3
 800160c:	3724      	adds	r7, #36	; 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001624:	d301      	bcc.n	800162a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001626:	2301      	movs	r3, #1
 8001628:	e00f      	b.n	800164a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <SysTick_Config+0x40>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001632:	210f      	movs	r1, #15
 8001634:	f04f 30ff 	mov.w	r0, #4294967295
 8001638:	f7ff ff90 	bl	800155c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <SysTick_Config+0x40>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <SysTick_Config+0x40>)
 8001644:	2207      	movs	r2, #7
 8001646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	e000e010 	.word	0xe000e010

08001658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ff2d 	bl	80014c0 <__NVIC_SetPriorityGrouping>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001680:	f7ff ff42 	bl	8001508 <__NVIC_GetPriorityGrouping>
 8001684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	6978      	ldr	r0, [r7, #20]
 800168c:	f7ff ff90 	bl	80015b0 <NVIC_EncodePriority>
 8001690:	4602      	mov	r2, r0
 8001692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff5f 	bl	800155c <__NVIC_SetPriority>
}
 800169e:	bf00      	nop
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff35 	bl	8001524 <__NVIC_EnableIRQ>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ffa2 	bl	8001614 <SysTick_Config>
 80016d0:	4603      	mov	r3, r0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016dc:	b480      	push	{r7}
 80016de:	b08b      	sub	sp, #44	; 0x2c
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ee:	e127      	b.n	8001940 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016f0:	2201      	movs	r2, #1
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	429a      	cmp	r2, r3
 800170a:	f040 8116 	bne.w	800193a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b12      	cmp	r3, #18
 8001714:	d034      	beq.n	8001780 <HAL_GPIO_Init+0xa4>
 8001716:	2b12      	cmp	r3, #18
 8001718:	d80d      	bhi.n	8001736 <HAL_GPIO_Init+0x5a>
 800171a:	2b02      	cmp	r3, #2
 800171c:	d02b      	beq.n	8001776 <HAL_GPIO_Init+0x9a>
 800171e:	2b02      	cmp	r3, #2
 8001720:	d804      	bhi.n	800172c <HAL_GPIO_Init+0x50>
 8001722:	2b00      	cmp	r3, #0
 8001724:	d031      	beq.n	800178a <HAL_GPIO_Init+0xae>
 8001726:	2b01      	cmp	r3, #1
 8001728:	d01c      	beq.n	8001764 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800172a:	e048      	b.n	80017be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800172c:	2b03      	cmp	r3, #3
 800172e:	d043      	beq.n	80017b8 <HAL_GPIO_Init+0xdc>
 8001730:	2b11      	cmp	r3, #17
 8001732:	d01b      	beq.n	800176c <HAL_GPIO_Init+0x90>
          break;
 8001734:	e043      	b.n	80017be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001736:	4a89      	ldr	r2, [pc, #548]	; (800195c <HAL_GPIO_Init+0x280>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d026      	beq.n	800178a <HAL_GPIO_Init+0xae>
 800173c:	4a87      	ldr	r2, [pc, #540]	; (800195c <HAL_GPIO_Init+0x280>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d806      	bhi.n	8001750 <HAL_GPIO_Init+0x74>
 8001742:	4a87      	ldr	r2, [pc, #540]	; (8001960 <HAL_GPIO_Init+0x284>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d020      	beq.n	800178a <HAL_GPIO_Init+0xae>
 8001748:	4a86      	ldr	r2, [pc, #536]	; (8001964 <HAL_GPIO_Init+0x288>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d01d      	beq.n	800178a <HAL_GPIO_Init+0xae>
          break;
 800174e:	e036      	b.n	80017be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001750:	4a85      	ldr	r2, [pc, #532]	; (8001968 <HAL_GPIO_Init+0x28c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d019      	beq.n	800178a <HAL_GPIO_Init+0xae>
 8001756:	4a85      	ldr	r2, [pc, #532]	; (800196c <HAL_GPIO_Init+0x290>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d016      	beq.n	800178a <HAL_GPIO_Init+0xae>
 800175c:	4a84      	ldr	r2, [pc, #528]	; (8001970 <HAL_GPIO_Init+0x294>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d013      	beq.n	800178a <HAL_GPIO_Init+0xae>
          break;
 8001762:	e02c      	b.n	80017be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	623b      	str	r3, [r7, #32]
          break;
 800176a:	e028      	b.n	80017be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	3304      	adds	r3, #4
 8001772:	623b      	str	r3, [r7, #32]
          break;
 8001774:	e023      	b.n	80017be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	3308      	adds	r3, #8
 800177c:	623b      	str	r3, [r7, #32]
          break;
 800177e:	e01e      	b.n	80017be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	330c      	adds	r3, #12
 8001786:	623b      	str	r3, [r7, #32]
          break;
 8001788:	e019      	b.n	80017be <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d102      	bne.n	8001798 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001792:	2304      	movs	r3, #4
 8001794:	623b      	str	r3, [r7, #32]
          break;
 8001796:	e012      	b.n	80017be <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d105      	bne.n	80017ac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017a0:	2308      	movs	r3, #8
 80017a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	611a      	str	r2, [r3, #16]
          break;
 80017aa:	e008      	b.n	80017be <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017ac:	2308      	movs	r3, #8
 80017ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	615a      	str	r2, [r3, #20]
          break;
 80017b6:	e002      	b.n	80017be <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017b8:	2300      	movs	r3, #0
 80017ba:	623b      	str	r3, [r7, #32]
          break;
 80017bc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	2bff      	cmp	r3, #255	; 0xff
 80017c2:	d801      	bhi.n	80017c8 <HAL_GPIO_Init+0xec>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	e001      	b.n	80017cc <HAL_GPIO_Init+0xf0>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3304      	adds	r3, #4
 80017cc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2bff      	cmp	r3, #255	; 0xff
 80017d2:	d802      	bhi.n	80017da <HAL_GPIO_Init+0xfe>
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	e002      	b.n	80017e0 <HAL_GPIO_Init+0x104>
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	3b08      	subs	r3, #8
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	210f      	movs	r1, #15
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	401a      	ands	r2, r3
 80017f2:	6a39      	ldr	r1, [r7, #32]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	431a      	orrs	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 8096 	beq.w	800193a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800180e:	4b59      	ldr	r3, [pc, #356]	; (8001974 <HAL_GPIO_Init+0x298>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	4a58      	ldr	r2, [pc, #352]	; (8001974 <HAL_GPIO_Init+0x298>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6193      	str	r3, [r2, #24]
 800181a:	4b56      	ldr	r3, [pc, #344]	; (8001974 <HAL_GPIO_Init+0x298>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001826:	4a54      	ldr	r2, [pc, #336]	; (8001978 <HAL_GPIO_Init+0x29c>)
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	089b      	lsrs	r3, r3, #2
 800182c:	3302      	adds	r3, #2
 800182e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001832:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	220f      	movs	r2, #15
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4013      	ands	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a4b      	ldr	r2, [pc, #300]	; (800197c <HAL_GPIO_Init+0x2a0>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d013      	beq.n	800187a <HAL_GPIO_Init+0x19e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4a      	ldr	r2, [pc, #296]	; (8001980 <HAL_GPIO_Init+0x2a4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d00d      	beq.n	8001876 <HAL_GPIO_Init+0x19a>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a49      	ldr	r2, [pc, #292]	; (8001984 <HAL_GPIO_Init+0x2a8>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d007      	beq.n	8001872 <HAL_GPIO_Init+0x196>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a48      	ldr	r2, [pc, #288]	; (8001988 <HAL_GPIO_Init+0x2ac>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d101      	bne.n	800186e <HAL_GPIO_Init+0x192>
 800186a:	2303      	movs	r3, #3
 800186c:	e006      	b.n	800187c <HAL_GPIO_Init+0x1a0>
 800186e:	2304      	movs	r3, #4
 8001870:	e004      	b.n	800187c <HAL_GPIO_Init+0x1a0>
 8001872:	2302      	movs	r3, #2
 8001874:	e002      	b.n	800187c <HAL_GPIO_Init+0x1a0>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <HAL_GPIO_Init+0x1a0>
 800187a:	2300      	movs	r3, #0
 800187c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187e:	f002 0203 	and.w	r2, r2, #3
 8001882:	0092      	lsls	r2, r2, #2
 8001884:	4093      	lsls	r3, r2
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800188c:	493a      	ldr	r1, [pc, #232]	; (8001978 <HAL_GPIO_Init+0x29c>)
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	3302      	adds	r3, #2
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018a6:	4b39      	ldr	r3, [pc, #228]	; (800198c <HAL_GPIO_Init+0x2b0>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4938      	ldr	r1, [pc, #224]	; (800198c <HAL_GPIO_Init+0x2b0>)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]
 80018b2:	e006      	b.n	80018c2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018b4:	4b35      	ldr	r3, [pc, #212]	; (800198c <HAL_GPIO_Init+0x2b0>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	4933      	ldr	r1, [pc, #204]	; (800198c <HAL_GPIO_Init+0x2b0>)
 80018be:	4013      	ands	r3, r2
 80018c0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d006      	beq.n	80018dc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018ce:	4b2f      	ldr	r3, [pc, #188]	; (800198c <HAL_GPIO_Init+0x2b0>)
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	492e      	ldr	r1, [pc, #184]	; (800198c <HAL_GPIO_Init+0x2b0>)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	604b      	str	r3, [r1, #4]
 80018da:	e006      	b.n	80018ea <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018dc:	4b2b      	ldr	r3, [pc, #172]	; (800198c <HAL_GPIO_Init+0x2b0>)
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	4929      	ldr	r1, [pc, #164]	; (800198c <HAL_GPIO_Init+0x2b0>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d006      	beq.n	8001904 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018f6:	4b25      	ldr	r3, [pc, #148]	; (800198c <HAL_GPIO_Init+0x2b0>)
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	4924      	ldr	r1, [pc, #144]	; (800198c <HAL_GPIO_Init+0x2b0>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	608b      	str	r3, [r1, #8]
 8001902:	e006      	b.n	8001912 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001904:	4b21      	ldr	r3, [pc, #132]	; (800198c <HAL_GPIO_Init+0x2b0>)
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	43db      	mvns	r3, r3
 800190c:	491f      	ldr	r1, [pc, #124]	; (800198c <HAL_GPIO_Init+0x2b0>)
 800190e:	4013      	ands	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d006      	beq.n	800192c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800191e:	4b1b      	ldr	r3, [pc, #108]	; (800198c <HAL_GPIO_Init+0x2b0>)
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	491a      	ldr	r1, [pc, #104]	; (800198c <HAL_GPIO_Init+0x2b0>)
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	60cb      	str	r3, [r1, #12]
 800192a:	e006      	b.n	800193a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <HAL_GPIO_Init+0x2b0>)
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	43db      	mvns	r3, r3
 8001934:	4915      	ldr	r1, [pc, #84]	; (800198c <HAL_GPIO_Init+0x2b0>)
 8001936:	4013      	ands	r3, r2
 8001938:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	3301      	adds	r3, #1
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	fa22 f303 	lsr.w	r3, r2, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	f47f aed0 	bne.w	80016f0 <HAL_GPIO_Init+0x14>
  }
}
 8001950:	bf00      	nop
 8001952:	372c      	adds	r7, #44	; 0x2c
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	10210000 	.word	0x10210000
 8001960:	10110000 	.word	0x10110000
 8001964:	10120000 	.word	0x10120000
 8001968:	10310000 	.word	0x10310000
 800196c:	10320000 	.word	0x10320000
 8001970:	10220000 	.word	0x10220000
 8001974:	40021000 	.word	0x40021000
 8001978:	40010000 	.word	0x40010000
 800197c:	40010800 	.word	0x40010800
 8001980:	40010c00 	.word	0x40010c00
 8001984:	40011000 	.word	0x40011000
 8001988:	40011400 	.word	0x40011400
 800198c:	40010400 	.word	0x40010400

08001990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	807b      	strh	r3, [r7, #2]
 800199c:	4613      	mov	r3, r2
 800199e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a0:	787b      	ldrb	r3, [r7, #1]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019a6:	887a      	ldrh	r2, [r7, #2]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019ac:	e003      	b.n	80019b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019ae:	887b      	ldrh	r3, [r7, #2]
 80019b0:	041a      	lsls	r2, r3, #16
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	611a      	str	r2, [r3, #16]
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c2:	b08b      	sub	sp, #44	; 0x2c
 80019c4:	af06      	add	r7, sp, #24
 80019c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e0d3      	b.n	8001b7a <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d106      	bne.n	80019ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f004 fd70 	bl	80064cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2203      	movs	r2, #3
 80019f0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f001 fdcc 	bl	8003596 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	687e      	ldr	r6, [r7, #4]
 8001a06:	466d      	mov	r5, sp
 8001a08:	f106 0410 	add.w	r4, r6, #16
 8001a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a10:	6823      	ldr	r3, [r4, #0]
 8001a12:	602b      	str	r3, [r5, #0]
 8001a14:	1d33      	adds	r3, r6, #4
 8001a16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a18:	6838      	ldr	r0, [r7, #0]
 8001a1a:	f001 fd95 	bl	8003548 <USB_CoreInit>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2202      	movs	r2, #2
 8001a28:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0a4      	b.n	8001b7a <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f001 fdc9 	bl	80035ce <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	73fb      	strb	r3, [r7, #15]
 8001a40:	e035      	b.n	8001aae <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	015b      	lsls	r3, r3, #5
 8001a48:	4413      	add	r3, r2
 8001a4a:	3329      	adds	r3, #41	; 0x29
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	015b      	lsls	r3, r3, #5
 8001a56:	4413      	add	r3, r2
 8001a58:	3328      	adds	r3, #40	; 0x28
 8001a5a:	7bfa      	ldrb	r2, [r7, #15]
 8001a5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	7bfa      	ldrb	r2, [r7, #15]
 8001a62:	b291      	uxth	r1, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	015b      	lsls	r3, r3, #5
 8001a68:	4413      	add	r3, r2
 8001a6a:	3336      	adds	r3, #54	; 0x36
 8001a6c:	460a      	mov	r2, r1
 8001a6e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	015b      	lsls	r3, r3, #5
 8001a76:	4413      	add	r3, r2
 8001a78:	332b      	adds	r3, #43	; 0x2b
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	015b      	lsls	r3, r3, #5
 8001a84:	4413      	add	r3, r2
 8001a86:	3338      	adds	r3, #56	; 0x38
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	015b      	lsls	r3, r3, #5
 8001a92:	4413      	add	r3, r2
 8001a94:	333c      	adds	r3, #60	; 0x3c
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	015b      	lsls	r3, r3, #5
 8001aa2:	4413      	add	r3, r2
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	73fb      	strb	r3, [r7, #15]
 8001aae:	7bfa      	ldrb	r2, [r7, #15]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d3c4      	bcc.n	8001a42 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	73fb      	strb	r3, [r7, #15]
 8001abc:	e031      	b.n	8001b22 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	015b      	lsls	r3, r3, #5
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	015b      	lsls	r3, r3, #5
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ada:	7bfa      	ldrb	r2, [r7, #15]
 8001adc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	015b      	lsls	r3, r3, #5
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	015b      	lsls	r3, r3, #5
 8001af4:	4413      	add	r3, r2
 8001af6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	015b      	lsls	r3, r3, #5
 8001b04:	4413      	add	r3, r2
 8001b06:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	330a      	adds	r3, #10
 8001b14:	015b      	lsls	r3, r3, #5
 8001b16:	4413      	add	r3, r2
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	73fb      	strb	r3, [r7, #15]
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d3c8      	bcc.n	8001abe <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	687e      	ldr	r6, [r7, #4]
 8001b34:	466d      	mov	r5, sp
 8001b36:	f106 0410 	add.w	r4, r6, #16
 8001b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b3e:	6823      	ldr	r3, [r4, #0]
 8001b40:	602b      	str	r3, [r5, #0]
 8001b42:	1d33      	adds	r3, r6, #4
 8001b44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b46:	6838      	ldr	r0, [r7, #0]
 8001b48:	f001 fd4d 	bl	80035e6 <USB_DevInit>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d005      	beq.n	8001b5e <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2202      	movs	r2, #2
 8001b56:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e00d      	b.n	8001b7a <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f002 fd8b 	bl	800468e <USB_DevDisconnect>

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b82 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_PCD_Start+0x16>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e016      	b.n	8001bc6 <HAL_PCD_Start+0x44>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f004 fef9 	bl	800699a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f002 fd64 	bl	800467a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f001 fcd6 	bl	8003568 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f002 fd61 	bl	80046a2 <USB_ReadInterrupts>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bea:	d102      	bne.n	8001bf2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 faf3 	bl	80021d8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f002 fd53 	bl	80046a2 <USB_ReadInterrupts>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c06:	d112      	bne.n	8001c2e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c1a:	b292      	uxth	r2, r2
 8001c1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f004 fcc8 	bl	80065b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c26:	2100      	movs	r1, #0
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f8de 	bl	8001dea <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f002 fd35 	bl	80046a2 <USB_ReadInterrupts>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c42:	d10b      	bne.n	8001c5c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c56:	b292      	uxth	r2, r2
 8001c58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f002 fd1e 	bl	80046a2 <USB_ReadInterrupts>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c70:	d10b      	bne.n	8001c8a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c84:	b292      	uxth	r2, r2
 8001c86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f002 fd07 	bl	80046a2 <USB_ReadInterrupts>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c9e:	d126      	bne.n	8001cee <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0204 	bic.w	r2, r2, #4
 8001cb2:	b292      	uxth	r2, r2
 8001cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0208 	bic.w	r2, r2, #8
 8001cca:	b292      	uxth	r2, r2
 8001ccc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f004 fca9 	bl	8006628 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ce8:	b292      	uxth	r2, r2
 8001cea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f002 fcd5 	bl	80046a2 <USB_ReadInterrupts>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d02:	d13d      	bne.n	8001d80 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0208 	orr.w	r2, r2, #8
 8001d16:	b292      	uxth	r2, r2
 8001d18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d2e:	b292      	uxth	r2, r2
 8001d30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0204 	orr.w	r2, r2, #4
 8001d46:	b292      	uxth	r2, r2
 8001d48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f002 fca6 	bl	80046a2 <USB_ReadInterrupts>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d60:	d10b      	bne.n	8001d7a <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d74:	b292      	uxth	r2, r2
 8001d76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f004 fc3a 	bl	80065f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f002 fc8c 	bl	80046a2 <USB_ReadInterrupts>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d94:	d10e      	bne.n	8001db4 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001da8:	b292      	uxth	r2, r2
 8001daa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f004 fbf3 	bl	800659a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f002 fc72 	bl	80046a2 <USB_ReadInterrupts>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dc8:	d10b      	bne.n	8001de2 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ddc:	b292      	uxth	r2, r2
 8001dde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	460b      	mov	r3, r1
 8001df4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_PCD_SetAddress+0x1a>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e013      	b.n	8001e2c <HAL_PCD_SetAddress+0x42>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	78fa      	ldrb	r2, [r7, #3]
 8001e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	78fa      	ldrb	r2, [r7, #3]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f002 fc19 	bl	8004654 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	4608      	mov	r0, r1
 8001e3e:	4611      	mov	r1, r2
 8001e40:	461a      	mov	r2, r3
 8001e42:	4603      	mov	r3, r0
 8001e44:	70fb      	strb	r3, [r7, #3]
 8001e46:	460b      	mov	r3, r1
 8001e48:	803b      	strh	r3, [r7, #0]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	da0b      	bge.n	8001e72 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	015b      	lsls	r3, r3, #5
 8001e62:	3328      	adds	r3, #40	; 0x28
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	4413      	add	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	705a      	strb	r2, [r3, #1]
 8001e70:	e00b      	b.n	8001e8a <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	015b      	lsls	r3, r3, #5
 8001e7a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e96:	883a      	ldrh	r2, [r7, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	78ba      	ldrb	r2, [r7, #2]
 8001ea0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	785b      	ldrb	r3, [r3, #1]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d004      	beq.n	8001eb4 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001eb4:	78bb      	ldrb	r3, [r7, #2]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d102      	bne.n	8001ec0 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_PCD_EP_Open+0x9a>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e00e      	b.n	8001eec <HAL_PCD_EP_Open+0xb8>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68f9      	ldr	r1, [r7, #12]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f001 fba7 	bl	8003630 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001eea:	7afb      	ldrb	r3, [r7, #11]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	da0b      	bge.n	8001f20 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	015b      	lsls	r3, r3, #5
 8001f10:	3328      	adds	r3, #40	; 0x28
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	705a      	strb	r2, [r3, #1]
 8001f1e:	e00b      	b.n	8001f38 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	015b      	lsls	r3, r3, #5
 8001f28:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_PCD_EP_Close+0x5e>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e00e      	b.n	8001f70 <HAL_PCD_EP_Close+0x7c>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68f9      	ldr	r1, [r7, #12]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f001 fe53 	bl	8003c0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	460b      	mov	r3, r1
 8001f86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f88:	7afb      	ldrb	r3, [r7, #11]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	015b      	lsls	r3, r3, #5
 8001f90:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4413      	add	r3, r2
 8001f98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fbe:	7afb      	ldrb	r3, [r7, #11]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d106      	bne.n	8001fd6 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6979      	ldr	r1, [r7, #20]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f001 ffb2 	bl	8003f38 <USB_EPStartXfer>
 8001fd4:	e005      	b.n	8001fe2 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6979      	ldr	r1, [r7, #20]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f001 ffab 	bl	8003f38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	330a      	adds	r3, #10
 8002002:	015b      	lsls	r3, r3, #5
 8002004:	4413      	add	r3, r2
 8002006:	3304      	adds	r3, #4
 8002008:	681b      	ldr	r3, [r3, #0]
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	460b      	mov	r3, r1
 8002022:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002024:	7afb      	ldrb	r3, [r7, #11]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	015b      	lsls	r3, r3, #5
 800202c:	3328      	adds	r3, #40	; 0x28
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4413      	add	r3, r2
 8002032:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2200      	movs	r2, #0
 8002044:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2201      	movs	r2, #1
 800204a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800204c:	7afb      	ldrb	r3, [r7, #11]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	b2da      	uxtb	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002058:	7afb      	ldrb	r3, [r7, #11]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	2b00      	cmp	r3, #0
 8002060:	d106      	bne.n	8002070 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6979      	ldr	r1, [r7, #20]
 8002068:	4618      	mov	r0, r3
 800206a:	f001 ff65 	bl	8003f38 <USB_EPStartXfer>
 800206e:	e005      	b.n	800207c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6979      	ldr	r1, [r7, #20]
 8002076:	4618      	mov	r0, r3
 8002078:	f001 ff5e 	bl	8003f38 <USB_EPStartXfer>
  }

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	460b      	mov	r3, r1
 8002090:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	f003 0207 	and.w	r2, r3, #7
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	429a      	cmp	r2, r3
 800209e:	d901      	bls.n	80020a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e046      	b.n	8002132 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	da0b      	bge.n	80020c4 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	015b      	lsls	r3, r3, #5
 80020b4:	3328      	adds	r3, #40	; 0x28
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	705a      	strb	r2, [r3, #1]
 80020c2:	e009      	b.n	80020d8 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	015b      	lsls	r3, r3, #5
 80020c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	4413      	add	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2201      	movs	r2, #1
 80020dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020de:	78fb      	ldrb	r3, [r7, #3]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_PCD_EP_SetStall+0x72>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e01c      	b.n	8002132 <HAL_PCD_EP_SetStall+0xac>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68f9      	ldr	r1, [r7, #12]
 8002106:	4618      	mov	r0, r3
 8002108:	f002 f9ce 	bl	80044a8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	2b00      	cmp	r3, #0
 8002114:	d108      	bne.n	8002128 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002120:	4619      	mov	r1, r3
 8002122:	4610      	mov	r0, r2
 8002124:	f002 facc 	bl	80046c0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	460b      	mov	r3, r1
 8002144:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	f003 020f 	and.w	r2, r3, #15
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	429a      	cmp	r2, r3
 8002152:	d901      	bls.n	8002158 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e03a      	b.n	80021ce <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800215c:	2b00      	cmp	r3, #0
 800215e:	da0b      	bge.n	8002178 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	015b      	lsls	r3, r3, #5
 8002168:	3328      	adds	r3, #40	; 0x28
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2201      	movs	r2, #1
 8002174:	705a      	strb	r2, [r3, #1]
 8002176:	e00b      	b.n	8002190 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	015b      	lsls	r3, r3, #5
 8002180:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	4413      	add	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	b2da      	uxtb	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_PCD_EP_ClrStall+0x76>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e00e      	b.n	80021ce <HAL_PCD_EP_ClrStall+0x94>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68f9      	ldr	r1, [r7, #12]
 80021be:	4618      	mov	r0, r3
 80021c0:	f002 f9b4 	bl	800452c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b089      	sub	sp, #36	; 0x24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021e0:	e282      	b.n	80026e8 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021ea:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80021ec:	8afb      	ldrh	r3, [r7, #22]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80021f6:	7d7b      	ldrb	r3, [r7, #21]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f040 8142 	bne.w	8002482 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80021fe:	8afb      	ldrh	r3, [r7, #22]
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	2b00      	cmp	r3, #0
 8002206:	d151      	bne.n	80022ac <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002218:	b29c      	uxth	r4, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002226:	b29b      	uxth	r3, r3
 8002228:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3328      	adds	r3, #40	; 0x28
 800222e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002238:	b29b      	uxth	r3, r3
 800223a:	461a      	mov	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	3302      	adds	r3, #2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	4413      	add	r3, r2
 800224e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	441a      	add	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800226a:	2100      	movs	r1, #0
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f004 f97d 	bl	800656c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 8234 	beq.w	80026e8 <PCD_EP_ISR_Handler+0x510>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b00      	cmp	r3, #0
 8002286:	f040 822f 	bne.w	80026e8 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002290:	b2db      	uxtb	r3, r3
 8002292:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002296:	b2da      	uxtb	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	b292      	uxth	r2, r2
 800229e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022aa:	e21d      	b.n	80026e8 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022b2:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80022bc:	8a7b      	ldrh	r3, [r7, #18]
 80022be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d033      	beq.n	800232e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	3306      	adds	r3, #6
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002304:	b29b      	uxth	r3, r3
 8002306:	f002 fa2a 	bl	800475e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	b29a      	uxth	r2, r3
 8002312:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002316:	4013      	ands	r3, r2
 8002318:	b29c      	uxth	r4, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002322:	b292      	uxth	r2, r2
 8002324:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f004 f8f6 	bl	8006518 <HAL_PCD_SetupStageCallback>
 800232c:	e1dc      	b.n	80026e8 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800232e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f280 81d8 	bge.w	80026e8 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	b29a      	uxth	r2, r3
 8002340:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002344:	4013      	ands	r3, r2
 8002346:	b29c      	uxth	r4, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002350:	b292      	uxth	r2, r2
 8002352:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800235c:	b29b      	uxth	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	3306      	adds	r3, #6
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d019      	beq.n	80023bc <PCD_EP_ISR_Handler+0x1e4>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d015      	beq.n	80023bc <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6959      	ldr	r1, [r3, #20]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	f002 f9dc 	bl	800475e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	441a      	add	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80023b4:	2100      	movs	r1, #0
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f004 f8c0 	bl	800653c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461c      	mov	r4, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	441c      	add	r4, r3
 80023ce:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80023d2:	461c      	mov	r4, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10e      	bne.n	80023fa <PCD_EP_ISR_Handler+0x222>
 80023dc:	8823      	ldrh	r3, [r4, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	8023      	strh	r3, [r4, #0]
 80023e8:	8823      	ldrh	r3, [r4, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	8023      	strh	r3, [r4, #0]
 80023f8:	e02d      	b.n	8002456 <PCD_EP_ISR_Handler+0x27e>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b3e      	cmp	r3, #62	; 0x3e
 8002400:	d812      	bhi.n	8002428 <PCD_EP_ISR_Handler+0x250>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	085b      	lsrs	r3, r3, #1
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <PCD_EP_ISR_Handler+0x244>
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	3301      	adds	r3, #1
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	b29b      	uxth	r3, r3
 8002420:	029b      	lsls	r3, r3, #10
 8002422:	b29b      	uxth	r3, r3
 8002424:	8023      	strh	r3, [r4, #0]
 8002426:	e016      	b.n	8002456 <PCD_EP_ISR_Handler+0x27e>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	2b00      	cmp	r3, #0
 800243a:	d102      	bne.n	8002442 <PCD_EP_ISR_Handler+0x26a>
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	3b01      	subs	r3, #1
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	b29b      	uxth	r3, r3
 8002446:	029b      	lsls	r3, r3, #10
 8002448:	b29b      	uxth	r3, r3
 800244a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800244e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002452:	b29b      	uxth	r3, r3
 8002454:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	b29b      	uxth	r3, r3
 800245e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002466:	b29c      	uxth	r4, r3
 8002468:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800246c:	b29c      	uxth	r4, r3
 800246e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002472:	b29c      	uxth	r4, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4ba2      	ldr	r3, [pc, #648]	; (8002704 <PCD_EP_ISR_Handler+0x52c>)
 800247a:	4323      	orrs	r3, r4
 800247c:	b29b      	uxth	r3, r3
 800247e:	8013      	strh	r3, [r2, #0]
 8002480:	e132      	b.n	80026e8 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	7d7b      	ldrb	r3, [r7, #21]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002492:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002496:	2b00      	cmp	r3, #0
 8002498:	f280 80d1 	bge.w	800263e <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	7d7b      	ldrb	r3, [r7, #21]
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024b0:	4013      	ands	r3, r2
 80024b2:	b29c      	uxth	r4, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	7d7b      	ldrb	r3, [r7, #21]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80024c4:	b292      	uxth	r2, r2
 80024c6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80024c8:	7d7b      	ldrb	r3, [r7, #21]
 80024ca:	015b      	lsls	r3, r3, #5
 80024cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	4413      	add	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	7b1b      	ldrb	r3, [r3, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d121      	bne.n	8002522 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	3306      	adds	r3, #6
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002506:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002508:	8bfb      	ldrh	r3, [r7, #30]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d072      	beq.n	80025f4 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6959      	ldr	r1, [r3, #20]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	88da      	ldrh	r2, [r3, #6]
 800251a:	8bfb      	ldrh	r3, [r7, #30]
 800251c:	f002 f91f 	bl	800475e <USB_ReadPMA>
 8002520:	e068      	b.n	80025f4 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d021      	beq.n	8002580 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002544:	b29b      	uxth	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	3302      	adds	r3, #2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002564:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002566:	8bfb      	ldrh	r3, [r7, #30]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d02a      	beq.n	80025c2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6959      	ldr	r1, [r3, #20]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	891a      	ldrh	r2, [r3, #8]
 8002578:	8bfb      	ldrh	r3, [r7, #30]
 800257a:	f002 f8f0 	bl	800475e <USB_ReadPMA>
 800257e:	e020      	b.n	80025c2 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002588:	b29b      	uxth	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	3306      	adds	r3, #6
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	4413      	add	r3, r2
 800259e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025a8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80025aa:	8bfb      	ldrh	r3, [r7, #30]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6959      	ldr	r1, [r3, #20]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	895a      	ldrh	r2, [r3, #10]
 80025bc:	8bfb      	ldrh	r3, [r7, #30]
 80025be:	f002 f8ce 	bl	800475e <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025dc:	b29c      	uxth	r4, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	441a      	add	r2, r3
 80025ec:	4b46      	ldr	r3, [pc, #280]	; (8002708 <PCD_EP_ISR_Handler+0x530>)
 80025ee:	4323      	orrs	r3, r4
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	69da      	ldr	r2, [r3, #28]
 80025f8:	8bfb      	ldrh	r3, [r7, #30]
 80025fa:	441a      	add	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	8bfb      	ldrh	r3, [r7, #30]
 8002606:	441a      	add	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d004      	beq.n	800261e <PCD_EP_ISR_Handler+0x446>
 8002614:	8bfa      	ldrh	r2, [r7, #30]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	429a      	cmp	r2, r3
 800261c:	d206      	bcs.n	800262c <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	4619      	mov	r1, r3
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f003 ff89 	bl	800653c <HAL_PCD_DataOutStageCallback>
 800262a:	e008      	b.n	800263e <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	7819      	ldrb	r1, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff fc9d 	bl	8001f78 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800263e:	8a7b      	ldrh	r3, [r7, #18]
 8002640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002644:	2b00      	cmp	r3, #0
 8002646:	d04f      	beq.n	80026e8 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8002648:	7d7b      	ldrb	r3, [r7, #21]
 800264a:	015b      	lsls	r3, r3, #5
 800264c:	3328      	adds	r3, #40	; 0x28
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	7d7b      	ldrb	r3, [r7, #21]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266c:	b29c      	uxth	r4, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	7d7b      	ldrb	r3, [r7, #21]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	441a      	add	r2, r3
 800267a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800267e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002682:	b29b      	uxth	r3, r3
 8002684:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800268e:	b29b      	uxth	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	3302      	adds	r3, #2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	441a      	add	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d106      	bne.n	80026d6 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f003 ff4c 	bl	800656c <HAL_PCD_DataInStageCallback>
 80026d4:	e008      	b.n	80026e8 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	7819      	ldrb	r1, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	695a      	ldr	r2, [r3, #20]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff fc96 	bl	8002014 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	b21b      	sxth	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f6ff ad74 	blt.w	80021e2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3724      	adds	r7, #36	; 0x24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd90      	pop	{r4, r7, pc}
 8002704:	ffff8080 	.word	0xffff8080
 8002708:	ffff80c0 	.word	0xffff80c0

0800270c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	817b      	strh	r3, [r7, #10]
 800271a:	4613      	mov	r3, r2
 800271c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800271e:	897b      	ldrh	r3, [r7, #10]
 8002720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002724:	b29b      	uxth	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d008      	beq.n	800273c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800272a:	897b      	ldrh	r3, [r7, #10]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	015b      	lsls	r3, r3, #5
 8002732:	3328      	adds	r3, #40	; 0x28
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	e006      	b.n	800274a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800273c:	897b      	ldrh	r3, [r7, #10]
 800273e:	015b      	lsls	r3, r3, #5
 8002740:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800274a:	893b      	ldrh	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d107      	bne.n	8002760 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2200      	movs	r2, #0
 8002754:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	b29a      	uxth	r2, r3
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	80da      	strh	r2, [r3, #6]
 800275e:	e00b      	b.n	8002778 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2201      	movs	r2, #1
 8002764:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	b29a      	uxth	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	0c1b      	lsrs	r3, r3, #16
 8002772:	b29a      	uxth	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	371c      	adds	r7, #28
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e26c      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8087 	beq.w	80028b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a4:	4b92      	ldr	r3, [pc, #584]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d00c      	beq.n	80027ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027b0:	4b8f      	ldr	r3, [pc, #572]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d112      	bne.n	80027e2 <HAL_RCC_OscConfig+0x5e>
 80027bc:	4b8c      	ldr	r3, [pc, #560]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c8:	d10b      	bne.n	80027e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ca:	4b89      	ldr	r3, [pc, #548]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d06c      	beq.n	80028b0 <HAL_RCC_OscConfig+0x12c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d168      	bne.n	80028b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e246      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ea:	d106      	bne.n	80027fa <HAL_RCC_OscConfig+0x76>
 80027ec:	4b80      	ldr	r3, [pc, #512]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a7f      	ldr	r2, [pc, #508]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	e02e      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x98>
 8002802:	4b7b      	ldr	r3, [pc, #492]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a7a      	ldr	r2, [pc, #488]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4b78      	ldr	r3, [pc, #480]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a77      	ldr	r2, [pc, #476]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e01d      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0xbc>
 8002826:	4b72      	ldr	r3, [pc, #456]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a71      	ldr	r2, [pc, #452]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800282c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b6f      	ldr	r3, [pc, #444]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a6e      	ldr	r2, [pc, #440]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	e00b      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 8002840:	4b6b      	ldr	r3, [pc, #428]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a6a      	ldr	r2, [pc, #424]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b68      	ldr	r3, [pc, #416]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a67      	ldr	r2, [pc, #412]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002856:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7fe fe02 	bl	8001468 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002868:	f7fe fdfe 	bl	8001468 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	; 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e1fa      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b5d      	ldr	r3, [pc, #372]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0xe4>
 8002886:	e014      	b.n	80028b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fe fdee 	bl	8001468 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002890:	f7fe fdea 	bl	8001468 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	; 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e1e6      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	4b53      	ldr	r3, [pc, #332]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x10c>
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d063      	beq.n	8002986 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028be:	4b4c      	ldr	r3, [pc, #304]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028ca:	4b49      	ldr	r3, [pc, #292]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d11c      	bne.n	8002910 <HAL_RCC_OscConfig+0x18c>
 80028d6:	4b46      	ldr	r3, [pc, #280]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d116      	bne.n	8002910 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e2:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_RCC_OscConfig+0x176>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e1ba      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fa:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4939      	ldr	r1, [pc, #228]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	e03a      	b.n	8002986 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d020      	beq.n	800295a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002918:	4b36      	ldr	r3, [pc, #216]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7fe fda3 	bl	8001468 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002926:	f7fe fd9f 	bl	8001468 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e19b      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	4b2d      	ldr	r3, [pc, #180]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4927      	ldr	r1, [pc, #156]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002954:	4313      	orrs	r3, r2
 8002956:	600b      	str	r3, [r1, #0]
 8002958:	e015      	b.n	8002986 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295a:	4b26      	ldr	r3, [pc, #152]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7fe fd82 	bl	8001468 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002968:	f7fe fd7e 	bl	8001468 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e17a      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d03a      	beq.n	8002a08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d019      	beq.n	80029ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299a:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <HAL_RCC_OscConfig+0x274>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a0:	f7fe fd62 	bl	8001468 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a8:	f7fe fd5e 	bl	8001468 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e15a      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029c6:	2001      	movs	r0, #1
 80029c8:	f000 faa8 	bl	8002f1c <RCC_Delay>
 80029cc:	e01c      	b.n	8002a08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_RCC_OscConfig+0x274>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d4:	f7fe fd48 	bl	8001468 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029da:	e00f      	b.n	80029fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029dc:	f7fe fd44 	bl	8001468 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d908      	bls.n	80029fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e140      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	42420000 	.word	0x42420000
 80029f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029fc:	4b9e      	ldr	r3, [pc, #632]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1e9      	bne.n	80029dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80a6 	beq.w	8002b62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a16:	2300      	movs	r3, #0
 8002a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1a:	4b97      	ldr	r3, [pc, #604]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10d      	bne.n	8002a42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	4b94      	ldr	r3, [pc, #592]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	4a93      	ldr	r2, [pc, #588]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a30:	61d3      	str	r3, [r2, #28]
 8002a32:	4b91      	ldr	r3, [pc, #580]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a42:	4b8e      	ldr	r3, [pc, #568]	; (8002c7c <HAL_RCC_OscConfig+0x4f8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d118      	bne.n	8002a80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a4e:	4b8b      	ldr	r3, [pc, #556]	; (8002c7c <HAL_RCC_OscConfig+0x4f8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a8a      	ldr	r2, [pc, #552]	; (8002c7c <HAL_RCC_OscConfig+0x4f8>)
 8002a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a5a:	f7fe fd05 	bl	8001468 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a62:	f7fe fd01 	bl	8001468 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b64      	cmp	r3, #100	; 0x64
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e0fd      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a74:	4b81      	ldr	r3, [pc, #516]	; (8002c7c <HAL_RCC_OscConfig+0x4f8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d106      	bne.n	8002a96 <HAL_RCC_OscConfig+0x312>
 8002a88:	4b7b      	ldr	r3, [pc, #492]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4a7a      	ldr	r2, [pc, #488]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6213      	str	r3, [r2, #32]
 8002a94:	e02d      	b.n	8002af2 <HAL_RCC_OscConfig+0x36e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x334>
 8002a9e:	4b76      	ldr	r3, [pc, #472]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4a75      	ldr	r2, [pc, #468]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	6213      	str	r3, [r2, #32]
 8002aaa:	4b73      	ldr	r3, [pc, #460]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	4a72      	ldr	r2, [pc, #456]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ab0:	f023 0304 	bic.w	r3, r3, #4
 8002ab4:	6213      	str	r3, [r2, #32]
 8002ab6:	e01c      	b.n	8002af2 <HAL_RCC_OscConfig+0x36e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b05      	cmp	r3, #5
 8002abe:	d10c      	bne.n	8002ada <HAL_RCC_OscConfig+0x356>
 8002ac0:	4b6d      	ldr	r3, [pc, #436]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4a6c      	ldr	r2, [pc, #432]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	6213      	str	r3, [r2, #32]
 8002acc:	4b6a      	ldr	r3, [pc, #424]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4a69      	ldr	r2, [pc, #420]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6213      	str	r3, [r2, #32]
 8002ad8:	e00b      	b.n	8002af2 <HAL_RCC_OscConfig+0x36e>
 8002ada:	4b67      	ldr	r3, [pc, #412]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4a66      	ldr	r2, [pc, #408]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	6213      	str	r3, [r2, #32]
 8002ae6:	4b64      	ldr	r3, [pc, #400]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4a63      	ldr	r2, [pc, #396]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002aec:	f023 0304 	bic.w	r3, r3, #4
 8002af0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d015      	beq.n	8002b26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afa:	f7fe fcb5 	bl	8001468 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b00:	e00a      	b.n	8002b18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b02:	f7fe fcb1 	bl	8001468 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e0ab      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b18:	4b57      	ldr	r3, [pc, #348]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0ee      	beq.n	8002b02 <HAL_RCC_OscConfig+0x37e>
 8002b24:	e014      	b.n	8002b50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b26:	f7fe fc9f 	bl	8001468 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fe fc9b 	bl	8001468 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e095      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b44:	4b4c      	ldr	r3, [pc, #304]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1ee      	bne.n	8002b2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d105      	bne.n	8002b62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b56:	4b48      	ldr	r3, [pc, #288]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	4a47      	ldr	r2, [pc, #284]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 8081 	beq.w	8002c6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b6c:	4b42      	ldr	r3, [pc, #264]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d061      	beq.n	8002c3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d146      	bne.n	8002c0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b80:	4b3f      	ldr	r3, [pc, #252]	; (8002c80 <HAL_RCC_OscConfig+0x4fc>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b86:	f7fe fc6f 	bl	8001468 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8e:	f7fe fc6b 	bl	8001468 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e067      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba0:	4b35      	ldr	r3, [pc, #212]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f0      	bne.n	8002b8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb4:	d108      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bb6:	4b30      	ldr	r3, [pc, #192]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	492d      	ldr	r1, [pc, #180]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc8:	4b2b      	ldr	r3, [pc, #172]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a19      	ldr	r1, [r3, #32]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	4927      	ldr	r1, [pc, #156]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be0:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <HAL_RCC_OscConfig+0x4fc>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be6:	f7fe fc3f 	bl	8001468 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bee:	f7fe fc3b 	bl	8001468 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e037      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c00:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x46a>
 8002c0c:	e02f      	b.n	8002c6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0e:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <HAL_RCC_OscConfig+0x4fc>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe fc28 	bl	8001468 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fe fc24 	bl	8001468 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e020      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2e:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x498>
 8002c3a:	e018      	b.n	8002c6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e013      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d106      	bne.n	8002c6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d001      	beq.n	8002c6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40007000 	.word	0x40007000
 8002c80:	42420060 	.word	0x42420060

08002c84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0d0      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c98:	4b6a      	ldr	r3, [pc, #424]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d910      	bls.n	8002cc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca6:	4b67      	ldr	r3, [pc, #412]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 0207 	bic.w	r2, r3, #7
 8002cae:	4965      	ldr	r1, [pc, #404]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb6:	4b63      	ldr	r3, [pc, #396]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0b8      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d020      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ce0:	4b59      	ldr	r3, [pc, #356]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4a58      	ldr	r2, [pc, #352]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf8:	4b53      	ldr	r3, [pc, #332]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	4a52      	ldr	r2, [pc, #328]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d04:	4b50      	ldr	r3, [pc, #320]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	494d      	ldr	r1, [pc, #308]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d040      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d107      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	4b47      	ldr	r3, [pc, #284]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d115      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e07f      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d42:	4b41      	ldr	r3, [pc, #260]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e073      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d52:	4b3d      	ldr	r3, [pc, #244]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e06b      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d62:	4b39      	ldr	r3, [pc, #228]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f023 0203 	bic.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	4936      	ldr	r1, [pc, #216]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d74:	f7fe fb78 	bl	8001468 <HAL_GetTick>
 8002d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	e00a      	b.n	8002d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7c:	f7fe fb74 	bl	8001468 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e053      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d92:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 020c 	and.w	r2, r3, #12
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d1eb      	bne.n	8002d7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002da4:	4b27      	ldr	r3, [pc, #156]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d210      	bcs.n	8002dd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db2:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 0207 	bic.w	r2, r3, #7
 8002dba:	4922      	ldr	r1, [pc, #136]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc2:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e032      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de0:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4916      	ldr	r1, [pc, #88]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d009      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dfe:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	490e      	ldr	r1, [pc, #56]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e12:	f000 f821 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8002e16:	4601      	mov	r1, r0
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <HAL_RCC_ClockConfig+0x1c8>)
 8002e24:	5cd3      	ldrb	r3, [r2, r3]
 8002e26:	fa21 f303 	lsr.w	r3, r1, r3
 8002e2a:	4a09      	ldr	r2, [pc, #36]	; (8002e50 <HAL_RCC_ClockConfig+0x1cc>)
 8002e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <HAL_RCC_ClockConfig+0x1d0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe fad6 	bl	80013e4 <HAL_InitTick>

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40022000 	.word	0x40022000
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	08006ad4 	.word	0x08006ad4
 8002e50:	20000000 	.word	0x20000000
 8002e54:	20000004 	.word	0x20000004

08002e58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e58:	b490      	push	{r4, r7}
 8002e5a:	b08a      	sub	sp, #40	; 0x28
 8002e5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e5e:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e60:	1d3c      	adds	r4, r7, #4
 8002e62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e68:	4b28      	ldr	r3, [pc, #160]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	2300      	movs	r3, #0
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e82:	4b23      	ldr	r3, [pc, #140]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d002      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x40>
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d003      	beq.n	8002e9e <HAL_RCC_GetSysClockFreq+0x46>
 8002e96:	e02d      	b.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e98:	4b1e      	ldr	r3, [pc, #120]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e9a:	623b      	str	r3, [r7, #32]
      break;
 8002e9c:	e02d      	b.n	8002efa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	0c9b      	lsrs	r3, r3, #18
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002eaa:	4413      	add	r3, r2
 8002eac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002eb0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d013      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ebc:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	0c5b      	lsrs	r3, r3, #17
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002eca:	4413      	add	r3, r2
 8002ecc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ed0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	4a0f      	ldr	r2, [pc, #60]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ed6:	fb02 f203 	mul.w	r2, r2, r3
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee2:	e004      	b.n	8002eee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	4a0c      	ldr	r2, [pc, #48]	; (8002f18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ee8:	fb02 f303 	mul.w	r3, r2, r3
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	623b      	str	r3, [r7, #32]
      break;
 8002ef2:	e002      	b.n	8002efa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ef4:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ef6:	623b      	str	r3, [r7, #32]
      break;
 8002ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002efa:	6a3b      	ldr	r3, [r7, #32]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3728      	adds	r7, #40	; 0x28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc90      	pop	{r4, r7}
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	08006a78 	.word	0x08006a78
 8002f0c:	08006a88 	.word	0x08006a88
 8002f10:	40021000 	.word	0x40021000
 8002f14:	007a1200 	.word	0x007a1200
 8002f18:	003d0900 	.word	0x003d0900

08002f1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f24:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <RCC_Delay+0x34>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0a      	ldr	r2, [pc, #40]	; (8002f54 <RCC_Delay+0x38>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	0a5b      	lsrs	r3, r3, #9
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	fb02 f303 	mul.w	r3, r2, r3
 8002f36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f38:	bf00      	nop
  }
  while (Delay --);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1e5a      	subs	r2, r3, #1
 8002f3e:	60fa      	str	r2, [r7, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f9      	bne.n	8002f38 <RCC_Delay+0x1c>
}
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	20000000 	.word	0x20000000
 8002f54:	10624dd3 	.word	0x10624dd3

08002f58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	613b      	str	r3, [r7, #16]
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d07d      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002f74:	2300      	movs	r3, #0
 8002f76:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f78:	4b4f      	ldr	r3, [pc, #316]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10d      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f84:	4b4c      	ldr	r3, [pc, #304]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	4a4b      	ldr	r2, [pc, #300]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8e:	61d3      	str	r3, [r2, #28]
 8002f90:	4b49      	ldr	r3, [pc, #292]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa0:	4b46      	ldr	r3, [pc, #280]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d118      	bne.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fac:	4b43      	ldr	r3, [pc, #268]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a42      	ldr	r2, [pc, #264]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb8:	f7fe fa56 	bl	8001468 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc0:	f7fe fa52 	bl	8001468 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b64      	cmp	r3, #100	; 0x64
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e06d      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd2:	4b3a      	ldr	r3, [pc, #232]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0f0      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fde:	4b36      	ldr	r3, [pc, #216]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d02e      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d027      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ffc:	4b2e      	ldr	r3, [pc, #184]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003004:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003006:	4b2e      	ldr	r3, [pc, #184]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003008:	2201      	movs	r2, #1
 800300a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800300c:	4b2c      	ldr	r3, [pc, #176]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003012:	4a29      	ldr	r2, [pc, #164]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d014      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003022:	f7fe fa21 	bl	8001468 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003028:	e00a      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fe fa1d 	bl	8001468 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	; 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e036      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0ee      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800304c:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4917      	ldr	r1, [pc, #92]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305a:	4313      	orrs	r3, r2
 800305c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800305e:	7dfb      	ldrb	r3, [r7, #23]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d105      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003064:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	4a13      	ldr	r2, [pc, #76]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800307c:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	490b      	ldr	r1, [pc, #44]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800308a:	4313      	orrs	r3, r2
 800308c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	2b00      	cmp	r3, #0
 8003098:	d008      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800309a:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	4904      	ldr	r1, [pc, #16]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40007000 	.word	0x40007000
 80030c0:	42420440 	.word	0x42420440

080030c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e01d      	b.n	8003112 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fe f8b8 	bl	8001260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	4619      	mov	r1, r3
 8003102:	4610      	mov	r0, r2
 8003104:	f000 f8e4 	bl	80032d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800311a:	b480      	push	{r7}
 800311c:	b085      	sub	sp, #20
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2202      	movs	r2, #2
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b06      	cmp	r3, #6
 800313a:	d007      	beq.n	800314c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_TIM_ConfigClockSource+0x18>
 8003174:	2302      	movs	r3, #2
 8003176:	e0a6      	b.n	80032c6 <HAL_TIM_ConfigClockSource+0x166>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003196:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800319e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b40      	cmp	r3, #64	; 0x40
 80031ae:	d067      	beq.n	8003280 <HAL_TIM_ConfigClockSource+0x120>
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	d80b      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x6c>
 80031b4:	2b10      	cmp	r3, #16
 80031b6:	d073      	beq.n	80032a0 <HAL_TIM_ConfigClockSource+0x140>
 80031b8:	2b10      	cmp	r3, #16
 80031ba:	d802      	bhi.n	80031c2 <HAL_TIM_ConfigClockSource+0x62>
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d06f      	beq.n	80032a0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80031c0:	e078      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	d06c      	beq.n	80032a0 <HAL_TIM_ConfigClockSource+0x140>
 80031c6:	2b30      	cmp	r3, #48	; 0x30
 80031c8:	d06a      	beq.n	80032a0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80031ca:	e073      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031cc:	2b70      	cmp	r3, #112	; 0x70
 80031ce:	d00d      	beq.n	80031ec <HAL_TIM_ConfigClockSource+0x8c>
 80031d0:	2b70      	cmp	r3, #112	; 0x70
 80031d2:	d804      	bhi.n	80031de <HAL_TIM_ConfigClockSource+0x7e>
 80031d4:	2b50      	cmp	r3, #80	; 0x50
 80031d6:	d033      	beq.n	8003240 <HAL_TIM_ConfigClockSource+0xe0>
 80031d8:	2b60      	cmp	r3, #96	; 0x60
 80031da:	d041      	beq.n	8003260 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80031dc:	e06a      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e2:	d066      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x152>
 80031e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e8:	d017      	beq.n	800321a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80031ea:	e063      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	6899      	ldr	r1, [r3, #8]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f000 f941 	bl	8003482 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800320e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	609a      	str	r2, [r3, #8]
      break;
 8003218:	e04c      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6899      	ldr	r1, [r3, #8]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f000 f92a 	bl	8003482 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800323c:	609a      	str	r2, [r3, #8]
      break;
 800323e:	e039      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	6859      	ldr	r1, [r3, #4]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	461a      	mov	r2, r3
 800324e:	f000 f8a1 	bl	8003394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2150      	movs	r1, #80	; 0x50
 8003258:	4618      	mov	r0, r3
 800325a:	f000 f8f8 	bl	800344e <TIM_ITRx_SetConfig>
      break;
 800325e:	e029      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6818      	ldr	r0, [r3, #0]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	6859      	ldr	r1, [r3, #4]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	461a      	mov	r2, r3
 800326e:	f000 f8bf 	bl	80033f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2160      	movs	r1, #96	; 0x60
 8003278:	4618      	mov	r0, r3
 800327a:	f000 f8e8 	bl	800344e <TIM_ITRx_SetConfig>
      break;
 800327e:	e019      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	461a      	mov	r2, r3
 800328e:	f000 f881 	bl	8003394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2140      	movs	r1, #64	; 0x40
 8003298:	4618      	mov	r0, r3
 800329a:	f000 f8d8 	bl	800344e <TIM_ITRx_SetConfig>
      break;
 800329e:	e009      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4619      	mov	r1, r3
 80032aa:	4610      	mov	r0, r2
 80032ac:	f000 f8cf 	bl	800344e <TIM_ITRx_SetConfig>
      break;
 80032b0:	e000      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80032b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a29      	ldr	r2, [pc, #164]	; (8003388 <TIM_Base_SetConfig+0xb8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00b      	beq.n	8003300 <TIM_Base_SetConfig+0x30>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ee:	d007      	beq.n	8003300 <TIM_Base_SetConfig+0x30>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a26      	ldr	r2, [pc, #152]	; (800338c <TIM_Base_SetConfig+0xbc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d003      	beq.n	8003300 <TIM_Base_SetConfig+0x30>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a25      	ldr	r2, [pc, #148]	; (8003390 <TIM_Base_SetConfig+0xc0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d108      	bne.n	8003312 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a1c      	ldr	r2, [pc, #112]	; (8003388 <TIM_Base_SetConfig+0xb8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00b      	beq.n	8003332 <TIM_Base_SetConfig+0x62>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003320:	d007      	beq.n	8003332 <TIM_Base_SetConfig+0x62>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a19      	ldr	r2, [pc, #100]	; (800338c <TIM_Base_SetConfig+0xbc>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d003      	beq.n	8003332 <TIM_Base_SetConfig+0x62>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a18      	ldr	r2, [pc, #96]	; (8003390 <TIM_Base_SetConfig+0xc0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d108      	bne.n	8003344 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a07      	ldr	r2, [pc, #28]	; (8003388 <TIM_Base_SetConfig+0xb8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d103      	bne.n	8003378 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	615a      	str	r2, [r3, #20]
}
 800337e:	bf00      	nop
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr
 8003388:	40012c00 	.word	0x40012c00
 800338c:	40000400 	.word	0x40000400
 8003390:	40000800 	.word	0x40000800

08003394 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	f023 0201 	bic.w	r2, r3, #1
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f023 030a 	bic.w	r3, r3, #10
 80033d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	621a      	str	r2, [r3, #32]
}
 80033e6:	bf00      	nop
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr

080033f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	f023 0210 	bic.w	r2, r3, #16
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800341a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	031b      	lsls	r3, r3, #12
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	4313      	orrs	r3, r2
 8003424:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800342c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	621a      	str	r2, [r3, #32]
}
 8003444:	bf00      	nop
 8003446:	371c      	adds	r7, #28
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr

0800344e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800344e:	b480      	push	{r7}
 8003450:	b085      	sub	sp, #20
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003464:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	f043 0307 	orr.w	r3, r3, #7
 8003470:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	609a      	str	r2, [r3, #8]
}
 8003478:	bf00      	nop
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003482:	b480      	push	{r7}
 8003484:	b087      	sub	sp, #28
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800349c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	021a      	lsls	r2, r3, #8
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	431a      	orrs	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	609a      	str	r2, [r3, #8]
}
 80034b6:	bf00      	nop
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e032      	b.n	800353e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003510:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	4313      	orrs	r3, r2
 800351a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr

08003548 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003548:	b084      	sub	sp, #16
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	f107 0014 	add.w	r0, r7, #20
 8003556:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	b004      	add	sp, #16
 8003566:	4770      	bx	lr

08003568 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003570:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003574:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800357c:	b29a      	uxth	r2, r3
 800357e:	89fb      	ldrh	r3, [r7, #14]
 8003580:	4313      	orrs	r3, r2
 8003582:	b29a      	uxth	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr

08003596 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003596:	b480      	push	{r7}
 8003598:	b085      	sub	sp, #20
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800359e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80035a2:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	b21a      	sxth	r2, r3
 80035ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035b2:	43db      	mvns	r3, r3
 80035b4:	b21b      	sxth	r3, r3
 80035b6:	4013      	ands	r3, r2
 80035b8:	b21b      	sxth	r3, r3
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr

080035ce <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	460b      	mov	r3, r1
 80035d8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr

080035e6 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80035e6:	b084      	sub	sp, #16
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	f107 0014 	add.w	r0, r7, #20
 80035f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff ffa5 	bl	8003568 <USB_EnableGlobalInt>

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800362a:	b004      	add	sp, #16
 800362c:	4770      	bx	lr
	...

08003630 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003630:	b490      	push	{r4, r7}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	b29b      	uxth	r3, r3
 800364c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003654:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	78db      	ldrb	r3, [r3, #3]
 800365a:	2b03      	cmp	r3, #3
 800365c:	d819      	bhi.n	8003692 <USB_ActivateEndpoint+0x62>
 800365e:	a201      	add	r2, pc, #4	; (adr r2, 8003664 <USB_ActivateEndpoint+0x34>)
 8003660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003664:	08003675 	.word	0x08003675
 8003668:	08003689 	.word	0x08003689
 800366c:	08003699 	.word	0x08003699
 8003670:	0800367f 	.word	0x0800367f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003674:	89bb      	ldrh	r3, [r7, #12]
 8003676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800367a:	81bb      	strh	r3, [r7, #12]
      break;
 800367c:	e00d      	b.n	800369a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800367e:	89bb      	ldrh	r3, [r7, #12]
 8003680:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003684:	81bb      	strh	r3, [r7, #12]
      break;
 8003686:	e008      	b.n	800369a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003688:	89bb      	ldrh	r3, [r7, #12]
 800368a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800368e:	81bb      	strh	r3, [r7, #12]
      break;
 8003690:	e003      	b.n	800369a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
      break;
 8003696:	e000      	b.n	800369a <USB_ActivateEndpoint+0x6a>
      break;
 8003698:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	441a      	add	r2, r3
 80036a4:	89bb      	ldrh	r3, [r7, #12]
 80036a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	4313      	orrs	r3, r2
 80036da:	b29c      	uxth	r4, r3
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	441a      	add	r2, r3
 80036e6:	4b8a      	ldr	r3, [pc, #552]	; (8003910 <USB_ActivateEndpoint+0x2e0>)
 80036e8:	4323      	orrs	r3, r4
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	7b1b      	ldrb	r3, [r3, #12]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f040 8112 	bne.w	800391c <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	785b      	ldrb	r3, [r3, #1]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d067      	beq.n	80037d0 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003700:	687c      	ldr	r4, [r7, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003708:	b29b      	uxth	r3, r3
 800370a:	441c      	add	r4, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	4423      	add	r3, r4
 8003714:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003718:	461c      	mov	r4, r3
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	88db      	ldrh	r3, [r3, #6]
 800371e:	085b      	lsrs	r3, r3, #1
 8003720:	b29b      	uxth	r3, r3
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	b29b      	uxth	r3, r3
 8003726:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	b29c      	uxth	r4, r3
 8003736:	4623      	mov	r3, r4
 8003738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	d014      	beq.n	800376a <USB_ActivateEndpoint+0x13a>
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	b29b      	uxth	r3, r3
 800374e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003756:	b29c      	uxth	r4, r3
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	441a      	add	r2, r3
 8003762:	4b6c      	ldr	r3, [pc, #432]	; (8003914 <USB_ActivateEndpoint+0x2e4>)
 8003764:	4323      	orrs	r3, r4
 8003766:	b29b      	uxth	r3, r3
 8003768:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	78db      	ldrb	r3, [r3, #3]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d018      	beq.n	80037a4 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	b29b      	uxth	r3, r3
 8003780:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003788:	b29c      	uxth	r4, r3
 800378a:	f084 0320 	eor.w	r3, r4, #32
 800378e:	b29c      	uxth	r4, r3
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	441a      	add	r2, r3
 800379a:	4b5d      	ldr	r3, [pc, #372]	; (8003910 <USB_ActivateEndpoint+0x2e0>)
 800379c:	4323      	orrs	r3, r4
 800379e:	b29b      	uxth	r3, r3
 80037a0:	8013      	strh	r3, [r2, #0]
 80037a2:	e22b      	b.n	8003bfc <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ba:	b29c      	uxth	r4, r3
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	441a      	add	r2, r3
 80037c6:	4b52      	ldr	r3, [pc, #328]	; (8003910 <USB_ActivateEndpoint+0x2e0>)
 80037c8:	4323      	orrs	r3, r4
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	8013      	strh	r3, [r2, #0]
 80037ce:	e215      	b.n	8003bfc <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80037d0:	687c      	ldr	r4, [r7, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037d8:	b29b      	uxth	r3, r3
 80037da:	441c      	add	r4, r3
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	4423      	add	r3, r4
 80037e4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80037e8:	461c      	mov	r4, r3
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	88db      	ldrh	r3, [r3, #6]
 80037ee:	085b      	lsrs	r3, r3, #1
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80037f8:	687c      	ldr	r4, [r7, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003800:	b29b      	uxth	r3, r3
 8003802:	441c      	add	r4, r3
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	4423      	add	r3, r4
 800380c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003810:	461c      	mov	r4, r3
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10e      	bne.n	8003838 <USB_ActivateEndpoint+0x208>
 800381a:	8823      	ldrh	r3, [r4, #0]
 800381c:	b29b      	uxth	r3, r3
 800381e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003822:	b29b      	uxth	r3, r3
 8003824:	8023      	strh	r3, [r4, #0]
 8003826:	8823      	ldrh	r3, [r4, #0]
 8003828:	b29b      	uxth	r3, r3
 800382a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800382e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003832:	b29b      	uxth	r3, r3
 8003834:	8023      	strh	r3, [r4, #0]
 8003836:	e02d      	b.n	8003894 <USB_ActivateEndpoint+0x264>
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	2b3e      	cmp	r3, #62	; 0x3e
 800383e:	d812      	bhi.n	8003866 <USB_ActivateEndpoint+0x236>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	085b      	lsrs	r3, r3, #1
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <USB_ActivateEndpoint+0x22a>
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	3301      	adds	r3, #1
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	b29b      	uxth	r3, r3
 800385e:	029b      	lsls	r3, r3, #10
 8003860:	b29b      	uxth	r3, r3
 8003862:	8023      	strh	r3, [r4, #0]
 8003864:	e016      	b.n	8003894 <USB_ActivateEndpoint+0x264>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 031f 	and.w	r3, r3, #31
 8003876:	2b00      	cmp	r3, #0
 8003878:	d102      	bne.n	8003880 <USB_ActivateEndpoint+0x250>
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	3b01      	subs	r3, #1
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	b29b      	uxth	r3, r3
 8003884:	029b      	lsls	r3, r3, #10
 8003886:	b29b      	uxth	r3, r3
 8003888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800388c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003890:	b29b      	uxth	r3, r3
 8003892:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	b29c      	uxth	r4, r3
 80038a2:	4623      	mov	r3, r4
 80038a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d014      	beq.n	80038d6 <USB_ActivateEndpoint+0x2a6>
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c2:	b29c      	uxth	r4, r3
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	441a      	add	r2, r3
 80038ce:	4b12      	ldr	r3, [pc, #72]	; (8003918 <USB_ActivateEndpoint+0x2e8>)
 80038d0:	4323      	orrs	r3, r4
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ec:	b29c      	uxth	r4, r3
 80038ee:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80038f2:	b29c      	uxth	r4, r3
 80038f4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80038f8:	b29c      	uxth	r4, r3
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	441a      	add	r2, r3
 8003904:	4b02      	ldr	r3, [pc, #8]	; (8003910 <USB_ActivateEndpoint+0x2e0>)
 8003906:	4323      	orrs	r3, r4
 8003908:	b29b      	uxth	r3, r3
 800390a:	8013      	strh	r3, [r2, #0]
 800390c:	e176      	b.n	8003bfc <USB_ActivateEndpoint+0x5cc>
 800390e:	bf00      	nop
 8003910:	ffff8080 	.word	0xffff8080
 8003914:	ffff80c0 	.word	0xffff80c0
 8003918:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	b29b      	uxth	r3, r3
 800392a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800392e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003932:	b29c      	uxth	r4, r3
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	441a      	add	r2, r3
 800393e:	4b96      	ldr	r3, [pc, #600]	; (8003b98 <USB_ActivateEndpoint+0x568>)
 8003940:	4323      	orrs	r3, r4
 8003942:	b29b      	uxth	r3, r3
 8003944:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003946:	687c      	ldr	r4, [r7, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800394e:	b29b      	uxth	r3, r3
 8003950:	441c      	add	r4, r3
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	4423      	add	r3, r4
 800395a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800395e:	461c      	mov	r4, r3
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	891b      	ldrh	r3, [r3, #8]
 8003964:	085b      	lsrs	r3, r3, #1
 8003966:	b29b      	uxth	r3, r3
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	b29b      	uxth	r3, r3
 800396c:	8023      	strh	r3, [r4, #0]
 800396e:	687c      	ldr	r4, [r7, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003976:	b29b      	uxth	r3, r3
 8003978:	441c      	add	r4, r3
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	4423      	add	r3, r4
 8003982:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003986:	461c      	mov	r4, r3
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	895b      	ldrh	r3, [r3, #10]
 800398c:	085b      	lsrs	r3, r3, #1
 800398e:	b29b      	uxth	r3, r3
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	b29b      	uxth	r3, r3
 8003994:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	785b      	ldrb	r3, [r3, #1]
 800399a:	2b00      	cmp	r3, #0
 800399c:	f040 8088 	bne.w	8003ab0 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	b29c      	uxth	r4, r3
 80039ae:	4623      	mov	r3, r4
 80039b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d014      	beq.n	80039e2 <USB_ActivateEndpoint+0x3b2>
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ce:	b29c      	uxth	r4, r3
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	441a      	add	r2, r3
 80039da:	4b70      	ldr	r3, [pc, #448]	; (8003b9c <USB_ActivateEndpoint+0x56c>)
 80039dc:	4323      	orrs	r3, r4
 80039de:	b29b      	uxth	r3, r3
 80039e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	b29c      	uxth	r4, r3
 80039f0:	4623      	mov	r3, r4
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d014      	beq.n	8003a24 <USB_ActivateEndpoint+0x3f4>
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a10:	b29c      	uxth	r4, r3
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	441a      	add	r2, r3
 8003a1c:	4b60      	ldr	r3, [pc, #384]	; (8003ba0 <USB_ActivateEndpoint+0x570>)
 8003a1e:	4323      	orrs	r3, r4
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3a:	b29c      	uxth	r4, r3
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	441a      	add	r2, r3
 8003a46:	4b56      	ldr	r3, [pc, #344]	; (8003ba0 <USB_ActivateEndpoint+0x570>)
 8003a48:	4323      	orrs	r3, r4
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a64:	b29c      	uxth	r4, r3
 8003a66:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003a6a:	b29c      	uxth	r4, r3
 8003a6c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003a70:	b29c      	uxth	r4, r3
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	441a      	add	r2, r3
 8003a7c:	4b49      	ldr	r3, [pc, #292]	; (8003ba4 <USB_ActivateEndpoint+0x574>)
 8003a7e:	4323      	orrs	r3, r4
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a9a:	b29c      	uxth	r4, r3
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	441a      	add	r2, r3
 8003aa6:	4b3f      	ldr	r3, [pc, #252]	; (8003ba4 <USB_ActivateEndpoint+0x574>)
 8003aa8:	4323      	orrs	r3, r4
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	8013      	strh	r3, [r2, #0]
 8003aae:	e0a5      	b.n	8003bfc <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	b29c      	uxth	r4, r3
 8003abe:	4623      	mov	r3, r4
 8003ac0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d014      	beq.n	8003af2 <USB_ActivateEndpoint+0x4c2>
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ade:	b29c      	uxth	r4, r3
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	441a      	add	r2, r3
 8003aea:	4b2c      	ldr	r3, [pc, #176]	; (8003b9c <USB_ActivateEndpoint+0x56c>)
 8003aec:	4323      	orrs	r3, r4
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	b29c      	uxth	r4, r3
 8003b00:	4623      	mov	r3, r4
 8003b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d014      	beq.n	8003b34 <USB_ActivateEndpoint+0x504>
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b20:	b29c      	uxth	r4, r3
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	441a      	add	r2, r3
 8003b2c:	4b1c      	ldr	r3, [pc, #112]	; (8003ba0 <USB_ActivateEndpoint+0x570>)
 8003b2e:	4323      	orrs	r3, r4
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4a:	b29c      	uxth	r4, r3
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	441a      	add	r2, r3
 8003b56:	4b11      	ldr	r3, [pc, #68]	; (8003b9c <USB_ActivateEndpoint+0x56c>)
 8003b58:	4323      	orrs	r3, r4
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	78db      	ldrb	r3, [r3, #3]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d020      	beq.n	8003ba8 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b7c:	b29c      	uxth	r4, r3
 8003b7e:	f084 0320 	eor.w	r3, r4, #32
 8003b82:	b29c      	uxth	r4, r3
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	441a      	add	r2, r3
 8003b8e:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <USB_ActivateEndpoint+0x574>)
 8003b90:	4323      	orrs	r3, r4
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	8013      	strh	r3, [r2, #0]
 8003b96:	e01c      	b.n	8003bd2 <USB_ActivateEndpoint+0x5a2>
 8003b98:	ffff8180 	.word	0xffff8180
 8003b9c:	ffffc080 	.word	0xffffc080
 8003ba0:	ffff80c0 	.word	0xffff80c0
 8003ba4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bbe:	b29c      	uxth	r4, r3
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	441a      	add	r2, r3
 8003bca:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <USB_ActivateEndpoint+0x5d8>)
 8003bcc:	4323      	orrs	r3, r4
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be8:	b29c      	uxth	r4, r3
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	441a      	add	r2, r3
 8003bf4:	4b04      	ldr	r3, [pc, #16]	; (8003c08 <USB_ActivateEndpoint+0x5d8>)
 8003bf6:	4323      	orrs	r3, r4
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc90      	pop	{r4, r7}
 8003c06:	4770      	bx	lr
 8003c08:	ffff8080 	.word	0xffff8080

08003c0c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c0c:	b490      	push	{r4, r7}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	7b1b      	ldrb	r3, [r3, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d171      	bne.n	8003d02 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	785b      	ldrb	r3, [r3, #1]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d036      	beq.n	8003c94 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	b29c      	uxth	r4, r3
 8003c34:	4623      	mov	r3, r4
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d014      	beq.n	8003c68 <USB_DeactivateEndpoint+0x5c>
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c54:	b29c      	uxth	r4, r3
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	441a      	add	r2, r3
 8003c60:	4b6b      	ldr	r3, [pc, #428]	; (8003e10 <USB_DeactivateEndpoint+0x204>)
 8003c62:	4323      	orrs	r3, r4
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c7e:	b29c      	uxth	r4, r3
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	441a      	add	r2, r3
 8003c8a:	4b62      	ldr	r3, [pc, #392]	; (8003e14 <USB_DeactivateEndpoint+0x208>)
 8003c8c:	4323      	orrs	r3, r4
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	8013      	strh	r3, [r2, #0]
 8003c92:	e144      	b.n	8003f1e <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	b29c      	uxth	r4, r3
 8003ca2:	4623      	mov	r3, r4
 8003ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d014      	beq.n	8003cd6 <USB_DeactivateEndpoint+0xca>
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc2:	b29c      	uxth	r4, r3
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	441a      	add	r2, r3
 8003cce:	4b52      	ldr	r3, [pc, #328]	; (8003e18 <USB_DeactivateEndpoint+0x20c>)
 8003cd0:	4323      	orrs	r3, r4
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cec:	b29c      	uxth	r4, r3
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	441a      	add	r2, r3
 8003cf8:	4b46      	ldr	r3, [pc, #280]	; (8003e14 <USB_DeactivateEndpoint+0x208>)
 8003cfa:	4323      	orrs	r3, r4
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	8013      	strh	r3, [r2, #0]
 8003d00:	e10d      	b.n	8003f1e <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	785b      	ldrb	r3, [r3, #1]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f040 8088 	bne.w	8003e1c <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	b29c      	uxth	r4, r3
 8003d1a:	4623      	mov	r3, r4
 8003d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d014      	beq.n	8003d4e <USB_DeactivateEndpoint+0x142>
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3a:	b29c      	uxth	r4, r3
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	441a      	add	r2, r3
 8003d46:	4b34      	ldr	r3, [pc, #208]	; (8003e18 <USB_DeactivateEndpoint+0x20c>)
 8003d48:	4323      	orrs	r3, r4
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	b29c      	uxth	r4, r3
 8003d5c:	4623      	mov	r3, r4
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d014      	beq.n	8003d90 <USB_DeactivateEndpoint+0x184>
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7c:	b29c      	uxth	r4, r3
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	441a      	add	r2, r3
 8003d88:	4b21      	ldr	r3, [pc, #132]	; (8003e10 <USB_DeactivateEndpoint+0x204>)
 8003d8a:	4323      	orrs	r3, r4
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da6:	b29c      	uxth	r4, r3
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	441a      	add	r2, r3
 8003db2:	4b17      	ldr	r3, [pc, #92]	; (8003e10 <USB_DeactivateEndpoint+0x204>)
 8003db4:	4323      	orrs	r3, r4
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd0:	b29c      	uxth	r4, r3
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	441a      	add	r2, r3
 8003ddc:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <USB_DeactivateEndpoint+0x208>)
 8003dde:	4323      	orrs	r3, r4
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003df6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dfa:	b29c      	uxth	r4, r3
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	441a      	add	r2, r3
 8003e06:	4b03      	ldr	r3, [pc, #12]	; (8003e14 <USB_DeactivateEndpoint+0x208>)
 8003e08:	4323      	orrs	r3, r4
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	8013      	strh	r3, [r2, #0]
 8003e0e:	e086      	b.n	8003f1e <USB_DeactivateEndpoint+0x312>
 8003e10:	ffff80c0 	.word	0xffff80c0
 8003e14:	ffff8080 	.word	0xffff8080
 8003e18:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	b29c      	uxth	r4, r3
 8003e2a:	4623      	mov	r3, r4
 8003e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d014      	beq.n	8003e5e <USB_DeactivateEndpoint+0x252>
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4a:	b29c      	uxth	r4, r3
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	441a      	add	r2, r3
 8003e56:	4b35      	ldr	r3, [pc, #212]	; (8003f2c <USB_DeactivateEndpoint+0x320>)
 8003e58:	4323      	orrs	r3, r4
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	b29c      	uxth	r4, r3
 8003e6c:	4623      	mov	r3, r4
 8003e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d014      	beq.n	8003ea0 <USB_DeactivateEndpoint+0x294>
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8c:	b29c      	uxth	r4, r3
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	441a      	add	r2, r3
 8003e98:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <USB_DeactivateEndpoint+0x324>)
 8003e9a:	4323      	orrs	r3, r4
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb6:	b29c      	uxth	r4, r3
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	441a      	add	r2, r3
 8003ec2:	4b1a      	ldr	r3, [pc, #104]	; (8003f2c <USB_DeactivateEndpoint+0x320>)
 8003ec4:	4323      	orrs	r3, r4
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ee0:	b29c      	uxth	r4, r3
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	441a      	add	r2, r3
 8003eec:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <USB_DeactivateEndpoint+0x328>)
 8003eee:	4323      	orrs	r3, r4
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0a:	b29c      	uxth	r4, r3
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	441a      	add	r2, r3
 8003f16:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <USB_DeactivateEndpoint+0x328>)
 8003f18:	4323      	orrs	r3, r4
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc90      	pop	{r4, r7}
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	ffffc080 	.word	0xffffc080
 8003f30:	ffff80c0 	.word	0xffff80c0
 8003f34:	ffff8080 	.word	0xffff8080

08003f38 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f38:	b590      	push	{r4, r7, lr}
 8003f3a:	b08d      	sub	sp, #52	; 0x34
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	785b      	ldrb	r3, [r3, #1]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	f040 8160 	bne.w	800420c <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	699a      	ldr	r2, [r3, #24]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d909      	bls.n	8003f6c <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f64:	1ad2      	subs	r2, r2, r3
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	619a      	str	r2, [r3, #24]
 8003f6a:	e005      	b.n	8003f78 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2200      	movs	r2, #0
 8003f76:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	7b1b      	ldrb	r3, [r3, #12]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d119      	bne.n	8003fb4 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	6959      	ldr	r1, [r3, #20]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	88da      	ldrh	r2, [r3, #6]
 8003f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fba2 	bl	80046d6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003f92:	687c      	ldr	r4, [r7, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	441c      	add	r4, r3
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	4423      	add	r3, r4
 8003fa6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003faa:	461c      	mov	r4, r3
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	8023      	strh	r3, [r4, #0]
 8003fb2:	e10f      	b.n	80041d4 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d065      	beq.n	8004096 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003fca:	687c      	ldr	r4, [r7, #4]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	785b      	ldrb	r3, [r3, #1]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d148      	bne.n	8004066 <USB_EPStartXfer+0x12e>
 8003fd4:	687c      	ldr	r4, [r7, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	441c      	add	r4, r3
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	4423      	add	r3, r4
 8003fe8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fec:	461c      	mov	r4, r3
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10e      	bne.n	8004012 <USB_EPStartXfer+0xda>
 8003ff4:	8823      	ldrh	r3, [r4, #0]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	8023      	strh	r3, [r4, #0]
 8004000:	8823      	ldrh	r3, [r4, #0]
 8004002:	b29b      	uxth	r3, r3
 8004004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800400c:	b29b      	uxth	r3, r3
 800400e:	8023      	strh	r3, [r4, #0]
 8004010:	e03d      	b.n	800408e <USB_EPStartXfer+0x156>
 8004012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004014:	2b3e      	cmp	r3, #62	; 0x3e
 8004016:	d810      	bhi.n	800403a <USB_EPStartXfer+0x102>
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401a:	085b      	lsrs	r3, r3, #1
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <USB_EPStartXfer+0xf6>
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	3301      	adds	r3, #1
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	b29b      	uxth	r3, r3
 8004032:	029b      	lsls	r3, r3, #10
 8004034:	b29b      	uxth	r3, r3
 8004036:	8023      	strh	r3, [r4, #0]
 8004038:	e029      	b.n	800408e <USB_EPStartXfer+0x156>
 800403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	f003 031f 	and.w	r3, r3, #31
 8004046:	2b00      	cmp	r3, #0
 8004048:	d102      	bne.n	8004050 <USB_EPStartXfer+0x118>
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	3b01      	subs	r3, #1
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	b29b      	uxth	r3, r3
 8004054:	029b      	lsls	r3, r3, #10
 8004056:	b29b      	uxth	r3, r3
 8004058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800405c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004060:	b29b      	uxth	r3, r3
 8004062:	8023      	strh	r3, [r4, #0]
 8004064:	e013      	b.n	800408e <USB_EPStartXfer+0x156>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	785b      	ldrb	r3, [r3, #1]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d10f      	bne.n	800408e <USB_EPStartXfer+0x156>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004074:	b29b      	uxth	r3, r3
 8004076:	441c      	add	r4, r3
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	4423      	add	r3, r4
 8004080:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	895b      	ldrh	r3, [r3, #10]
 8004092:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004094:	e063      	b.n	800415e <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	785b      	ldrb	r3, [r3, #1]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d148      	bne.n	8004130 <USB_EPStartXfer+0x1f8>
 800409e:	687c      	ldr	r4, [r7, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	441c      	add	r4, r3
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	4423      	add	r3, r4
 80040b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040b6:	461c      	mov	r4, r3
 80040b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10e      	bne.n	80040dc <USB_EPStartXfer+0x1a4>
 80040be:	8823      	ldrh	r3, [r4, #0]
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	8023      	strh	r3, [r4, #0]
 80040ca:	8823      	ldrh	r3, [r4, #0]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	8023      	strh	r3, [r4, #0]
 80040da:	e03d      	b.n	8004158 <USB_EPStartXfer+0x220>
 80040dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040de:	2b3e      	cmp	r3, #62	; 0x3e
 80040e0:	d810      	bhi.n	8004104 <USB_EPStartXfer+0x1cc>
 80040e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e4:	085b      	lsrs	r3, r3, #1
 80040e6:	623b      	str	r3, [r7, #32]
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <USB_EPStartXfer+0x1c0>
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	3301      	adds	r3, #1
 80040f6:	623b      	str	r3, [r7, #32]
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	029b      	lsls	r3, r3, #10
 80040fe:	b29b      	uxth	r3, r3
 8004100:	8023      	strh	r3, [r4, #0]
 8004102:	e029      	b.n	8004158 <USB_EPStartXfer+0x220>
 8004104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	623b      	str	r3, [r7, #32]
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	2b00      	cmp	r3, #0
 8004112:	d102      	bne.n	800411a <USB_EPStartXfer+0x1e2>
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	3b01      	subs	r3, #1
 8004118:	623b      	str	r3, [r7, #32]
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	b29b      	uxth	r3, r3
 800411e:	029b      	lsls	r3, r3, #10
 8004120:	b29b      	uxth	r3, r3
 8004122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800412a:	b29b      	uxth	r3, r3
 800412c:	8023      	strh	r3, [r4, #0]
 800412e:	e013      	b.n	8004158 <USB_EPStartXfer+0x220>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	785b      	ldrb	r3, [r3, #1]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d10f      	bne.n	8004158 <USB_EPStartXfer+0x220>
 8004138:	687c      	ldr	r4, [r7, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004140:	b29b      	uxth	r3, r3
 8004142:	441c      	add	r4, r3
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	4423      	add	r3, r4
 800414c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004150:	461c      	mov	r4, r3
 8004152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004154:	b29b      	uxth	r3, r3
 8004156:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	891b      	ldrh	r3, [r3, #8]
 800415c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	6959      	ldr	r1, [r3, #20]
 8004162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004164:	b29b      	uxth	r3, r3
 8004166:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fab4 	bl	80046d6 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	785b      	ldrb	r3, [r3, #1]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d115      	bne.n	80041a2 <USB_EPStartXfer+0x26a>
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	b29b      	uxth	r3, r3
 8004184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418c:	b29c      	uxth	r4, r3
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	441a      	add	r2, r3
 8004198:	4b9a      	ldr	r3, [pc, #616]	; (8004404 <USB_EPStartXfer+0x4cc>)
 800419a:	4323      	orrs	r3, r4
 800419c:	b29b      	uxth	r3, r3
 800419e:	8013      	strh	r3, [r2, #0]
 80041a0:	e018      	b.n	80041d4 <USB_EPStartXfer+0x29c>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	785b      	ldrb	r3, [r3, #1]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d114      	bne.n	80041d4 <USB_EPStartXfer+0x29c>
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c0:	b29c      	uxth	r4, r3
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	441a      	add	r2, r3
 80041cc:	4b8e      	ldr	r3, [pc, #568]	; (8004408 <USB_EPStartXfer+0x4d0>)
 80041ce:	4323      	orrs	r3, r4
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ea:	b29c      	uxth	r4, r3
 80041ec:	f084 0310 	eor.w	r3, r4, #16
 80041f0:	b29c      	uxth	r4, r3
 80041f2:	f084 0320 	eor.w	r3, r4, #32
 80041f6:	b29c      	uxth	r4, r3
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	441a      	add	r2, r3
 8004202:	4b82      	ldr	r3, [pc, #520]	; (800440c <USB_EPStartXfer+0x4d4>)
 8004204:	4323      	orrs	r3, r4
 8004206:	b29b      	uxth	r3, r3
 8004208:	8013      	strh	r3, [r2, #0]
 800420a:	e146      	b.n	800449a <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	699a      	ldr	r2, [r3, #24]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	429a      	cmp	r2, r3
 8004216:	d909      	bls.n	800422c <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	699a      	ldr	r2, [r3, #24]
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	1ad2      	subs	r2, r2, r3
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	619a      	str	r2, [r3, #24]
 800422a:	e005      	b.n	8004238 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2200      	movs	r2, #0
 8004236:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	7b1b      	ldrb	r3, [r3, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d148      	bne.n	80042d2 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004240:	687c      	ldr	r4, [r7, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004248:	b29b      	uxth	r3, r3
 800424a:	441c      	add	r4, r3
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	4423      	add	r3, r4
 8004254:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004258:	461c      	mov	r4, r3
 800425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10e      	bne.n	800427e <USB_EPStartXfer+0x346>
 8004260:	8823      	ldrh	r3, [r4, #0]
 8004262:	b29b      	uxth	r3, r3
 8004264:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004268:	b29b      	uxth	r3, r3
 800426a:	8023      	strh	r3, [r4, #0]
 800426c:	8823      	ldrh	r3, [r4, #0]
 800426e:	b29b      	uxth	r3, r3
 8004270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004278:	b29b      	uxth	r3, r3
 800427a:	8023      	strh	r3, [r4, #0]
 800427c:	e0f2      	b.n	8004464 <USB_EPStartXfer+0x52c>
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004280:	2b3e      	cmp	r3, #62	; 0x3e
 8004282:	d810      	bhi.n	80042a6 <USB_EPStartXfer+0x36e>
 8004284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004286:	085b      	lsrs	r3, r3, #1
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <USB_EPStartXfer+0x362>
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	3301      	adds	r3, #1
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	b29b      	uxth	r3, r3
 800429e:	029b      	lsls	r3, r3, #10
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	8023      	strh	r3, [r4, #0]
 80042a4:	e0de      	b.n	8004464 <USB_EPStartXfer+0x52c>
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	61fb      	str	r3, [r7, #28]
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	f003 031f 	and.w	r3, r3, #31
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d102      	bne.n	80042bc <USB_EPStartXfer+0x384>
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	61fb      	str	r3, [r7, #28]
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	029b      	lsls	r3, r3, #10
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	8023      	strh	r3, [r4, #0]
 80042d0:	e0c8      	b.n	8004464 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	785b      	ldrb	r3, [r3, #1]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d148      	bne.n	800436c <USB_EPStartXfer+0x434>
 80042da:	687c      	ldr	r4, [r7, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	441c      	add	r4, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	4423      	add	r3, r4
 80042ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042f2:	461c      	mov	r4, r3
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10e      	bne.n	8004318 <USB_EPStartXfer+0x3e0>
 80042fa:	8823      	ldrh	r3, [r4, #0]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004302:	b29b      	uxth	r3, r3
 8004304:	8023      	strh	r3, [r4, #0]
 8004306:	8823      	ldrh	r3, [r4, #0]
 8004308:	b29b      	uxth	r3, r3
 800430a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800430e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004312:	b29b      	uxth	r3, r3
 8004314:	8023      	strh	r3, [r4, #0]
 8004316:	e03d      	b.n	8004394 <USB_EPStartXfer+0x45c>
 8004318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431a:	2b3e      	cmp	r3, #62	; 0x3e
 800431c:	d810      	bhi.n	8004340 <USB_EPStartXfer+0x408>
 800431e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004320:	085b      	lsrs	r3, r3, #1
 8004322:	61bb      	str	r3, [r7, #24]
 8004324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <USB_EPStartXfer+0x3fc>
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	3301      	adds	r3, #1
 8004332:	61bb      	str	r3, [r7, #24]
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	b29b      	uxth	r3, r3
 8004338:	029b      	lsls	r3, r3, #10
 800433a:	b29b      	uxth	r3, r3
 800433c:	8023      	strh	r3, [r4, #0]
 800433e:	e029      	b.n	8004394 <USB_EPStartXfer+0x45c>
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	61bb      	str	r3, [r7, #24]
 8004346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	2b00      	cmp	r3, #0
 800434e:	d102      	bne.n	8004356 <USB_EPStartXfer+0x41e>
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	3b01      	subs	r3, #1
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	b29b      	uxth	r3, r3
 800435a:	029b      	lsls	r3, r3, #10
 800435c:	b29b      	uxth	r3, r3
 800435e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004366:	b29b      	uxth	r3, r3
 8004368:	8023      	strh	r3, [r4, #0]
 800436a:	e013      	b.n	8004394 <USB_EPStartXfer+0x45c>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	785b      	ldrb	r3, [r3, #1]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d10f      	bne.n	8004394 <USB_EPStartXfer+0x45c>
 8004374:	687c      	ldr	r4, [r7, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800437c:	b29b      	uxth	r3, r3
 800437e:	441c      	add	r4, r3
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	4423      	add	r3, r4
 8004388:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800438c:	461c      	mov	r4, r3
 800438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004390:	b29b      	uxth	r3, r3
 8004392:	8023      	strh	r3, [r4, #0]
 8004394:	687c      	ldr	r4, [r7, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	785b      	ldrb	r3, [r3, #1]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d14e      	bne.n	800443c <USB_EPStartXfer+0x504>
 800439e:	687c      	ldr	r4, [r7, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	441c      	add	r4, r3
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	4423      	add	r3, r4
 80043b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043b6:	461c      	mov	r4, r3
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10e      	bne.n	80043dc <USB_EPStartXfer+0x4a4>
 80043be:	8823      	ldrh	r3, [r4, #0]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	8023      	strh	r3, [r4, #0]
 80043ca:	8823      	ldrh	r3, [r4, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	8023      	strh	r3, [r4, #0]
 80043da:	e043      	b.n	8004464 <USB_EPStartXfer+0x52c>
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	2b3e      	cmp	r3, #62	; 0x3e
 80043e0:	d816      	bhi.n	8004410 <USB_EPStartXfer+0x4d8>
 80043e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e4:	085b      	lsrs	r3, r3, #1
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <USB_EPStartXfer+0x4c0>
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	3301      	adds	r3, #1
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	029b      	lsls	r3, r3, #10
 80043fe:	b29b      	uxth	r3, r3
 8004400:	8023      	strh	r3, [r4, #0]
 8004402:	e02f      	b.n	8004464 <USB_EPStartXfer+0x52c>
 8004404:	ffff80c0 	.word	0xffff80c0
 8004408:	ffffc080 	.word	0xffffc080
 800440c:	ffff8080 	.word	0xffff8080
 8004410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <USB_EPStartXfer+0x4ee>
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	3b01      	subs	r3, #1
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	b29b      	uxth	r3, r3
 800442a:	029b      	lsls	r3, r3, #10
 800442c:	b29b      	uxth	r3, r3
 800442e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004436:	b29b      	uxth	r3, r3
 8004438:	8023      	strh	r3, [r4, #0]
 800443a:	e013      	b.n	8004464 <USB_EPStartXfer+0x52c>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	785b      	ldrb	r3, [r3, #1]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d10f      	bne.n	8004464 <USB_EPStartXfer+0x52c>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800444a:	b29b      	uxth	r3, r3
 800444c:	441c      	add	r4, r3
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	4423      	add	r3, r4
 8004456:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800445a:	613b      	str	r3, [r7, #16]
 800445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445e:	b29a      	uxth	r2, r3
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	b29b      	uxth	r3, r3
 8004472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447a:	b29c      	uxth	r4, r3
 800447c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004480:	b29c      	uxth	r4, r3
 8004482:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004486:	b29c      	uxth	r4, r3
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	441a      	add	r2, r3
 8004492:	4b04      	ldr	r3, [pc, #16]	; (80044a4 <USB_EPStartXfer+0x56c>)
 8004494:	4323      	orrs	r3, r4
 8004496:	b29b      	uxth	r3, r3
 8004498:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3734      	adds	r7, #52	; 0x34
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd90      	pop	{r4, r7, pc}
 80044a4:	ffff8080 	.word	0xffff8080

080044a8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80044a8:	b490      	push	{r4, r7}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	785b      	ldrb	r3, [r3, #1]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d018      	beq.n	80044ec <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d0:	b29c      	uxth	r4, r3
 80044d2:	f084 0310 	eor.w	r3, r4, #16
 80044d6:	b29c      	uxth	r4, r3
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	441a      	add	r2, r3
 80044e2:	4b11      	ldr	r3, [pc, #68]	; (8004528 <USB_EPSetStall+0x80>)
 80044e4:	4323      	orrs	r3, r4
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	8013      	strh	r3, [r2, #0]
 80044ea:	e017      	b.n	800451c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004502:	b29c      	uxth	r4, r3
 8004504:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004508:	b29c      	uxth	r4, r3
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	441a      	add	r2, r3
 8004514:	4b04      	ldr	r3, [pc, #16]	; (8004528 <USB_EPSetStall+0x80>)
 8004516:	4323      	orrs	r3, r4
 8004518:	b29b      	uxth	r3, r3
 800451a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bc90      	pop	{r4, r7}
 8004526:	4770      	bx	lr
 8004528:	ffff8080 	.word	0xffff8080

0800452c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800452c:	b490      	push	{r4, r7}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	7b1b      	ldrb	r3, [r3, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d17d      	bne.n	800463a <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	785b      	ldrb	r3, [r3, #1]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d03d      	beq.n	80045c2 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	b29c      	uxth	r4, r3
 8004554:	4623      	mov	r3, r4
 8004556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d014      	beq.n	8004588 <USB_EPClearStall+0x5c>
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	b29b      	uxth	r3, r3
 800456c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	b29c      	uxth	r4, r3
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	441a      	add	r2, r3
 8004580:	4b31      	ldr	r3, [pc, #196]	; (8004648 <USB_EPClearStall+0x11c>)
 8004582:	4323      	orrs	r3, r4
 8004584:	b29b      	uxth	r3, r3
 8004586:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	78db      	ldrb	r3, [r3, #3]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d054      	beq.n	800463a <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	b29b      	uxth	r3, r3
 800459e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045a6:	b29c      	uxth	r4, r3
 80045a8:	f084 0320 	eor.w	r3, r4, #32
 80045ac:	b29c      	uxth	r4, r3
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	441a      	add	r2, r3
 80045b8:	4b24      	ldr	r3, [pc, #144]	; (800464c <USB_EPClearStall+0x120>)
 80045ba:	4323      	orrs	r3, r4
 80045bc:	b29b      	uxth	r3, r3
 80045be:	8013      	strh	r3, [r2, #0]
 80045c0:	e03b      	b.n	800463a <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	b29c      	uxth	r4, r3
 80045d0:	4623      	mov	r3, r4
 80045d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d014      	beq.n	8004604 <USB_EPClearStall+0xd8>
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f0:	b29c      	uxth	r4, r3
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	441a      	add	r2, r3
 80045fc:	4b14      	ldr	r3, [pc, #80]	; (8004650 <USB_EPClearStall+0x124>)
 80045fe:	4323      	orrs	r3, r4
 8004600:	b29b      	uxth	r3, r3
 8004602:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	b29b      	uxth	r3, r3
 8004612:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461a:	b29c      	uxth	r4, r3
 800461c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004620:	b29c      	uxth	r4, r3
 8004622:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004626:	b29c      	uxth	r4, r3
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	441a      	add	r2, r3
 8004632:	4b06      	ldr	r3, [pc, #24]	; (800464c <USB_EPClearStall+0x120>)
 8004634:	4323      	orrs	r3, r4
 8004636:	b29b      	uxth	r3, r3
 8004638:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bc90      	pop	{r4, r7}
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	ffff80c0 	.word	0xffff80c0
 800464c:	ffff8080 	.word	0xffff8080
 8004650:	ffffc080 	.word	0xffffc080

08004654 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d103      	bne.n	800466e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2280      	movs	r2, #128	; 0x80
 800466a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	bc80      	pop	{r7}
 8004678:	4770      	bx	lr

0800467a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr

0800468e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	bc80      	pop	{r7}
 80046a0:	4770      	bx	lr

080046a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b085      	sub	sp, #20
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80046b4:	68fb      	ldr	r3, [r7, #12]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bc80      	pop	{r7}
 80046be:	4770      	bx	lr

080046c0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	4770      	bx	lr

080046d6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b08d      	sub	sp, #52	; 0x34
 80046da:	af00      	add	r7, sp, #0
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	4611      	mov	r1, r2
 80046e2:	461a      	mov	r2, r3
 80046e4:	460b      	mov	r3, r1
 80046e6:	80fb      	strh	r3, [r7, #6]
 80046e8:	4613      	mov	r3, r2
 80046ea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80046ec:	88bb      	ldrh	r3, [r7, #4]
 80046ee:	3301      	adds	r3, #1
 80046f0:	085b      	lsrs	r3, r3, #1
 80046f2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80046fc:	88fb      	ldrh	r3, [r7, #6]
 80046fe:	005a      	lsls	r2, r3, #1
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800470e:	e01e      	b.n	800474e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	3301      	adds	r3, #1
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	b29b      	uxth	r3, r3
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	b29b      	uxth	r3, r3
 8004726:	461a      	mov	r2, r3
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	4313      	orrs	r3, r2
 800472c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	b29a      	uxth	r2, r3
 8004732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004734:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004738:	3302      	adds	r3, #2
 800473a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	3302      	adds	r3, #2
 8004740:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	3301      	adds	r3, #1
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474a:	3b01      	subs	r3, #1
 800474c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1dd      	bne.n	8004710 <USB_WritePMA+0x3a>
  }
}
 8004754:	bf00      	nop
 8004756:	3734      	adds	r7, #52	; 0x34
 8004758:	46bd      	mov	sp, r7
 800475a:	bc80      	pop	{r7}
 800475c:	4770      	bx	lr

0800475e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800475e:	b480      	push	{r7}
 8004760:	b08b      	sub	sp, #44	; 0x2c
 8004762:	af00      	add	r7, sp, #0
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	4611      	mov	r1, r2
 800476a:	461a      	mov	r2, r3
 800476c:	460b      	mov	r3, r1
 800476e:	80fb      	strh	r3, [r7, #6]
 8004770:	4613      	mov	r3, r2
 8004772:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004774:	88bb      	ldrh	r3, [r7, #4]
 8004776:	085b      	lsrs	r3, r3, #1
 8004778:	b29b      	uxth	r3, r3
 800477a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004784:	88fb      	ldrh	r3, [r7, #6]
 8004786:	005a      	lsls	r2, r3, #1
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004790:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
 8004796:	e01b      	b.n	80047d0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	b29b      	uxth	r3, r3
 800479e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	3302      	adds	r3, #2
 80047a4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	3301      	adds	r3, #1
 80047b2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	0a1b      	lsrs	r3, r3, #8
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	3301      	adds	r3, #1
 80047c2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	3302      	adds	r3, #2
 80047c8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	3b01      	subs	r3, #1
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e0      	bne.n	8004798 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80047d6:	88bb      	ldrh	r3, [r7, #4]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	701a      	strb	r2, [r3, #0]
  }
}
 80047f2:	bf00      	nop
 80047f4:	372c      	adds	r7, #44	; 0x2c
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr

080047fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	7c1b      	ldrb	r3, [r3, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d115      	bne.n	8004840 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004818:	2202      	movs	r2, #2
 800481a:	2181      	movs	r1, #129	; 0x81
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f001 ff86 	bl	800672e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800482c:	2202      	movs	r2, #2
 800482e:	2101      	movs	r1, #1
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f001 ff7c 	bl	800672e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800483e:	e012      	b.n	8004866 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004840:	2340      	movs	r3, #64	; 0x40
 8004842:	2202      	movs	r2, #2
 8004844:	2181      	movs	r1, #129	; 0x81
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f001 ff71 	bl	800672e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004852:	2340      	movs	r3, #64	; 0x40
 8004854:	2202      	movs	r2, #2
 8004856:	2101      	movs	r1, #1
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f001 ff68 	bl	800672e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004866:	2308      	movs	r3, #8
 8004868:	2203      	movs	r2, #3
 800486a:	2182      	movs	r1, #130	; 0x82
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f001 ff5e 	bl	800672e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004878:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800487c:	f002 f878 	bl	8006970 <USBD_static_malloc>
 8004880:	4602      	mov	r2, r0
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d102      	bne.n	8004898 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004892:	2301      	movs	r3, #1
 8004894:	73fb      	strb	r3, [r7, #15]
 8004896:	e026      	b.n	80048e6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800489e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	7c1b      	ldrb	r3, [r3, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d109      	bne.n	80048d6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80048c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048cc:	2101      	movs	r1, #1
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f002 f817 	bl	8006902 <USBD_LL_PrepareReceive>
 80048d4:	e007      	b.n	80048e6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80048dc:	2340      	movs	r3, #64	; 0x40
 80048de:	2101      	movs	r1, #1
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f002 f80e 	bl	8006902 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004900:	2181      	movs	r1, #129	; 0x81
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f001 ff39 	bl	800677a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800490e:	2101      	movs	r1, #1
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f001 ff32 	bl	800677a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800491e:	2182      	movs	r1, #130	; 0x82
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f001 ff2a 	bl	800677a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00e      	beq.n	8004954 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004946:	4618      	mov	r0, r3
 8004948:	f002 f81e 	bl	8006988 <USBD_static_free>
    pdev->pClassData = NULL;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004954:	7bfb      	ldrb	r3, [r7, #15]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b086      	sub	sp, #24
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800496e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004984:	2b00      	cmp	r3, #0
 8004986:	d039      	beq.n	80049fc <USBD_CDC_Setup+0x9e>
 8004988:	2b20      	cmp	r3, #32
 800498a:	d17c      	bne.n	8004a86 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	88db      	ldrh	r3, [r3, #6]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d029      	beq.n	80049e8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	b25b      	sxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	da11      	bge.n	80049c2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80049aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	88d2      	ldrh	r2, [r2, #6]
 80049b0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80049b2:	6939      	ldr	r1, [r7, #16]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	88db      	ldrh	r3, [r3, #6]
 80049b8:	461a      	mov	r2, r3
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f001 f9f6 	bl	8005dac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80049c0:	e068      	b.n	8004a94 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	785a      	ldrb	r2, [r3, #1]
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	88db      	ldrh	r3, [r3, #6]
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80049d8:	6939      	ldr	r1, [r7, #16]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	88db      	ldrh	r3, [r3, #6]
 80049de:	461a      	mov	r2, r3
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f001 fa11 	bl	8005e08 <USBD_CtlPrepareRx>
      break;
 80049e6:	e055      	b.n	8004a94 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	7850      	ldrb	r0, [r2, #1]
 80049f4:	2200      	movs	r2, #0
 80049f6:	6839      	ldr	r1, [r7, #0]
 80049f8:	4798      	blx	r3
      break;
 80049fa:	e04b      	b.n	8004a94 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	785b      	ldrb	r3, [r3, #1]
 8004a00:	2b0a      	cmp	r3, #10
 8004a02:	d017      	beq.n	8004a34 <USBD_CDC_Setup+0xd6>
 8004a04:	2b0b      	cmp	r3, #11
 8004a06:	d029      	beq.n	8004a5c <USBD_CDC_Setup+0xfe>
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d133      	bne.n	8004a74 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a12:	2b03      	cmp	r3, #3
 8004a14:	d107      	bne.n	8004a26 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004a16:	f107 030c 	add.w	r3, r7, #12
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f001 f9c4 	bl	8005dac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004a24:	e02e      	b.n	8004a84 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004a26:	6839      	ldr	r1, [r7, #0]
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f001 f955 	bl	8005cd8 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a2e:	2302      	movs	r3, #2
 8004a30:	75fb      	strb	r3, [r7, #23]
          break;
 8004a32:	e027      	b.n	8004a84 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d107      	bne.n	8004a4e <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004a3e:	f107 030f 	add.w	r3, r7, #15
 8004a42:	2201      	movs	r2, #1
 8004a44:	4619      	mov	r1, r3
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f001 f9b0 	bl	8005dac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004a4c:	e01a      	b.n	8004a84 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004a4e:	6839      	ldr	r1, [r7, #0]
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f001 f941 	bl	8005cd8 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a56:	2302      	movs	r3, #2
 8004a58:	75fb      	strb	r3, [r7, #23]
          break;
 8004a5a:	e013      	b.n	8004a84 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d00d      	beq.n	8004a82 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004a66:	6839      	ldr	r1, [r7, #0]
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f001 f935 	bl	8005cd8 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a6e:	2302      	movs	r3, #2
 8004a70:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004a72:	e006      	b.n	8004a82 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004a74:	6839      	ldr	r1, [r7, #0]
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f001 f92e 	bl	8005cd8 <USBD_CtlError>
          ret = USBD_FAIL;
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	75fb      	strb	r3, [r7, #23]
          break;
 8004a80:	e000      	b.n	8004a84 <USBD_CDC_Setup+0x126>
          break;
 8004a82:	bf00      	nop
      }
      break;
 8004a84:	e006      	b.n	8004a94 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004a86:	6839      	ldr	r1, [r7, #0]
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f001 f925 	bl	8005cd8 <USBD_CtlError>
      ret = USBD_FAIL;
 8004a8e:	2302      	movs	r3, #2
 8004a90:	75fb      	strb	r3, [r7, #23]
      break;
 8004a92:	bf00      	nop
  }

  return ret;
 8004a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ab0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ab8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d037      	beq.n	8004b34 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004ac4:	78fa      	ldrb	r2, [r7, #3]
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	331c      	adds	r3, #28
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d026      	beq.n	8004b28 <USBD_CDC_DataIn+0x8a>
 8004ada:	78fa      	ldrb	r2, [r7, #3]
 8004adc:	6879      	ldr	r1, [r7, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	331c      	adds	r3, #28
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	78fa      	ldrb	r2, [r7, #3]
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	0152      	lsls	r2, r2, #5
 8004af2:	440a      	add	r2, r1
 8004af4:	3238      	adds	r2, #56	; 0x38
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004afc:	fb02 f201 	mul.w	r2, r2, r1
 8004b00:	1a9b      	subs	r3, r3, r2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d110      	bne.n	8004b28 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004b06:	78fa      	ldrb	r2, [r7, #3]
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	440b      	add	r3, r1
 8004b14:	331c      	adds	r3, #28
 8004b16:	2200      	movs	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004b1a:	78f9      	ldrb	r1, [r7, #3]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	2200      	movs	r2, #0
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f001 fecb 	bl	80068bc <USBD_LL_Transmit>
 8004b26:	e003      	b.n	8004b30 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	e000      	b.n	8004b36 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8004b34:	2302      	movs	r3, #2
  }
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	460b      	mov	r3, r1
 8004b48:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b50:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	4619      	mov	r1, r3
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f001 fef6 	bl	8006948 <USBD_LL_GetRxDataSize>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00d      	beq.n	8004b8a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004b82:	4611      	mov	r1, r2
 8004b84:	4798      	blx	r3

    return USBD_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	e000      	b.n	8004b8c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004b8a:	2302      	movs	r3, #2
  }
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ba2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d015      	beq.n	8004bda <USBD_CDC_EP0_RxReady+0x46>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004bb4:	2bff      	cmp	r3, #255	; 0xff
 8004bb6:	d010      	beq.n	8004bda <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004bc6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004bce:	b292      	uxth	r2, r2
 8004bd0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	22ff      	movs	r2, #255	; 0xff
 8004bd6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2243      	movs	r2, #67	; 0x43
 8004bf0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004bf2:	4b03      	ldr	r3, [pc, #12]	; (8004c00 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bc80      	pop	{r7}
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	20000094 	.word	0x20000094

08004c04 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2243      	movs	r2, #67	; 0x43
 8004c10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004c12:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	20000050 	.word	0x20000050

08004c24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2243      	movs	r2, #67	; 0x43
 8004c30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004c32:	4b03      	ldr	r3, [pc, #12]	; (8004c40 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bc80      	pop	{r7}
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	200000d8 	.word	0x200000d8

08004c44 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	220a      	movs	r2, #10
 8004c50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004c52:	4b03      	ldr	r3, [pc, #12]	; (8004c60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bc80      	pop	{r7}
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	2000000c 	.word	0x2000000c

08004c64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004c6e:	2302      	movs	r3, #2
 8004c70:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr

08004c90 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ca4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004cae:	88fa      	ldrh	r2, [r7, #6]
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	371c      	adds	r7, #28
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr

08004cc2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b085      	sub	sp, #20
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cd2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr

08004ce8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cf6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d01c      	beq.n	8004d3c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d115      	bne.n	8004d38 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2181      	movs	r1, #129	; 0x81
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f001 fdc4 	bl	80068bc <USBD_LL_Transmit>

      return USBD_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	e002      	b.n	8004d3e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8004d3c:	2302      	movs	r3, #2
  }
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b084      	sub	sp, #16
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d54:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d017      	beq.n	8004d90 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	7c1b      	ldrb	r3, [r3, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d109      	bne.n	8004d7c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d72:	2101      	movs	r1, #1
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f001 fdc4 	bl	8006902 <USBD_LL_PrepareReceive>
 8004d7a:	e007      	b.n	8004d8c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d82:	2340      	movs	r3, #64	; 0x40
 8004d84:	2101      	movs	r1, #1
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f001 fdbb 	bl	8006902 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	e000      	b.n	8004d92 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004d90:	2302      	movs	r3, #2
  }
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	4613      	mov	r3, r2
 8004da6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004dae:	2302      	movs	r3, #2
 8004db0:	e01a      	b.n	8004de8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	79fa      	ldrb	r2, [r7, #7]
 8004dde:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f001 fc2f 	bl	8006644 <USBD_LL_Init>

  return USBD_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d006      	beq.n	8004e12 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	73fb      	strb	r3, [r7, #15]
 8004e10:	e001      	b.n	8004e16 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004e12:	2302      	movs	r3, #2
 8004e14:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bc80      	pop	{r7}
 8004e20:	4770      	bx	lr

08004e22 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b082      	sub	sp, #8
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f001 fc64 	bl	80066f8 <USBD_LL_Start>

  return USBD_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bc80      	pop	{r7}
 8004e4c:	4770      	bx	lr

08004e4e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	460b      	mov	r3, r1
 8004e58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00c      	beq.n	8004e82 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	78fa      	ldrb	r2, [r7, #3]
 8004e72:	4611      	mov	r1, r2
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	4798      	blx	r3
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	460b      	mov	r3, r1
 8004e96:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	78fa      	ldrb	r2, [r7, #3]
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	4798      	blx	r3

  return USBD_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b082      	sub	sp, #8
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004ec2:	6839      	ldr	r1, [r7, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fecb 	bl	8005c60 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004ed8:	461a      	mov	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ee6:	f003 031f 	and.w	r3, r3, #31
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d00c      	beq.n	8004f08 <USBD_LL_SetupStage+0x56>
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d302      	bcc.n	8004ef8 <USBD_LL_SetupStage+0x46>
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d010      	beq.n	8004f18 <USBD_LL_SetupStage+0x66>
 8004ef6:	e017      	b.n	8004f28 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004efe:	4619      	mov	r1, r3
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f9cb 	bl	800529c <USBD_StdDevReq>
      break;
 8004f06:	e01a      	b.n	8004f3e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fa2d 	bl	8005370 <USBD_StdItfReq>
      break;
 8004f16:	e012      	b.n	8004f3e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fa6b 	bl	80053fc <USBD_StdEPReq>
      break;
 8004f26:	e00a      	b.n	8004f3e <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004f2e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	4619      	mov	r1, r3
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f001 fc3e 	bl	80067b8 <USBD_LL_StallEP>
      break;
 8004f3c:	bf00      	nop
  }

  return USBD_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	460b      	mov	r3, r1
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004f56:	7afb      	ldrb	r3, [r7, #11]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d14b      	bne.n	8004ff4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004f62:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d134      	bne.n	8004fd8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d919      	bls.n	8004fae <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	1ad2      	subs	r2, r2, r3
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d203      	bcs.n	8004f9c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	e002      	b.n	8004fa2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	6879      	ldr	r1, [r7, #4]
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 ff4c 	bl	8005e44 <USBD_CtlContinueRx>
 8004fac:	e038      	b.n	8005020 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d105      	bne.n	8004fd0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 ff49 	bl	8005e68 <USBD_CtlSendStatus>
 8004fd6:	e023      	b.n	8005020 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004fde:	2b05      	cmp	r3, #5
 8004fe0:	d11e      	bne.n	8005020 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004fea:	2100      	movs	r1, #0
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f001 fbe3 	bl	80067b8 <USBD_LL_StallEP>
 8004ff2:	e015      	b.n	8005020 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00d      	beq.n	800501c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005006:	2b03      	cmp	r3, #3
 8005008:	d108      	bne.n	800501c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	7afa      	ldrb	r2, [r7, #11]
 8005014:	4611      	mov	r1, r2
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	4798      	blx	r3
 800501a:	e001      	b.n	8005020 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800501c:	2302      	movs	r3, #2
 800501e:	e000      	b.n	8005022 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b086      	sub	sp, #24
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	460b      	mov	r3, r1
 8005034:	607a      	str	r2, [r7, #4]
 8005036:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005038:	7afb      	ldrb	r3, [r7, #11]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d17f      	bne.n	800513e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3314      	adds	r3, #20
 8005042:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800504a:	2b02      	cmp	r3, #2
 800504c:	d15c      	bne.n	8005108 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	429a      	cmp	r2, r3
 8005058:	d915      	bls.n	8005086 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	1ad2      	subs	r2, r2, r3
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	b29b      	uxth	r3, r3
 800506e:	461a      	mov	r2, r3
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 feb6 	bl	8005de4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005078:	2300      	movs	r3, #0
 800507a:	2200      	movs	r2, #0
 800507c:	2100      	movs	r1, #0
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f001 fc3f 	bl	8006902 <USBD_LL_PrepareReceive>
 8005084:	e04e      	b.n	8005124 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	6912      	ldr	r2, [r2, #16]
 800508e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005092:	fb02 f201 	mul.w	r2, r2, r1
 8005096:	1a9b      	subs	r3, r3, r2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d11c      	bne.n	80050d6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d316      	bcc.n	80050d6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d20f      	bcs.n	80050d6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80050b6:	2200      	movs	r2, #0
 80050b8:	2100      	movs	r1, #0
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 fe92 	bl	8005de4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80050c8:	2300      	movs	r3, #0
 80050ca:	2200      	movs	r2, #0
 80050cc:	2100      	movs	r1, #0
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f001 fc17 	bl	8006902 <USBD_LL_PrepareReceive>
 80050d4:	e026      	b.n	8005124 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d105      	bne.n	80050f8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80050f8:	2180      	movs	r1, #128	; 0x80
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f001 fb5c 	bl	80067b8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 fec4 	bl	8005e8e <USBD_CtlReceiveStatus>
 8005106:	e00d      	b.n	8005124 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800510e:	2b04      	cmp	r3, #4
 8005110:	d004      	beq.n	800511c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005118:	2b00      	cmp	r3, #0
 800511a:	d103      	bne.n	8005124 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800511c:	2180      	movs	r1, #128	; 0x80
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f001 fb4a 	bl	80067b8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800512a:	2b01      	cmp	r3, #1
 800512c:	d11d      	bne.n	800516a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7ff fe83 	bl	8004e3a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800513c:	e015      	b.n	800516a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00d      	beq.n	8005166 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005150:	2b03      	cmp	r3, #3
 8005152:	d108      	bne.n	8005166 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	7afa      	ldrb	r2, [r7, #11]
 800515e:	4611      	mov	r1, r2
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	4798      	blx	r3
 8005164:	e001      	b.n	800516a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005166:	2302      	movs	r3, #2
 8005168:	e000      	b.n	800516c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800517c:	2340      	movs	r3, #64	; 0x40
 800517e:	2200      	movs	r2, #0
 8005180:	2100      	movs	r1, #0
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f001 fad3 	bl	800672e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2240      	movs	r2, #64	; 0x40
 8005194:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005198:	2340      	movs	r3, #64	; 0x40
 800519a:	2200      	movs	r2, #0
 800519c:	2180      	movs	r1, #128	; 0x80
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f001 fac5 	bl	800672e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2240      	movs	r2, #64	; 0x40
 80051ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d009      	beq.n	80051ec <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6852      	ldr	r2, [r2, #4]
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	4611      	mov	r1, r2
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	4798      	blx	r3
  }

  return USBD_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	460b      	mov	r3, r1
 8005200:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	78fa      	ldrb	r2, [r7, #3]
 8005206:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr

08005214 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2204      	movs	r2, #4
 800522c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	bc80      	pop	{r7}
 800523a:	4770      	bx	lr

0800523c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800524a:	2b04      	cmp	r3, #4
 800524c:	d105      	bne.n	800525a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	bc80      	pop	{r7}
 8005264:	4770      	bx	lr

08005266 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b082      	sub	sp, #8
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005274:	2b03      	cmp	r3, #3
 8005276:	d10b      	bne.n	8005290 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052b2:	2b20      	cmp	r3, #32
 80052b4:	d004      	beq.n	80052c0 <USBD_StdDevReq+0x24>
 80052b6:	2b40      	cmp	r3, #64	; 0x40
 80052b8:	d002      	beq.n	80052c0 <USBD_StdDevReq+0x24>
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d008      	beq.n	80052d0 <USBD_StdDevReq+0x34>
 80052be:	e04c      	b.n	800535a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	6839      	ldr	r1, [r7, #0]
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	4798      	blx	r3
      break;
 80052ce:	e049      	b.n	8005364 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	785b      	ldrb	r3, [r3, #1]
 80052d4:	2b09      	cmp	r3, #9
 80052d6:	d83a      	bhi.n	800534e <USBD_StdDevReq+0xb2>
 80052d8:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <USBD_StdDevReq+0x44>)
 80052da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052de:	bf00      	nop
 80052e0:	08005331 	.word	0x08005331
 80052e4:	08005345 	.word	0x08005345
 80052e8:	0800534f 	.word	0x0800534f
 80052ec:	0800533b 	.word	0x0800533b
 80052f0:	0800534f 	.word	0x0800534f
 80052f4:	08005313 	.word	0x08005313
 80052f8:	08005309 	.word	0x08005309
 80052fc:	0800534f 	.word	0x0800534f
 8005300:	08005327 	.word	0x08005327
 8005304:	0800531d 	.word	0x0800531d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005308:	6839      	ldr	r1, [r7, #0]
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f9d4 	bl	80056b8 <USBD_GetDescriptor>
          break;
 8005310:	e022      	b.n	8005358 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005312:	6839      	ldr	r1, [r7, #0]
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 fb37 	bl	8005988 <USBD_SetAddress>
          break;
 800531a:	e01d      	b.n	8005358 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800531c:	6839      	ldr	r1, [r7, #0]
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fb74 	bl	8005a0c <USBD_SetConfig>
          break;
 8005324:	e018      	b.n	8005358 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005326:	6839      	ldr	r1, [r7, #0]
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fbfd 	bl	8005b28 <USBD_GetConfig>
          break;
 800532e:	e013      	b.n	8005358 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005330:	6839      	ldr	r1, [r7, #0]
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fc2c 	bl	8005b90 <USBD_GetStatus>
          break;
 8005338:	e00e      	b.n	8005358 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800533a:	6839      	ldr	r1, [r7, #0]
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fc5a 	bl	8005bf6 <USBD_SetFeature>
          break;
 8005342:	e009      	b.n	8005358 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005344:	6839      	ldr	r1, [r7, #0]
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fc69 	bl	8005c1e <USBD_ClrFeature>
          break;
 800534c:	e004      	b.n	8005358 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800534e:	6839      	ldr	r1, [r7, #0]
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 fcc1 	bl	8005cd8 <USBD_CtlError>
          break;
 8005356:	bf00      	nop
      }
      break;
 8005358:	e004      	b.n	8005364 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800535a:	6839      	ldr	r1, [r7, #0]
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fcbb 	bl	8005cd8 <USBD_CtlError>
      break;
 8005362:	bf00      	nop
  }

  return ret;
 8005364:	7bfb      	ldrb	r3, [r7, #15]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop

08005370 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005386:	2b20      	cmp	r3, #32
 8005388:	d003      	beq.n	8005392 <USBD_StdItfReq+0x22>
 800538a:	2b40      	cmp	r3, #64	; 0x40
 800538c:	d001      	beq.n	8005392 <USBD_StdItfReq+0x22>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d12a      	bne.n	80053e8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005398:	3b01      	subs	r3, #1
 800539a:	2b02      	cmp	r3, #2
 800539c:	d81d      	bhi.n	80053da <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	889b      	ldrh	r3, [r3, #4]
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d813      	bhi.n	80053d0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	6839      	ldr	r1, [r7, #0]
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	4798      	blx	r3
 80053b6:	4603      	mov	r3, r0
 80053b8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	88db      	ldrh	r3, [r3, #6]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d110      	bne.n	80053e4 <USBD_StdItfReq+0x74>
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10d      	bne.n	80053e4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fd4d 	bl	8005e68 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80053ce:	e009      	b.n	80053e4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80053d0:	6839      	ldr	r1, [r7, #0]
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fc80 	bl	8005cd8 <USBD_CtlError>
          break;
 80053d8:	e004      	b.n	80053e4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80053da:	6839      	ldr	r1, [r7, #0]
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fc7b 	bl	8005cd8 <USBD_CtlError>
          break;
 80053e2:	e000      	b.n	80053e6 <USBD_StdItfReq+0x76>
          break;
 80053e4:	bf00      	nop
      }
      break;
 80053e6:	e004      	b.n	80053f2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80053e8:	6839      	ldr	r1, [r7, #0]
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fc74 	bl	8005cd8 <USBD_CtlError>
      break;
 80053f0:	bf00      	nop
  }

  return USBD_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005406:	2300      	movs	r3, #0
 8005408:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	889b      	ldrh	r3, [r3, #4]
 800540e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005418:	2b20      	cmp	r3, #32
 800541a:	d004      	beq.n	8005426 <USBD_StdEPReq+0x2a>
 800541c:	2b40      	cmp	r3, #64	; 0x40
 800541e:	d002      	beq.n	8005426 <USBD_StdEPReq+0x2a>
 8005420:	2b00      	cmp	r3, #0
 8005422:	d008      	beq.n	8005436 <USBD_StdEPReq+0x3a>
 8005424:	e13d      	b.n	80056a2 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	6839      	ldr	r1, [r7, #0]
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	4798      	blx	r3
      break;
 8005434:	e13a      	b.n	80056ac <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800543e:	2b20      	cmp	r3, #32
 8005440:	d10a      	bne.n	8005458 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	6839      	ldr	r1, [r7, #0]
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	4798      	blx	r3
 8005450:	4603      	mov	r3, r0
 8005452:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	e12a      	b.n	80056ae <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	785b      	ldrb	r3, [r3, #1]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d03e      	beq.n	80054de <USBD_StdEPReq+0xe2>
 8005460:	2b03      	cmp	r3, #3
 8005462:	d002      	beq.n	800546a <USBD_StdEPReq+0x6e>
 8005464:	2b00      	cmp	r3, #0
 8005466:	d070      	beq.n	800554a <USBD_StdEPReq+0x14e>
 8005468:	e115      	b.n	8005696 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005470:	2b02      	cmp	r3, #2
 8005472:	d002      	beq.n	800547a <USBD_StdEPReq+0x7e>
 8005474:	2b03      	cmp	r3, #3
 8005476:	d015      	beq.n	80054a4 <USBD_StdEPReq+0xa8>
 8005478:	e02b      	b.n	80054d2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800547a:	7bbb      	ldrb	r3, [r7, #14]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00c      	beq.n	800549a <USBD_StdEPReq+0x9e>
 8005480:	7bbb      	ldrb	r3, [r7, #14]
 8005482:	2b80      	cmp	r3, #128	; 0x80
 8005484:	d009      	beq.n	800549a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005486:	7bbb      	ldrb	r3, [r7, #14]
 8005488:	4619      	mov	r1, r3
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f001 f994 	bl	80067b8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005490:	2180      	movs	r1, #128	; 0x80
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f001 f990 	bl	80067b8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005498:	e020      	b.n	80054dc <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800549a:	6839      	ldr	r1, [r7, #0]
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fc1b 	bl	8005cd8 <USBD_CtlError>
              break;
 80054a2:	e01b      	b.n	80054dc <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	885b      	ldrh	r3, [r3, #2]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10e      	bne.n	80054ca <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80054ac:	7bbb      	ldrb	r3, [r7, #14]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00b      	beq.n	80054ca <USBD_StdEPReq+0xce>
 80054b2:	7bbb      	ldrb	r3, [r7, #14]
 80054b4:	2b80      	cmp	r3, #128	; 0x80
 80054b6:	d008      	beq.n	80054ca <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	88db      	ldrh	r3, [r3, #6]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d104      	bne.n	80054ca <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80054c0:	7bbb      	ldrb	r3, [r7, #14]
 80054c2:	4619      	mov	r1, r3
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f001 f977 	bl	80067b8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fccc 	bl	8005e68 <USBD_CtlSendStatus>

              break;
 80054d0:	e004      	b.n	80054dc <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80054d2:	6839      	ldr	r1, [r7, #0]
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fbff 	bl	8005cd8 <USBD_CtlError>
              break;
 80054da:	bf00      	nop
          }
          break;
 80054dc:	e0e0      	b.n	80056a0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d002      	beq.n	80054ee <USBD_StdEPReq+0xf2>
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	d015      	beq.n	8005518 <USBD_StdEPReq+0x11c>
 80054ec:	e026      	b.n	800553c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80054ee:	7bbb      	ldrb	r3, [r7, #14]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00c      	beq.n	800550e <USBD_StdEPReq+0x112>
 80054f4:	7bbb      	ldrb	r3, [r7, #14]
 80054f6:	2b80      	cmp	r3, #128	; 0x80
 80054f8:	d009      	beq.n	800550e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80054fa:	7bbb      	ldrb	r3, [r7, #14]
 80054fc:	4619      	mov	r1, r3
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f001 f95a 	bl	80067b8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005504:	2180      	movs	r1, #128	; 0x80
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f001 f956 	bl	80067b8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800550c:	e01c      	b.n	8005548 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800550e:	6839      	ldr	r1, [r7, #0]
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fbe1 	bl	8005cd8 <USBD_CtlError>
              break;
 8005516:	e017      	b.n	8005548 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	885b      	ldrh	r3, [r3, #2]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d112      	bne.n	8005546 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005520:	7bbb      	ldrb	r3, [r7, #14]
 8005522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800552a:	7bbb      	ldrb	r3, [r7, #14]
 800552c:	4619      	mov	r1, r3
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f001 f961 	bl	80067f6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fc97 	bl	8005e68 <USBD_CtlSendStatus>
              }
              break;
 800553a:	e004      	b.n	8005546 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800553c:	6839      	ldr	r1, [r7, #0]
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fbca 	bl	8005cd8 <USBD_CtlError>
              break;
 8005544:	e000      	b.n	8005548 <USBD_StdEPReq+0x14c>
              break;
 8005546:	bf00      	nop
          }
          break;
 8005548:	e0aa      	b.n	80056a0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005550:	2b02      	cmp	r3, #2
 8005552:	d002      	beq.n	800555a <USBD_StdEPReq+0x15e>
 8005554:	2b03      	cmp	r3, #3
 8005556:	d032      	beq.n	80055be <USBD_StdEPReq+0x1c2>
 8005558:	e097      	b.n	800568a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800555a:	7bbb      	ldrb	r3, [r7, #14]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d007      	beq.n	8005570 <USBD_StdEPReq+0x174>
 8005560:	7bbb      	ldrb	r3, [r7, #14]
 8005562:	2b80      	cmp	r3, #128	; 0x80
 8005564:	d004      	beq.n	8005570 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005566:	6839      	ldr	r1, [r7, #0]
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fbb5 	bl	8005cd8 <USBD_CtlError>
                break;
 800556e:	e091      	b.n	8005694 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005574:	2b00      	cmp	r3, #0
 8005576:	da0b      	bge.n	8005590 <USBD_StdEPReq+0x194>
 8005578:	7bbb      	ldrb	r3, [r7, #14]
 800557a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800557e:	4613      	mov	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	3310      	adds	r3, #16
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	4413      	add	r3, r2
 800558c:	3304      	adds	r3, #4
 800558e:	e00b      	b.n	80055a8 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005590:	7bbb      	ldrb	r3, [r7, #14]
 8005592:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005596:	4613      	mov	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	4413      	add	r3, r2
 80055a6:	3304      	adds	r3, #4
 80055a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2202      	movs	r2, #2
 80055b4:	4619      	mov	r1, r3
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fbf8 	bl	8005dac <USBD_CtlSendData>
              break;
 80055bc:	e06a      	b.n	8005694 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80055be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	da11      	bge.n	80055ea <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80055c6:	7bbb      	ldrb	r3, [r7, #14]
 80055c8:	f003 020f 	and.w	r2, r3, #15
 80055cc:	6879      	ldr	r1, [r7, #4]
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	440b      	add	r3, r1
 80055d8:	3318      	adds	r3, #24
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d117      	bne.n	8005610 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80055e0:	6839      	ldr	r1, [r7, #0]
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fb78 	bl	8005cd8 <USBD_CtlError>
                  break;
 80055e8:	e054      	b.n	8005694 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80055ea:	7bbb      	ldrb	r3, [r7, #14]
 80055ec:	f003 020f 	and.w	r2, r3, #15
 80055f0:	6879      	ldr	r1, [r7, #4]
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	440b      	add	r3, r1
 80055fc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d104      	bne.n	8005610 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005606:	6839      	ldr	r1, [r7, #0]
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fb65 	bl	8005cd8 <USBD_CtlError>
                  break;
 800560e:	e041      	b.n	8005694 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005614:	2b00      	cmp	r3, #0
 8005616:	da0b      	bge.n	8005630 <USBD_StdEPReq+0x234>
 8005618:	7bbb      	ldrb	r3, [r7, #14]
 800561a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800561e:	4613      	mov	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4413      	add	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	3310      	adds	r3, #16
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	4413      	add	r3, r2
 800562c:	3304      	adds	r3, #4
 800562e:	e00b      	b.n	8005648 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005630:	7bbb      	ldrb	r3, [r7, #14]
 8005632:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	4413      	add	r3, r2
 8005646:	3304      	adds	r3, #4
 8005648:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800564a:	7bbb      	ldrb	r3, [r7, #14]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <USBD_StdEPReq+0x25a>
 8005650:	7bbb      	ldrb	r3, [r7, #14]
 8005652:	2b80      	cmp	r3, #128	; 0x80
 8005654:	d103      	bne.n	800565e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	e00e      	b.n	800567c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800565e:	7bbb      	ldrb	r3, [r7, #14]
 8005660:	4619      	mov	r1, r3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f001 f8e6 	bl	8006834 <USBD_LL_IsStallEP>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	2201      	movs	r2, #1
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	e002      	b.n	800567c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2202      	movs	r2, #2
 8005680:	4619      	mov	r1, r3
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fb92 	bl	8005dac <USBD_CtlSendData>
              break;
 8005688:	e004      	b.n	8005694 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800568a:	6839      	ldr	r1, [r7, #0]
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fb23 	bl	8005cd8 <USBD_CtlError>
              break;
 8005692:	bf00      	nop
          }
          break;
 8005694:	e004      	b.n	80056a0 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fb1d 	bl	8005cd8 <USBD_CtlError>
          break;
 800569e:	bf00      	nop
      }
      break;
 80056a0:	e004      	b.n	80056ac <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80056a2:	6839      	ldr	r1, [r7, #0]
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fb17 	bl	8005cd8 <USBD_CtlError>
      break;
 80056aa:	bf00      	nop
  }

  return ret;
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	885b      	ldrh	r3, [r3, #2]
 80056d2:	0a1b      	lsrs	r3, r3, #8
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	3b01      	subs	r3, #1
 80056d8:	2b06      	cmp	r3, #6
 80056da:	f200 8128 	bhi.w	800592e <USBD_GetDescriptor+0x276>
 80056de:	a201      	add	r2, pc, #4	; (adr r2, 80056e4 <USBD_GetDescriptor+0x2c>)
 80056e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e4:	08005701 	.word	0x08005701
 80056e8:	08005719 	.word	0x08005719
 80056ec:	08005759 	.word	0x08005759
 80056f0:	0800592f 	.word	0x0800592f
 80056f4:	0800592f 	.word	0x0800592f
 80056f8:	080058cf 	.word	0x080058cf
 80056fc:	080058fb 	.word	0x080058fb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	7c12      	ldrb	r2, [r2, #16]
 800570c:	f107 0108 	add.w	r1, r7, #8
 8005710:	4610      	mov	r0, r2
 8005712:	4798      	blx	r3
 8005714:	60f8      	str	r0, [r7, #12]
      break;
 8005716:	e112      	b.n	800593e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	7c1b      	ldrb	r3, [r3, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10d      	bne.n	800573c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	f107 0208 	add.w	r2, r7, #8
 800572c:	4610      	mov	r0, r2
 800572e:	4798      	blx	r3
 8005730:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3301      	adds	r3, #1
 8005736:	2202      	movs	r2, #2
 8005738:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800573a:	e100      	b.n	800593e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005744:	f107 0208 	add.w	r2, r7, #8
 8005748:	4610      	mov	r0, r2
 800574a:	4798      	blx	r3
 800574c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	3301      	adds	r3, #1
 8005752:	2202      	movs	r2, #2
 8005754:	701a      	strb	r2, [r3, #0]
      break;
 8005756:	e0f2      	b.n	800593e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	885b      	ldrh	r3, [r3, #2]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b05      	cmp	r3, #5
 8005760:	f200 80ac 	bhi.w	80058bc <USBD_GetDescriptor+0x204>
 8005764:	a201      	add	r2, pc, #4	; (adr r2, 800576c <USBD_GetDescriptor+0xb4>)
 8005766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576a:	bf00      	nop
 800576c:	08005785 	.word	0x08005785
 8005770:	080057b9 	.word	0x080057b9
 8005774:	080057ed 	.word	0x080057ed
 8005778:	08005821 	.word	0x08005821
 800577c:	08005855 	.word	0x08005855
 8005780:	08005889 	.word	0x08005889
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00b      	beq.n	80057a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	7c12      	ldrb	r2, [r2, #16]
 800579c:	f107 0108 	add.w	r1, r7, #8
 80057a0:	4610      	mov	r0, r2
 80057a2:	4798      	blx	r3
 80057a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057a6:	e091      	b.n	80058cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057a8:	6839      	ldr	r1, [r7, #0]
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fa94 	bl	8005cd8 <USBD_CtlError>
            err++;
 80057b0:	7afb      	ldrb	r3, [r7, #11]
 80057b2:	3301      	adds	r3, #1
 80057b4:	72fb      	strb	r3, [r7, #11]
          break;
 80057b6:	e089      	b.n	80058cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00b      	beq.n	80057dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	7c12      	ldrb	r2, [r2, #16]
 80057d0:	f107 0108 	add.w	r1, r7, #8
 80057d4:	4610      	mov	r0, r2
 80057d6:	4798      	blx	r3
 80057d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057da:	e077      	b.n	80058cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057dc:	6839      	ldr	r1, [r7, #0]
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fa7a 	bl	8005cd8 <USBD_CtlError>
            err++;
 80057e4:	7afb      	ldrb	r3, [r7, #11]
 80057e6:	3301      	adds	r3, #1
 80057e8:	72fb      	strb	r3, [r7, #11]
          break;
 80057ea:	e06f      	b.n	80058cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00b      	beq.n	8005810 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	7c12      	ldrb	r2, [r2, #16]
 8005804:	f107 0108 	add.w	r1, r7, #8
 8005808:	4610      	mov	r0, r2
 800580a:	4798      	blx	r3
 800580c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800580e:	e05d      	b.n	80058cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005810:	6839      	ldr	r1, [r7, #0]
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fa60 	bl	8005cd8 <USBD_CtlError>
            err++;
 8005818:	7afb      	ldrb	r3, [r7, #11]
 800581a:	3301      	adds	r3, #1
 800581c:	72fb      	strb	r3, [r7, #11]
          break;
 800581e:	e055      	b.n	80058cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00b      	beq.n	8005844 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	7c12      	ldrb	r2, [r2, #16]
 8005838:	f107 0108 	add.w	r1, r7, #8
 800583c:	4610      	mov	r0, r2
 800583e:	4798      	blx	r3
 8005840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005842:	e043      	b.n	80058cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005844:	6839      	ldr	r1, [r7, #0]
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fa46 	bl	8005cd8 <USBD_CtlError>
            err++;
 800584c:	7afb      	ldrb	r3, [r7, #11]
 800584e:	3301      	adds	r3, #1
 8005850:	72fb      	strb	r3, [r7, #11]
          break;
 8005852:	e03b      	b.n	80058cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00b      	beq.n	8005878 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	7c12      	ldrb	r2, [r2, #16]
 800586c:	f107 0108 	add.w	r1, r7, #8
 8005870:	4610      	mov	r0, r2
 8005872:	4798      	blx	r3
 8005874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005876:	e029      	b.n	80058cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005878:	6839      	ldr	r1, [r7, #0]
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fa2c 	bl	8005cd8 <USBD_CtlError>
            err++;
 8005880:	7afb      	ldrb	r3, [r7, #11]
 8005882:	3301      	adds	r3, #1
 8005884:	72fb      	strb	r3, [r7, #11]
          break;
 8005886:	e021      	b.n	80058cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00b      	beq.n	80058ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	7c12      	ldrb	r2, [r2, #16]
 80058a0:	f107 0108 	add.w	r1, r7, #8
 80058a4:	4610      	mov	r0, r2
 80058a6:	4798      	blx	r3
 80058a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80058aa:	e00f      	b.n	80058cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80058ac:	6839      	ldr	r1, [r7, #0]
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fa12 	bl	8005cd8 <USBD_CtlError>
            err++;
 80058b4:	7afb      	ldrb	r3, [r7, #11]
 80058b6:	3301      	adds	r3, #1
 80058b8:	72fb      	strb	r3, [r7, #11]
          break;
 80058ba:	e007      	b.n	80058cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fa0a 	bl	8005cd8 <USBD_CtlError>
          err++;
 80058c4:	7afb      	ldrb	r3, [r7, #11]
 80058c6:	3301      	adds	r3, #1
 80058c8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80058ca:	e038      	b.n	800593e <USBD_GetDescriptor+0x286>
 80058cc:	e037      	b.n	800593e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	7c1b      	ldrb	r3, [r3, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d109      	bne.n	80058ea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058de:	f107 0208 	add.w	r2, r7, #8
 80058e2:	4610      	mov	r0, r2
 80058e4:	4798      	blx	r3
 80058e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80058e8:	e029      	b.n	800593e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80058ea:	6839      	ldr	r1, [r7, #0]
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f9f3 	bl	8005cd8 <USBD_CtlError>
        err++;
 80058f2:	7afb      	ldrb	r3, [r7, #11]
 80058f4:	3301      	adds	r3, #1
 80058f6:	72fb      	strb	r3, [r7, #11]
      break;
 80058f8:	e021      	b.n	800593e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	7c1b      	ldrb	r3, [r3, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10d      	bne.n	800591e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590a:	f107 0208 	add.w	r2, r7, #8
 800590e:	4610      	mov	r0, r2
 8005910:	4798      	blx	r3
 8005912:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	3301      	adds	r3, #1
 8005918:	2207      	movs	r2, #7
 800591a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800591c:	e00f      	b.n	800593e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800591e:	6839      	ldr	r1, [r7, #0]
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f9d9 	bl	8005cd8 <USBD_CtlError>
        err++;
 8005926:	7afb      	ldrb	r3, [r7, #11]
 8005928:	3301      	adds	r3, #1
 800592a:	72fb      	strb	r3, [r7, #11]
      break;
 800592c:	e007      	b.n	800593e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800592e:	6839      	ldr	r1, [r7, #0]
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f9d1 	bl	8005cd8 <USBD_CtlError>
      err++;
 8005936:	7afb      	ldrb	r3, [r7, #11]
 8005938:	3301      	adds	r3, #1
 800593a:	72fb      	strb	r3, [r7, #11]
      break;
 800593c:	bf00      	nop
  }

  if (err != 0U)
 800593e:	7afb      	ldrb	r3, [r7, #11]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d11c      	bne.n	800597e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005944:	893b      	ldrh	r3, [r7, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d011      	beq.n	800596e <USBD_GetDescriptor+0x2b6>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	88db      	ldrh	r3, [r3, #6]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00d      	beq.n	800596e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	88da      	ldrh	r2, [r3, #6]
 8005956:	893b      	ldrh	r3, [r7, #8]
 8005958:	4293      	cmp	r3, r2
 800595a:	bf28      	it	cs
 800595c:	4613      	movcs	r3, r2
 800595e:	b29b      	uxth	r3, r3
 8005960:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005962:	893b      	ldrh	r3, [r7, #8]
 8005964:	461a      	mov	r2, r3
 8005966:	68f9      	ldr	r1, [r7, #12]
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fa1f 	bl	8005dac <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	88db      	ldrh	r3, [r3, #6]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d104      	bne.n	8005980 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fa76 	bl	8005e68 <USBD_CtlSendStatus>
 800597c:	e000      	b.n	8005980 <USBD_GetDescriptor+0x2c8>
    return;
 800597e:	bf00      	nop
    }
  }
}
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop

08005988 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	889b      	ldrh	r3, [r3, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d130      	bne.n	80059fc <USBD_SetAddress+0x74>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	88db      	ldrh	r3, [r3, #6]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d12c      	bne.n	80059fc <USBD_SetAddress+0x74>
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	885b      	ldrh	r3, [r3, #2]
 80059a6:	2b7f      	cmp	r3, #127	; 0x7f
 80059a8:	d828      	bhi.n	80059fc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	885b      	ldrh	r3, [r3, #2]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059bc:	2b03      	cmp	r3, #3
 80059be:	d104      	bne.n	80059ca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80059c0:	6839      	ldr	r1, [r7, #0]
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f988 	bl	8005cd8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059c8:	e01c      	b.n	8005a04 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	7bfa      	ldrb	r2, [r7, #15]
 80059ce:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	4619      	mov	r1, r3
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 ff51 	bl	800687e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fa43 	bl	8005e68 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80059e2:	7bfb      	ldrb	r3, [r7, #15]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d004      	beq.n	80059f2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059f0:	e008      	b.n	8005a04 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059fa:	e003      	b.n	8005a04 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f96a 	bl	8005cd8 <USBD_CtlError>
  }
}
 8005a04:	bf00      	nop
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	885b      	ldrh	r3, [r3, #2]
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	4b41      	ldr	r3, [pc, #260]	; (8005b24 <USBD_SetConfig+0x118>)
 8005a1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005a20:	4b40      	ldr	r3, [pc, #256]	; (8005b24 <USBD_SetConfig+0x118>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d904      	bls.n	8005a32 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005a28:	6839      	ldr	r1, [r7, #0]
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f954 	bl	8005cd8 <USBD_CtlError>
 8005a30:	e075      	b.n	8005b1e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d002      	beq.n	8005a42 <USBD_SetConfig+0x36>
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d023      	beq.n	8005a88 <USBD_SetConfig+0x7c>
 8005a40:	e062      	b.n	8005b08 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005a42:	4b38      	ldr	r3, [pc, #224]	; (8005b24 <USBD_SetConfig+0x118>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d01a      	beq.n	8005a80 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005a4a:	4b36      	ldr	r3, [pc, #216]	; (8005b24 <USBD_SetConfig+0x118>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2203      	movs	r2, #3
 8005a58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005a5c:	4b31      	ldr	r3, [pc, #196]	; (8005b24 <USBD_SetConfig+0x118>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	4619      	mov	r1, r3
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7ff f9f3 	bl	8004e4e <USBD_SetClassConfig>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d104      	bne.n	8005a78 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005a6e:	6839      	ldr	r1, [r7, #0]
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f931 	bl	8005cd8 <USBD_CtlError>
            return;
 8005a76:	e052      	b.n	8005b1e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f9f5 	bl	8005e68 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005a7e:	e04e      	b.n	8005b1e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f9f1 	bl	8005e68 <USBD_CtlSendStatus>
        break;
 8005a86:	e04a      	b.n	8005b1e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005a88:	4b26      	ldr	r3, [pc, #152]	; (8005b24 <USBD_SetConfig+0x118>)
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d112      	bne.n	8005ab6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005a98:	4b22      	ldr	r3, [pc, #136]	; (8005b24 <USBD_SetConfig+0x118>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005aa2:	4b20      	ldr	r3, [pc, #128]	; (8005b24 <USBD_SetConfig+0x118>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7ff f9ef 	bl	8004e8c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f9da 	bl	8005e68 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005ab4:	e033      	b.n	8005b1e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005ab6:	4b1b      	ldr	r3, [pc, #108]	; (8005b24 <USBD_SetConfig+0x118>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d01d      	beq.n	8005b00 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	4619      	mov	r1, r3
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff f9dd 	bl	8004e8c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005ad2:	4b14      	ldr	r3, [pc, #80]	; (8005b24 <USBD_SetConfig+0x118>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005adc:	4b11      	ldr	r3, [pc, #68]	; (8005b24 <USBD_SetConfig+0x118>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7ff f9b3 	bl	8004e4e <USBD_SetClassConfig>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d104      	bne.n	8005af8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005aee:	6839      	ldr	r1, [r7, #0]
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f8f1 	bl	8005cd8 <USBD_CtlError>
            return;
 8005af6:	e012      	b.n	8005b1e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f9b5 	bl	8005e68 <USBD_CtlSendStatus>
        break;
 8005afe:	e00e      	b.n	8005b1e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f9b1 	bl	8005e68 <USBD_CtlSendStatus>
        break;
 8005b06:	e00a      	b.n	8005b1e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005b08:	6839      	ldr	r1, [r7, #0]
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f8e4 	bl	8005cd8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005b10:	4b04      	ldr	r3, [pc, #16]	; (8005b24 <USBD_SetConfig+0x118>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	4619      	mov	r1, r3
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7ff f9b8 	bl	8004e8c <USBD_ClrClassConfig>
        break;
 8005b1c:	bf00      	nop
    }
  }
}
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	200001ac 	.word	0x200001ac

08005b28 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	88db      	ldrh	r3, [r3, #6]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d004      	beq.n	8005b44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005b3a:	6839      	ldr	r1, [r7, #0]
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f8cb 	bl	8005cd8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005b42:	e021      	b.n	8005b88 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	db17      	blt.n	8005b7e <USBD_GetConfig+0x56>
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	dd02      	ble.n	8005b58 <USBD_GetConfig+0x30>
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d00b      	beq.n	8005b6e <USBD_GetConfig+0x46>
 8005b56:	e012      	b.n	8005b7e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	3308      	adds	r3, #8
 8005b62:	2201      	movs	r2, #1
 8005b64:	4619      	mov	r1, r3
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f920 	bl	8005dac <USBD_CtlSendData>
        break;
 8005b6c:	e00c      	b.n	8005b88 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	3304      	adds	r3, #4
 8005b72:	2201      	movs	r2, #1
 8005b74:	4619      	mov	r1, r3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f918 	bl	8005dac <USBD_CtlSendData>
        break;
 8005b7c:	e004      	b.n	8005b88 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8005b7e:	6839      	ldr	r1, [r7, #0]
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f8a9 	bl	8005cd8 <USBD_CtlError>
        break;
 8005b86:	bf00      	nop
}
 8005b88:	bf00      	nop
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d81e      	bhi.n	8005be4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	88db      	ldrh	r3, [r3, #6]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d004      	beq.n	8005bb8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005bae:	6839      	ldr	r1, [r7, #0]
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f891 	bl	8005cd8 <USBD_CtlError>
        break;
 8005bb6:	e01a      	b.n	8005bee <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d005      	beq.n	8005bd4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f043 0202 	orr.w	r2, r3, #2
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	330c      	adds	r3, #12
 8005bd8:	2202      	movs	r2, #2
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f8e5 	bl	8005dac <USBD_CtlSendData>
      break;
 8005be2:	e004      	b.n	8005bee <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005be4:	6839      	ldr	r1, [r7, #0]
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f876 	bl	8005cd8 <USBD_CtlError>
      break;
 8005bec:	bf00      	nop
  }
}
 8005bee:	bf00      	nop
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	885b      	ldrh	r3, [r3, #2]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d106      	bne.n	8005c16 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f929 	bl	8005e68 <USBD_CtlSendStatus>
  }
}
 8005c16:	bf00      	nop
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b082      	sub	sp, #8
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d80b      	bhi.n	8005c4c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	885b      	ldrh	r3, [r3, #2]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d10c      	bne.n	8005c56 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f90f 	bl	8005e68 <USBD_CtlSendStatus>
      }
      break;
 8005c4a:	e004      	b.n	8005c56 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005c4c:	6839      	ldr	r1, [r7, #0]
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f842 	bl	8005cd8 <USBD_CtlError>
      break;
 8005c54:	e000      	b.n	8005c58 <USBD_ClrFeature+0x3a>
      break;
 8005c56:	bf00      	nop
  }
}
 8005c58:	bf00      	nop
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	781a      	ldrb	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	785a      	ldrb	r2, [r3, #1]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	3302      	adds	r3, #2
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	3303      	adds	r3, #3
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	021b      	lsls	r3, r3, #8
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	4413      	add	r3, r2
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	3304      	adds	r3, #4
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	3305      	adds	r3, #5
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	021b      	lsls	r3, r3, #8
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	4413      	add	r3, r2
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	3306      	adds	r3, #6
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	3307      	adds	r3, #7
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	80da      	strh	r2, [r3, #6]

}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bc80      	pop	{r7}
 8005cd6:	4770      	bx	lr

08005cd8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005ce2:	2180      	movs	r1, #128	; 0x80
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fd67 	bl	80067b8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005cea:	2100      	movs	r1, #0
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fd63 	bl	80067b8 <USBD_LL_StallEP>
}
 8005cf2:	bf00      	nop
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b086      	sub	sp, #24
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d032      	beq.n	8005d76 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 f834 	bl	8005d7e <USBD_GetLen>
 8005d16:	4603      	mov	r3, r0
 8005d18:	3301      	adds	r3, #1
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005d24:	7dfb      	ldrb	r3, [r7, #23]
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	75fa      	strb	r2, [r7, #23]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	4413      	add	r3, r2
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	7812      	ldrb	r2, [r2, #0]
 8005d34:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005d36:	7dfb      	ldrb	r3, [r7, #23]
 8005d38:	1c5a      	adds	r2, r3, #1
 8005d3a:	75fa      	strb	r2, [r7, #23]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	4413      	add	r3, r2
 8005d42:	2203      	movs	r2, #3
 8005d44:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005d46:	e012      	b.n	8005d6e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	60fa      	str	r2, [r7, #12]
 8005d4e:	7dfa      	ldrb	r2, [r7, #23]
 8005d50:	1c51      	adds	r1, r2, #1
 8005d52:	75f9      	strb	r1, [r7, #23]
 8005d54:	4611      	mov	r1, r2
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	440a      	add	r2, r1
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	75fa      	strb	r2, [r7, #23]
 8005d64:	461a      	mov	r2, r3
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	4413      	add	r3, r2
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1e8      	bne.n	8005d48 <USBD_GetString+0x4e>
    }
  }
}
 8005d76:	bf00      	nop
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b085      	sub	sp, #20
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005d8a:	e005      	b.n	8005d98 <USBD_GetLen+0x1a>
  {
    len++;
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3301      	adds	r3, #1
 8005d96:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1f5      	bne.n	8005d8c <USBD_GetLen+0xe>
  }

  return len;
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bc80      	pop	{r7}
 8005daa:	4770      	bx	lr

08005dac <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	4613      	mov	r3, r2
 8005db8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005dc2:	88fa      	ldrh	r2, [r7, #6]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005dc8:	88fa      	ldrh	r2, [r7, #6]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005dce:	88fb      	ldrh	r3, [r7, #6]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 fd71 	bl	80068bc <USBD_LL_Transmit>

  return USBD_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	4613      	mov	r3, r2
 8005df0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	2100      	movs	r1, #0
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 fd5f 	bl	80068bc <USBD_LL_Transmit>

  return USBD_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	4613      	mov	r3, r2
 8005e14:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2203      	movs	r2, #3
 8005e1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005e1e:	88fa      	ldrh	r2, [r7, #6]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005e26:	88fa      	ldrh	r2, [r7, #6]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e2e:	88fb      	ldrh	r3, [r7, #6]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	2100      	movs	r1, #0
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 fd64 	bl	8006902 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e52:	88fb      	ldrh	r3, [r7, #6]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	2100      	movs	r1, #0
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 fd52 	bl	8006902 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2204      	movs	r2, #4
 8005e74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005e78:	2300      	movs	r3, #0
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fd1c 	bl	80068bc <USBD_LL_Transmit>

  return USBD_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b082      	sub	sp, #8
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2205      	movs	r2, #5
 8005e9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fd2c 	bl	8006902 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	4912      	ldr	r1, [pc, #72]	; (8005f04 <MX_USB_DEVICE_Init+0x50>)
 8005ebc:	4812      	ldr	r0, [pc, #72]	; (8005f08 <MX_USB_DEVICE_Init+0x54>)
 8005ebe:	f7fe ff6c 	bl	8004d9a <USBD_Init>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005ec8:	f7fb f992 	bl	80011f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005ecc:	490f      	ldr	r1, [pc, #60]	; (8005f0c <MX_USB_DEVICE_Init+0x58>)
 8005ece:	480e      	ldr	r0, [pc, #56]	; (8005f08 <MX_USB_DEVICE_Init+0x54>)
 8005ed0:	f7fe ff8e 	bl	8004df0 <USBD_RegisterClass>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005eda:	f7fb f989 	bl	80011f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005ede:	490c      	ldr	r1, [pc, #48]	; (8005f10 <MX_USB_DEVICE_Init+0x5c>)
 8005ee0:	4809      	ldr	r0, [pc, #36]	; (8005f08 <MX_USB_DEVICE_Init+0x54>)
 8005ee2:	f7fe febf 	bl	8004c64 <USBD_CDC_RegisterInterface>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005eec:	f7fb f980 	bl	80011f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005ef0:	4805      	ldr	r0, [pc, #20]	; (8005f08 <MX_USB_DEVICE_Init+0x54>)
 8005ef2:	f7fe ff96 	bl	8004e22 <USBD_Start>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005efc:	f7fb f978 	bl	80011f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005f00:	bf00      	nop
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	20000134 	.word	0x20000134
 8005f08:	20000724 	.word	0x20000724
 8005f0c:	20000018 	.word	0x20000018
 8005f10:	2000011c 	.word	0x2000011c

08005f14 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005f18:	2200      	movs	r2, #0
 8005f1a:	4905      	ldr	r1, [pc, #20]	; (8005f30 <CDC_Init_FS+0x1c>)
 8005f1c:	4805      	ldr	r0, [pc, #20]	; (8005f34 <CDC_Init_FS+0x20>)
 8005f1e:	f7fe feb7 	bl	8004c90 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005f22:	4905      	ldr	r1, [pc, #20]	; (8005f38 <CDC_Init_FS+0x24>)
 8005f24:	4803      	ldr	r0, [pc, #12]	; (8005f34 <CDC_Init_FS+0x20>)
 8005f26:	f7fe fecc 	bl	8004cc2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005f2a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	20000dd4 	.word	0x20000dd4
 8005f34:	20000724 	.word	0x20000724
 8005f38:	200009ec 	.word	0x200009ec

08005f3c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005f40:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bc80      	pop	{r7}
 8005f48:	4770      	bx	lr
	...

08005f4c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	4603      	mov	r3, r0
 8005f54:	6039      	str	r1, [r7, #0]
 8005f56:	71fb      	strb	r3, [r7, #7]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005f5c:	79fb      	ldrb	r3, [r7, #7]
 8005f5e:	2b23      	cmp	r3, #35	; 0x23
 8005f60:	d85c      	bhi.n	800601c <CDC_Control_FS+0xd0>
 8005f62:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <CDC_Control_FS+0x1c>)
 8005f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f68:	0800601d 	.word	0x0800601d
 8005f6c:	0800601d 	.word	0x0800601d
 8005f70:	0800601d 	.word	0x0800601d
 8005f74:	0800601d 	.word	0x0800601d
 8005f78:	0800601d 	.word	0x0800601d
 8005f7c:	0800601d 	.word	0x0800601d
 8005f80:	0800601d 	.word	0x0800601d
 8005f84:	0800601d 	.word	0x0800601d
 8005f88:	0800601d 	.word	0x0800601d
 8005f8c:	0800601d 	.word	0x0800601d
 8005f90:	0800601d 	.word	0x0800601d
 8005f94:	0800601d 	.word	0x0800601d
 8005f98:	0800601d 	.word	0x0800601d
 8005f9c:	0800601d 	.word	0x0800601d
 8005fa0:	0800601d 	.word	0x0800601d
 8005fa4:	0800601d 	.word	0x0800601d
 8005fa8:	0800601d 	.word	0x0800601d
 8005fac:	0800601d 	.word	0x0800601d
 8005fb0:	0800601d 	.word	0x0800601d
 8005fb4:	0800601d 	.word	0x0800601d
 8005fb8:	0800601d 	.word	0x0800601d
 8005fbc:	0800601d 	.word	0x0800601d
 8005fc0:	0800601d 	.word	0x0800601d
 8005fc4:	0800601d 	.word	0x0800601d
 8005fc8:	0800601d 	.word	0x0800601d
 8005fcc:	0800601d 	.word	0x0800601d
 8005fd0:	0800601d 	.word	0x0800601d
 8005fd4:	0800601d 	.word	0x0800601d
 8005fd8:	0800601d 	.word	0x0800601d
 8005fdc:	0800601d 	.word	0x0800601d
 8005fe0:	0800601d 	.word	0x0800601d
 8005fe4:	0800601d 	.word	0x0800601d
 8005fe8:	08005ff9 	.word	0x08005ff9
 8005fec:	0800600b 	.word	0x0800600b
 8005ff0:	0800601d 	.word	0x0800601d
 8005ff4:	0800601d 	.word	0x0800601d
  /*******************************************************************************/
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit
        = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };

    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8005ff8:	4b0c      	ldr	r3, [pc, #48]	; (800602c <CDC_Control_FS+0xe0>)
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	6810      	ldr	r0, [r2, #0]
 8005ffe:	6018      	str	r0, [r3, #0]
 8006000:	8891      	ldrh	r1, [r2, #4]
 8006002:	7992      	ldrb	r2, [r2, #6]
 8006004:	8099      	strh	r1, [r3, #4]
 8006006:	719a      	strb	r2, [r3, #6]
    break;
 8006008:	e009      	b.n	800601e <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	4a07      	ldr	r2, [pc, #28]	; (800602c <CDC_Control_FS+0xe0>)
 800600e:	6810      	ldr	r0, [r2, #0]
 8006010:	6018      	str	r0, [r3, #0]
 8006012:	8891      	ldrh	r1, [r2, #4]
 8006014:	7992      	ldrb	r2, [r2, #6]
 8006016:	8099      	strh	r1, [r3, #4]
 8006018:	719a      	strb	r2, [r3, #6]
    break;
 800601a:	e000      	b.n	800601e <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800601c:	bf00      	nop
  }

  return (USBD_OK);
 800601e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006020:	4618      	mov	r0, r3
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	bc80      	pop	{r7}
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	2000012c 	.word	0x2000012c

08006030 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	4880      	ldr	r0, [pc, #512]	; (8006240 <CDC_Receive_FS+0x210>)
 800603e:	f7fe fe40 	bl	8004cc2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006042:	487f      	ldr	r0, [pc, #508]	; (8006240 <CDC_Receive_FS+0x210>)
 8006044:	f7fe fe7f 	bl	8004d46 <USBD_CDC_ReceivePacket>

  if (next_block == 1)
 8006048:	4b7e      	ldr	r3, [pc, #504]	; (8006244 <CDC_Receive_FS+0x214>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d122      	bne.n	8006096 <CDC_Receive_FS+0x66>
	{
		copy=0;
 8006050:	4b7d      	ldr	r3, [pc, #500]	; (8006248 <CDC_Receive_FS+0x218>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]
		while (copy < 64)
 8006056:	e013      	b.n	8006080 <CDC_Receive_FS+0x50>
		{
			write_buffer[buffer_write_addr] = Buf[copy];
 8006058:	4b7b      	ldr	r3, [pc, #492]	; (8006248 <CDC_Receive_FS+0x218>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	461a      	mov	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	441a      	add	r2, r3
 8006062:	4b7a      	ldr	r3, [pc, #488]	; (800624c <CDC_Receive_FS+0x21c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	7811      	ldrb	r1, [r2, #0]
 8006068:	4a79      	ldr	r2, [pc, #484]	; (8006250 <CDC_Receive_FS+0x220>)
 800606a:	54d1      	strb	r1, [r2, r3]
			//write_buffer[copy] = Buf[copy];
			copy=copy+1;
 800606c:	4b76      	ldr	r3, [pc, #472]	; (8006248 <CDC_Receive_FS+0x218>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3301      	adds	r3, #1
 8006072:	4a75      	ldr	r2, [pc, #468]	; (8006248 <CDC_Receive_FS+0x218>)
 8006074:	6013      	str	r3, [r2, #0]
			buffer_write_addr=buffer_write_addr+1;
 8006076:	4b75      	ldr	r3, [pc, #468]	; (800624c <CDC_Receive_FS+0x21c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3301      	adds	r3, #1
 800607c:	4a73      	ldr	r2, [pc, #460]	; (800624c <CDC_Receive_FS+0x21c>)
 800607e:	6013      	str	r3, [r2, #0]
		while (copy < 64)
 8006080:	4b71      	ldr	r3, [pc, #452]	; (8006248 <CDC_Receive_FS+0x218>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b3f      	cmp	r3, #63	; 0x3f
 8006086:	dde7      	ble.n	8006058 <CDC_Receive_FS+0x28>
		}
		ready = set;
 8006088:	4b72      	ldr	r3, [pc, #456]	; (8006254 <CDC_Receive_FS+0x224>)
 800608a:	2201      	movs	r2, #1
 800608c:	601a      	str	r2, [r3, #0]
		next_block = reset;
 800608e:	4b6d      	ldr	r3, [pc, #436]	; (8006244 <CDC_Receive_FS+0x214>)
 8006090:	2200      	movs	r2, #0
 8006092:	601a      	str	r2, [r3, #0]
 8006094:	e0ba      	b.n	800620c <CDC_Receive_FS+0x1dc>
	}


  else if (mode_control == nullState_mode && Buf[0] == 'r')
 8006096:	4b70      	ldr	r3, [pc, #448]	; (8006258 <CDC_Receive_FS+0x228>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d131      	bne.n	8006102 <CDC_Receive_FS+0xd2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	2b72      	cmp	r3, #114	; 0x72
 80060a4:	d12d      	bne.n	8006102 <CDC_Receive_FS+0xd2>
	{
		if (Buf[1] == 's')
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	3301      	adds	r3, #1
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b73      	cmp	r3, #115	; 0x73
 80060ae:	d112      	bne.n	80060d6 <CDC_Receive_FS+0xa6>
		{
			mode_control = readBuffer_mode;
 80060b0:	4b69      	ldr	r3, [pc, #420]	; (8006258 <CDC_Receive_FS+0x228>)
 80060b2:	220a      	movs	r2, #10
 80060b4:	601a      	str	r2, [r3, #0]
			if (Buf[2] == 'f')
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	3302      	adds	r3, #2
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	2b66      	cmp	r3, #102	; 0x66
 80060be:	d102      	bne.n	80060c6 <CDC_Receive_FS+0x96>
			{
				memory_mode = flash;
 80060c0:	4b66      	ldr	r3, [pc, #408]	; (800625c <CDC_Receive_FS+0x22c>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	601a      	str	r2, [r3, #0]
			}
			if (Buf[2] == 's')
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3302      	adds	r3, #2
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	2b73      	cmp	r3, #115	; 0x73
 80060ce:	d102      	bne.n	80060d6 <CDC_Receive_FS+0xa6>
			{
				memory_mode = feram;
 80060d0:	4b62      	ldr	r3, [pc, #392]	; (800625c <CDC_Receive_FS+0x22c>)
 80060d2:	2201      	movs	r2, #1
 80060d4:	601a      	str	r2, [r3, #0]
			}
		}
		if (Buf[1] == 'a')
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	3301      	adds	r3, #1
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	2b61      	cmp	r3, #97	; 0x61
 80060de:	f040 8095 	bne.w	800620c <CDC_Receive_FS+0x1dc>
		{
			mode_control = readAddr_mode;
 80060e2:	4b5d      	ldr	r3, [pc, #372]	; (8006258 <CDC_Receive_FS+0x228>)
 80060e4:	220c      	movs	r2, #12
 80060e6:	601a      	str	r2, [r3, #0]
			mem_buffer[1] = Buf[2];
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	789a      	ldrb	r2, [r3, #2]
 80060ec:	4b5c      	ldr	r3, [pc, #368]	; (8006260 <CDC_Receive_FS+0x230>)
 80060ee:	705a      	strb	r2, [r3, #1]
			mem_buffer[2] = Buf[3];
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	78da      	ldrb	r2, [r3, #3]
 80060f4:	4b5a      	ldr	r3, [pc, #360]	; (8006260 <CDC_Receive_FS+0x230>)
 80060f6:	709a      	strb	r2, [r3, #2]
			mem_buffer[3] = Buf[4];
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	791a      	ldrb	r2, [r3, #4]
 80060fc:	4b58      	ldr	r3, [pc, #352]	; (8006260 <CDC_Receive_FS+0x230>)
 80060fe:	70da      	strb	r2, [r3, #3]
		if (Buf[1] == 'a')
 8006100:	e084      	b.n	800620c <CDC_Receive_FS+0x1dc>
		}
	}

  else if (mode_control == nullState_mode && Buf[0] == 'w')
 8006102:	4b55      	ldr	r3, [pc, #340]	; (8006258 <CDC_Receive_FS+0x228>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d148      	bne.n	800619c <CDC_Receive_FS+0x16c>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	2b77      	cmp	r3, #119	; 0x77
 8006110:	d144      	bne.n	800619c <CDC_Receive_FS+0x16c>
	{
		if (Buf[1] == 'a')
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3301      	adds	r3, #1
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	2b61      	cmp	r3, #97	; 0x61
 800611a:	d116      	bne.n	800614a <CDC_Receive_FS+0x11a>
		{
		mode_control = writeFlashAddr_mode;
 800611c:	4b4e      	ldr	r3, [pc, #312]	; (8006258 <CDC_Receive_FS+0x228>)
 800611e:	2217      	movs	r2, #23
 8006120:	601a      	str	r2, [r3, #0]
		mem_buffer[1] = Buf[2];
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	789a      	ldrb	r2, [r3, #2]
 8006126:	4b4e      	ldr	r3, [pc, #312]	; (8006260 <CDC_Receive_FS+0x230>)
 8006128:	705a      	strb	r2, [r3, #1]
		mem_buffer[2] = Buf[3];
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	78da      	ldrb	r2, [r3, #3]
 800612e:	4b4c      	ldr	r3, [pc, #304]	; (8006260 <CDC_Receive_FS+0x230>)
 8006130:	709a      	strb	r2, [r3, #2]
		mem_buffer[3] = Buf[4];
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	791a      	ldrb	r2, [r3, #4]
 8006136:	4b4a      	ldr	r3, [pc, #296]	; (8006260 <CDC_Receive_FS+0x230>)
 8006138:	70da      	strb	r2, [r3, #3]
		mem_buffer[4] = Buf[5];
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	795a      	ldrb	r2, [r3, #5]
 800613e:	4b48      	ldr	r3, [pc, #288]	; (8006260 <CDC_Receive_FS+0x230>)
 8006140:	711a      	strb	r2, [r3, #4]
		mem_buffer[5] = Buf[6];
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	799a      	ldrb	r2, [r3, #6]
 8006146:	4b46      	ldr	r3, [pc, #280]	; (8006260 <CDC_Receive_FS+0x230>)
 8006148:	715a      	strb	r2, [r3, #5]
		}
		if (Buf[1] == 'f')
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3301      	adds	r3, #1
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	2b66      	cmp	r3, #102	; 0x66
 8006152:	d10e      	bne.n	8006172 <CDC_Receive_FS+0x142>
		{
		mode_control = writeFeram_mode;
 8006154:	4b40      	ldr	r3, [pc, #256]	; (8006258 <CDC_Receive_FS+0x228>)
 8006156:	2216      	movs	r2, #22
 8006158:	601a      	str	r2, [r3, #0]
		mem_buffer[1] = Buf[2];
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	789a      	ldrb	r2, [r3, #2]
 800615e:	4b40      	ldr	r3, [pc, #256]	; (8006260 <CDC_Receive_FS+0x230>)
 8006160:	705a      	strb	r2, [r3, #1]
		mem_buffer[2] = Buf[3];
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	78da      	ldrb	r2, [r3, #3]
 8006166:	4b3e      	ldr	r3, [pc, #248]	; (8006260 <CDC_Receive_FS+0x230>)
 8006168:	709a      	strb	r2, [r3, #2]
		mem_buffer[3] = Buf[4];
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	791a      	ldrb	r2, [r3, #4]
 800616e:	4b3c      	ldr	r3, [pc, #240]	; (8006260 <CDC_Receive_FS+0x230>)
 8006170:	70da      	strb	r2, [r3, #3]
		}
		if (Buf[1] == 'n')
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	3301      	adds	r3, #1
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b6e      	cmp	r3, #110	; 0x6e
 800617a:	d147      	bne.n	800620c <CDC_Receive_FS+0x1dc>
		{
		mode_control = writeFlash_mode;
 800617c:	4b36      	ldr	r3, [pc, #216]	; (8006258 <CDC_Receive_FS+0x228>)
 800617e:	2219      	movs	r2, #25
 8006180:	601a      	str	r2, [r3, #0]
		mem_buffer[1] = Buf[2];
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	789a      	ldrb	r2, [r3, #2]
 8006186:	4b36      	ldr	r3, [pc, #216]	; (8006260 <CDC_Receive_FS+0x230>)
 8006188:	705a      	strb	r2, [r3, #1]
		mem_buffer[2] = Buf[3];
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	78da      	ldrb	r2, [r3, #3]
 800618e:	4b34      	ldr	r3, [pc, #208]	; (8006260 <CDC_Receive_FS+0x230>)
 8006190:	709a      	strb	r2, [r3, #2]
		mem_buffer[3] = Buf[4];
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	791a      	ldrb	r2, [r3, #4]
 8006196:	4b32      	ldr	r3, [pc, #200]	; (8006260 <CDC_Receive_FS+0x230>)
 8006198:	70da      	strb	r2, [r3, #3]
		if (Buf[1] == 'n')
 800619a:	e037      	b.n	800620c <CDC_Receive_FS+0x1dc>
		}
	}

  else if (mode_control == nullState_mode && Buf[0] == 'd')
 800619c:	4b2e      	ldr	r3, [pc, #184]	; (8006258 <CDC_Receive_FS+0x228>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d11c      	bne.n	80061de <CDC_Receive_FS+0x1ae>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	2b64      	cmp	r3, #100	; 0x64
 80061aa:	d118      	bne.n	80061de <CDC_Receive_FS+0x1ae>
	{
		if (Buf[1] == 'i')
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3301      	adds	r3, #1
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b69      	cmp	r3, #105	; 0x69
 80061b4:	d102      	bne.n	80061bc <CDC_Receive_FS+0x18c>
		{
		mode_control = resetFlash_mode;
 80061b6:	4b28      	ldr	r3, [pc, #160]	; (8006258 <CDC_Receive_FS+0x228>)
 80061b8:	2229      	movs	r2, #41	; 0x29
 80061ba:	601a      	str	r2, [r3, #0]
		}
		if (Buf[1] == 'r')
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3301      	adds	r3, #1
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	2b72      	cmp	r3, #114	; 0x72
 80061c4:	d102      	bne.n	80061cc <CDC_Receive_FS+0x19c>
		{
		mode_control = readSR_mode;
 80061c6:	4b24      	ldr	r3, [pc, #144]	; (8006258 <CDC_Receive_FS+0x228>)
 80061c8:	222a      	movs	r2, #42	; 0x2a
 80061ca:	601a      	str	r2, [r3, #0]
		}
		if (Buf[1] == 'c')
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	3301      	adds	r3, #1
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b63      	cmp	r3, #99	; 0x63
 80061d4:	d11a      	bne.n	800620c <CDC_Receive_FS+0x1dc>
		{
		mode_control = clearSR_mode;
 80061d6:	4b20      	ldr	r3, [pc, #128]	; (8006258 <CDC_Receive_FS+0x228>)
 80061d8:	222b      	movs	r2, #43	; 0x2b
 80061da:	601a      	str	r2, [r3, #0]
		if (Buf[1] == 'c')
 80061dc:	e016      	b.n	800620c <CDC_Receive_FS+0x1dc>
		}
	}

  else if (mode_control == nullState_mode && Buf[0] == 'b')
 80061de:	4b1e      	ldr	r3, [pc, #120]	; (8006258 <CDC_Receive_FS+0x228>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d107      	bne.n	80061f6 <CDC_Receive_FS+0x1c6>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	2b62      	cmp	r3, #98	; 0x62
 80061ec:	d103      	bne.n	80061f6 <CDC_Receive_FS+0x1c6>
	{
		mode_control = erase_mode;
 80061ee:	4b1a      	ldr	r3, [pc, #104]	; (8006258 <CDC_Receive_FS+0x228>)
 80061f0:	221e      	movs	r2, #30
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	e00a      	b.n	800620c <CDC_Receive_FS+0x1dc>
	}

  else if (mode_control == 10)
 80061f6:	4b18      	ldr	r3, [pc, #96]	; (8006258 <CDC_Receive_FS+0x228>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b0a      	cmp	r3, #10
 80061fc:	d106      	bne.n	800620c <CDC_Receive_FS+0x1dc>
	{
		mem_buffer[0] = Buf[0];
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	781a      	ldrb	r2, [r3, #0]
 8006202:	4b17      	ldr	r3, [pc, #92]	; (8006260 <CDC_Receive_FS+0x230>)
 8006204:	701a      	strb	r2, [r3, #0]
		ready = set;
 8006206:	4b13      	ldr	r3, [pc, #76]	; (8006254 <CDC_Receive_FS+0x224>)
 8006208:	2201      	movs	r2, #1
 800620a:	601a      	str	r2, [r3, #0]
	//	next_block = set;
	//	ready = set;
	//}


	if (Buf[0] == 'c')
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b63      	cmp	r3, #99	; 0x63
 8006212:	d105      	bne.n	8006220 <CDC_Receive_FS+0x1f0>
	{
		next_block = set;
 8006214:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <CDC_Receive_FS+0x214>)
 8006216:	2201      	movs	r2, #1
 8006218:	601a      	str	r2, [r3, #0]
		ready = set;
 800621a:	4b0e      	ldr	r3, [pc, #56]	; (8006254 <CDC_Receive_FS+0x224>)
 800621c:	2201      	movs	r2, #1
 800621e:	601a      	str	r2, [r3, #0]
	}
	if (Buf[0] == 'e')
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b65      	cmp	r3, #101	; 0x65
 8006226:	d105      	bne.n	8006234 <CDC_Receive_FS+0x204>
	{
		ready = set;
 8006228:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <CDC_Receive_FS+0x224>)
 800622a:	2201      	movs	r2, #1
 800622c:	601a      	str	r2, [r3, #0]
		mode_control = nullState_mode;
 800622e:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <CDC_Receive_FS+0x228>)
 8006230:	2200      	movs	r2, #0
 8006232:	601a      	str	r2, [r3, #0]
	}

  return (USBD_OK);
 8006234:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006236:	4618      	mov	r0, r3
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	20000724 	.word	0x20000724
 8006244:	200001a4 	.word	0x200001a4
 8006248:	200009e8 	.word	0x200009e8
 800624c:	200003d4 	.word	0x200003d4
 8006250:	20000620 	.word	0x20000620
 8006254:	200001a8 	.word	0x200001a8
 8006258:	200001a0 	.word	0x200001a0
 800625c:	200003d8 	.word	0x200003d8
 8006260:	200003dc 	.word	0x200003dc

08006264 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	460b      	mov	r3, r1
 800626e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006270:	2300      	movs	r3, #0
 8006272:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006274:	4b0d      	ldr	r3, [pc, #52]	; (80062ac <CDC_Transmit_FS+0x48>)
 8006276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800627a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006286:	2301      	movs	r3, #1
 8006288:	e00b      	b.n	80062a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800628a:	887b      	ldrh	r3, [r7, #2]
 800628c:	461a      	mov	r2, r3
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	4806      	ldr	r0, [pc, #24]	; (80062ac <CDC_Transmit_FS+0x48>)
 8006292:	f7fe fcfd 	bl	8004c90 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006296:	4805      	ldr	r0, [pc, #20]	; (80062ac <CDC_Transmit_FS+0x48>)
 8006298:	f7fe fd26 	bl	8004ce8 <USBD_CDC_TransmitPacket>
 800629c:	4603      	mov	r3, r0
 800629e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20000724 	.word	0x20000724

080062b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	4603      	mov	r3, r0
 80062b8:	6039      	str	r1, [r7, #0]
 80062ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2212      	movs	r2, #18
 80062c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80062c2:	4b03      	ldr	r3, [pc, #12]	; (80062d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bc80      	pop	{r7}
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	20000150 	.word	0x20000150

080062d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	4603      	mov	r3, r0
 80062dc:	6039      	str	r1, [r7, #0]
 80062de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2204      	movs	r2, #4
 80062e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80062e6:	4b03      	ldr	r3, [pc, #12]	; (80062f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bc80      	pop	{r7}
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	20000164 	.word	0x20000164

080062f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	4603      	mov	r3, r0
 8006300:	6039      	str	r1, [r7, #0]
 8006302:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006304:	79fb      	ldrb	r3, [r7, #7]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d105      	bne.n	8006316 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	4907      	ldr	r1, [pc, #28]	; (800632c <USBD_FS_ProductStrDescriptor+0x34>)
 800630e:	4808      	ldr	r0, [pc, #32]	; (8006330 <USBD_FS_ProductStrDescriptor+0x38>)
 8006310:	f7ff fcf3 	bl	8005cfa <USBD_GetString>
 8006314:	e004      	b.n	8006320 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	4904      	ldr	r1, [pc, #16]	; (800632c <USBD_FS_ProductStrDescriptor+0x34>)
 800631a:	4805      	ldr	r0, [pc, #20]	; (8006330 <USBD_FS_ProductStrDescriptor+0x38>)
 800631c:	f7ff fced 	bl	8005cfa <USBD_GetString>
  }
  return USBD_StrDesc;
 8006320:	4b02      	ldr	r3, [pc, #8]	; (800632c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	200011bc 	.word	0x200011bc
 8006330:	08006a8c 	.word	0x08006a8c

08006334 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	4603      	mov	r3, r0
 800633c:	6039      	str	r1, [r7, #0]
 800633e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	4904      	ldr	r1, [pc, #16]	; (8006354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006344:	4804      	ldr	r0, [pc, #16]	; (8006358 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006346:	f7ff fcd8 	bl	8005cfa <USBD_GetString>
  return USBD_StrDesc;
 800634a:	4b02      	ldr	r3, [pc, #8]	; (8006354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800634c:	4618      	mov	r0, r3
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	200011bc 	.word	0x200011bc
 8006358:	08006aa4 	.word	0x08006aa4

0800635c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	4603      	mov	r3, r0
 8006364:	6039      	str	r1, [r7, #0]
 8006366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	221a      	movs	r2, #26
 800636c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800636e:	f000 f843 	bl	80063f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006372:	4b02      	ldr	r3, [pc, #8]	; (800637c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	20000168 	.word	0x20000168

08006380 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	4603      	mov	r3, r0
 8006388:	6039      	str	r1, [r7, #0]
 800638a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800638c:	79fb      	ldrb	r3, [r7, #7]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d105      	bne.n	800639e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	4907      	ldr	r1, [pc, #28]	; (80063b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006396:	4808      	ldr	r0, [pc, #32]	; (80063b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006398:	f7ff fcaf 	bl	8005cfa <USBD_GetString>
 800639c:	e004      	b.n	80063a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	4904      	ldr	r1, [pc, #16]	; (80063b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80063a2:	4805      	ldr	r0, [pc, #20]	; (80063b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80063a4:	f7ff fca9 	bl	8005cfa <USBD_GetString>
  }
  return USBD_StrDesc;
 80063a8:	4b02      	ldr	r3, [pc, #8]	; (80063b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	200011bc 	.word	0x200011bc
 80063b8:	08006ab8 	.word	0x08006ab8

080063bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	4603      	mov	r3, r0
 80063c4:	6039      	str	r1, [r7, #0]
 80063c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80063c8:	79fb      	ldrb	r3, [r7, #7]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d105      	bne.n	80063da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	4907      	ldr	r1, [pc, #28]	; (80063f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80063d2:	4808      	ldr	r0, [pc, #32]	; (80063f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80063d4:	f7ff fc91 	bl	8005cfa <USBD_GetString>
 80063d8:	e004      	b.n	80063e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	4904      	ldr	r1, [pc, #16]	; (80063f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80063de:	4805      	ldr	r0, [pc, #20]	; (80063f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80063e0:	f7ff fc8b 	bl	8005cfa <USBD_GetString>
  }
  return USBD_StrDesc;
 80063e4:	4b02      	ldr	r3, [pc, #8]	; (80063f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	200011bc 	.word	0x200011bc
 80063f4:	08006ac4 	.word	0x08006ac4

080063f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80063fe:	4b0f      	ldr	r3, [pc, #60]	; (800643c <Get_SerialNum+0x44>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006404:	4b0e      	ldr	r3, [pc, #56]	; (8006440 <Get_SerialNum+0x48>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800640a:	4b0e      	ldr	r3, [pc, #56]	; (8006444 <Get_SerialNum+0x4c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4413      	add	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d009      	beq.n	8006432 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800641e:	2208      	movs	r2, #8
 8006420:	4909      	ldr	r1, [pc, #36]	; (8006448 <Get_SerialNum+0x50>)
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 f814 	bl	8006450 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006428:	2204      	movs	r2, #4
 800642a:	4908      	ldr	r1, [pc, #32]	; (800644c <Get_SerialNum+0x54>)
 800642c:	68b8      	ldr	r0, [r7, #8]
 800642e:	f000 f80f 	bl	8006450 <IntToUnicode>
  }
}
 8006432:	bf00      	nop
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	1ffff7e8 	.word	0x1ffff7e8
 8006440:	1ffff7ec 	.word	0x1ffff7ec
 8006444:	1ffff7f0 	.word	0x1ffff7f0
 8006448:	2000016a 	.word	0x2000016a
 800644c:	2000017a 	.word	0x2000017a

08006450 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	4613      	mov	r3, r2
 800645c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800645e:	2300      	movs	r3, #0
 8006460:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006462:	2300      	movs	r3, #0
 8006464:	75fb      	strb	r3, [r7, #23]
 8006466:	e027      	b.n	80064b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	0f1b      	lsrs	r3, r3, #28
 800646c:	2b09      	cmp	r3, #9
 800646e:	d80b      	bhi.n	8006488 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	0f1b      	lsrs	r3, r3, #28
 8006474:	b2da      	uxtb	r2, r3
 8006476:	7dfb      	ldrb	r3, [r7, #23]
 8006478:	005b      	lsls	r3, r3, #1
 800647a:	4619      	mov	r1, r3
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	440b      	add	r3, r1
 8006480:	3230      	adds	r2, #48	; 0x30
 8006482:	b2d2      	uxtb	r2, r2
 8006484:	701a      	strb	r2, [r3, #0]
 8006486:	e00a      	b.n	800649e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	0f1b      	lsrs	r3, r3, #28
 800648c:	b2da      	uxtb	r2, r3
 800648e:	7dfb      	ldrb	r3, [r7, #23]
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	4619      	mov	r1, r3
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	440b      	add	r3, r1
 8006498:	3237      	adds	r2, #55	; 0x37
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	011b      	lsls	r3, r3, #4
 80064a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80064a4:	7dfb      	ldrb	r3, [r7, #23]
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	3301      	adds	r3, #1
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	4413      	add	r3, r2
 80064ae:	2200      	movs	r2, #0
 80064b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80064b2:	7dfb      	ldrb	r3, [r7, #23]
 80064b4:	3301      	adds	r3, #1
 80064b6:	75fb      	strb	r3, [r7, #23]
 80064b8:	7dfa      	ldrb	r2, [r7, #23]
 80064ba:	79fb      	ldrb	r3, [r7, #7]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d3d3      	bcc.n	8006468 <IntToUnicode+0x18>
  }
}
 80064c0:	bf00      	nop
 80064c2:	371c      	adds	r7, #28
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bc80      	pop	{r7}
 80064c8:	4770      	bx	lr
	...

080064cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a0d      	ldr	r2, [pc, #52]	; (8006510 <HAL_PCD_MspInit+0x44>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d113      	bne.n	8006506 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80064de:	4b0d      	ldr	r3, [pc, #52]	; (8006514 <HAL_PCD_MspInit+0x48>)
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	4a0c      	ldr	r2, [pc, #48]	; (8006514 <HAL_PCD_MspInit+0x48>)
 80064e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80064e8:	61d3      	str	r3, [r2, #28]
 80064ea:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <HAL_PCD_MspInit+0x48>)
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80064f6:	2200      	movs	r2, #0
 80064f8:	2100      	movs	r1, #0
 80064fa:	2014      	movs	r0, #20
 80064fc:	f7fb f8b7 	bl	800166e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006500:	2014      	movs	r0, #20
 8006502:	f7fb f8d0 	bl	80016a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006506:	bf00      	nop
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	40005c00 	.word	0x40005c00
 8006514:	40021000 	.word	0x40021000

08006518 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800652c:	4619      	mov	r1, r3
 800652e:	4610      	mov	r0, r2
 8006530:	f7fe fcbf 	bl	8004eb2 <USBD_LL_SetupStage>
}
 8006534:	bf00      	nop
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	460b      	mov	r3, r1
 8006546:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800654e:	78fb      	ldrb	r3, [r7, #3]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	015b      	lsls	r3, r3, #5
 8006554:	4413      	add	r3, r2
 8006556:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	4619      	mov	r1, r3
 8006560:	f7fe fcf2 	bl	8004f48 <USBD_LL_DataOutStage>
}
 8006564:	bf00      	nop
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800657e:	78fb      	ldrb	r3, [r7, #3]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	015b      	lsls	r3, r3, #5
 8006584:	4413      	add	r3, r2
 8006586:	333c      	adds	r3, #60	; 0x3c
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	78fb      	ldrb	r3, [r7, #3]
 800658c:	4619      	mov	r1, r3
 800658e:	f7fe fd4c 	bl	800502a <USBD_LL_DataInStage>
}
 8006592:	bf00      	nop
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b082      	sub	sp, #8
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7fe fe5c 	bl	8005266 <USBD_LL_SOF>
}
 80065ae:	bf00      	nop
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b084      	sub	sp, #16
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80065be:	2301      	movs	r3, #1
 80065c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d001      	beq.n	80065ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80065ca:	f7fa fe11 	bl	80011f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80065d4:	7bfa      	ldrb	r2, [r7, #15]
 80065d6:	4611      	mov	r1, r2
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fe fe0c 	bl	80051f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fe fdc5 	bl	8005174 <USBD_LL_Reset>
}
 80065ea:	bf00      	nop
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe fe06 	bl	8005214 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006610:	4b04      	ldr	r3, [pc, #16]	; (8006624 <HAL_PCD_SuspendCallback+0x30>)
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	4a03      	ldr	r2, [pc, #12]	; (8006624 <HAL_PCD_SuspendCallback+0x30>)
 8006616:	f043 0306 	orr.w	r3, r3, #6
 800661a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800661c:	bf00      	nop
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	e000ed00 	.word	0xe000ed00

08006628 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006636:	4618      	mov	r0, r3
 8006638:	f7fe fe00 	bl	800523c <USBD_LL_Resume>
}
 800663c:	bf00      	nop
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800664c:	4a28      	ldr	r2, [pc, #160]	; (80066f0 <USBD_LL_Init+0xac>)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a26      	ldr	r2, [pc, #152]	; (80066f0 <USBD_LL_Init+0xac>)
 8006658:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800665c:	4b24      	ldr	r3, [pc, #144]	; (80066f0 <USBD_LL_Init+0xac>)
 800665e:	4a25      	ldr	r2, [pc, #148]	; (80066f4 <USBD_LL_Init+0xb0>)
 8006660:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006662:	4b23      	ldr	r3, [pc, #140]	; (80066f0 <USBD_LL_Init+0xac>)
 8006664:	2208      	movs	r2, #8
 8006666:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006668:	4b21      	ldr	r3, [pc, #132]	; (80066f0 <USBD_LL_Init+0xac>)
 800666a:	2202      	movs	r2, #2
 800666c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800666e:	4b20      	ldr	r3, [pc, #128]	; (80066f0 <USBD_LL_Init+0xac>)
 8006670:	2200      	movs	r2, #0
 8006672:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006674:	4b1e      	ldr	r3, [pc, #120]	; (80066f0 <USBD_LL_Init+0xac>)
 8006676:	2200      	movs	r2, #0
 8006678:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800667a:	4b1d      	ldr	r3, [pc, #116]	; (80066f0 <USBD_LL_Init+0xac>)
 800667c:	2200      	movs	r2, #0
 800667e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006680:	481b      	ldr	r0, [pc, #108]	; (80066f0 <USBD_LL_Init+0xac>)
 8006682:	f7fb f99d 	bl	80019c0 <HAL_PCD_Init>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800668c:	f7fa fdb0 	bl	80011f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006696:	2318      	movs	r3, #24
 8006698:	2200      	movs	r2, #0
 800669a:	2100      	movs	r1, #0
 800669c:	f7fc f836 	bl	800270c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80066a6:	2358      	movs	r3, #88	; 0x58
 80066a8:	2200      	movs	r2, #0
 80066aa:	2180      	movs	r1, #128	; 0x80
 80066ac:	f7fc f82e 	bl	800270c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80066b6:	23c0      	movs	r3, #192	; 0xc0
 80066b8:	2200      	movs	r2, #0
 80066ba:	2181      	movs	r1, #129	; 0x81
 80066bc:	f7fc f826 	bl	800270c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80066c6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80066ca:	2200      	movs	r2, #0
 80066cc:	2101      	movs	r1, #1
 80066ce:	f7fc f81d 	bl	800270c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80066d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066dc:	2200      	movs	r2, #0
 80066de:	2182      	movs	r1, #130	; 0x82
 80066e0:	f7fc f814 	bl	800270c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	200013bc 	.word	0x200013bc
 80066f4:	40005c00 	.word	0x40005c00

080066f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800670e:	4618      	mov	r0, r3
 8006710:	f7fb fa37 	bl	8001b82 <HAL_PCD_Start>
 8006714:	4603      	mov	r3, r0
 8006716:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006718:	7bfb      	ldrb	r3, [r7, #15]
 800671a:	4618      	mov	r0, r3
 800671c:	f000 f948 	bl	80069b0 <USBD_Get_USB_Status>
 8006720:	4603      	mov	r3, r0
 8006722:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006724:	7bbb      	ldrb	r3, [r7, #14]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	4608      	mov	r0, r1
 8006738:	4611      	mov	r1, r2
 800673a:	461a      	mov	r2, r3
 800673c:	4603      	mov	r3, r0
 800673e:	70fb      	strb	r3, [r7, #3]
 8006740:	460b      	mov	r3, r1
 8006742:	70bb      	strb	r3, [r7, #2]
 8006744:	4613      	mov	r3, r2
 8006746:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006748:	2300      	movs	r3, #0
 800674a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006756:	78bb      	ldrb	r3, [r7, #2]
 8006758:	883a      	ldrh	r2, [r7, #0]
 800675a:	78f9      	ldrb	r1, [r7, #3]
 800675c:	f7fb fb6a 	bl	8001e34 <HAL_PCD_EP_Open>
 8006760:	4603      	mov	r3, r0
 8006762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	4618      	mov	r0, r3
 8006768:	f000 f922 	bl	80069b0 <USBD_Get_USB_Status>
 800676c:	4603      	mov	r3, r0
 800676e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006770:	7bbb      	ldrb	r3, [r7, #14]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	460b      	mov	r3, r1
 8006784:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006794:	78fa      	ldrb	r2, [r7, #3]
 8006796:	4611      	mov	r1, r2
 8006798:	4618      	mov	r0, r3
 800679a:	f7fb fbab 	bl	8001ef4 <HAL_PCD_EP_Close>
 800679e:	4603      	mov	r3, r0
 80067a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 f903 	bl	80069b0 <USBD_Get_USB_Status>
 80067aa:	4603      	mov	r3, r0
 80067ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80067ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067c4:	2300      	movs	r3, #0
 80067c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067c8:	2300      	movs	r3, #0
 80067ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067d2:	78fa      	ldrb	r2, [r7, #3]
 80067d4:	4611      	mov	r1, r2
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fb fc55 	bl	8002086 <HAL_PCD_EP_SetStall>
 80067dc:	4603      	mov	r3, r0
 80067de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067e0:	7bfb      	ldrb	r3, [r7, #15]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 f8e4 	bl	80069b0 <USBD_Get_USB_Status>
 80067e8:	4603      	mov	r3, r0
 80067ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80067ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	460b      	mov	r3, r1
 8006800:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006810:	78fa      	ldrb	r2, [r7, #3]
 8006812:	4611      	mov	r1, r2
 8006814:	4618      	mov	r0, r3
 8006816:	f7fb fc90 	bl	800213a <HAL_PCD_EP_ClrStall>
 800681a:	4603      	mov	r3, r0
 800681c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800681e:	7bfb      	ldrb	r3, [r7, #15]
 8006820:	4618      	mov	r0, r3
 8006822:	f000 f8c5 	bl	80069b0 <USBD_Get_USB_Status>
 8006826:	4603      	mov	r3, r0
 8006828:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800682a:	7bbb      	ldrb	r3, [r7, #14]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006846:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800684c:	2b00      	cmp	r3, #0
 800684e:	da08      	bge.n	8006862 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006850:	78fb      	ldrb	r3, [r7, #3]
 8006852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	015b      	lsls	r3, r3, #5
 800685a:	4413      	add	r3, r2
 800685c:	332a      	adds	r3, #42	; 0x2a
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	e008      	b.n	8006874 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006862:	78fb      	ldrb	r3, [r7, #3]
 8006864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	015b      	lsls	r3, r3, #5
 800686c:	4413      	add	r3, r2
 800686e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006872:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	bc80      	pop	{r7}
 800687c:	4770      	bx	lr

0800687e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	460b      	mov	r3, r1
 8006888:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006898:	78fa      	ldrb	r2, [r7, #3]
 800689a:	4611      	mov	r1, r2
 800689c:	4618      	mov	r0, r3
 800689e:	f7fb faa4 	bl	8001dea <HAL_PCD_SetAddress>
 80068a2:	4603      	mov	r3, r0
 80068a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 f881 	bl	80069b0 <USBD_Get_USB_Status>
 80068ae:	4603      	mov	r3, r0
 80068b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	607a      	str	r2, [r7, #4]
 80068c6:	461a      	mov	r2, r3
 80068c8:	460b      	mov	r3, r1
 80068ca:	72fb      	strb	r3, [r7, #11]
 80068cc:	4613      	mov	r3, r2
 80068ce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068d0:	2300      	movs	r3, #0
 80068d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068d4:	2300      	movs	r3, #0
 80068d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80068de:	893b      	ldrh	r3, [r7, #8]
 80068e0:	7af9      	ldrb	r1, [r7, #11]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	f7fb fb96 	bl	8002014 <HAL_PCD_EP_Transmit>
 80068e8:	4603      	mov	r3, r0
 80068ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068ec:	7dfb      	ldrb	r3, [r7, #23]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 f85e 	bl	80069b0 <USBD_Get_USB_Status>
 80068f4:	4603      	mov	r3, r0
 80068f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80068f8:	7dbb      	ldrb	r3, [r7, #22]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b086      	sub	sp, #24
 8006906:	af00      	add	r7, sp, #0
 8006908:	60f8      	str	r0, [r7, #12]
 800690a:	607a      	str	r2, [r7, #4]
 800690c:	461a      	mov	r2, r3
 800690e:	460b      	mov	r3, r1
 8006910:	72fb      	strb	r3, [r7, #11]
 8006912:	4613      	mov	r3, r2
 8006914:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006924:	893b      	ldrh	r3, [r7, #8]
 8006926:	7af9      	ldrb	r1, [r7, #11]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	f7fb fb25 	bl	8001f78 <HAL_PCD_EP_Receive>
 800692e:	4603      	mov	r3, r0
 8006930:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006932:	7dfb      	ldrb	r3, [r7, #23]
 8006934:	4618      	mov	r0, r3
 8006936:	f000 f83b 	bl	80069b0 <USBD_Get_USB_Status>
 800693a:	4603      	mov	r3, r0
 800693c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800693e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	460b      	mov	r3, r1
 8006952:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800695a:	78fa      	ldrb	r2, [r7, #3]
 800695c:	4611      	mov	r1, r2
 800695e:	4618      	mov	r0, r3
 8006960:	f7fb fb44 	bl	8001fec <HAL_PCD_EP_GetRxCount>
 8006964:	4603      	mov	r3, r0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
	...

08006970 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006978:	4b02      	ldr	r3, [pc, #8]	; (8006984 <USBD_static_malloc+0x14>)
}
 800697a:	4618      	mov	r0, r3
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	bc80      	pop	{r7}
 8006982:	4770      	bx	lr
 8006984:	200001b0 	.word	0x200001b0

08006988 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]

}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	bc80      	pop	{r7}
 8006998:	4770      	bx	lr

0800699a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	460b      	mov	r3, r1
 80069a4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bc80      	pop	{r7}
 80069ae:	4770      	bx	lr

080069b0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	4603      	mov	r3, r0
 80069b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80069be:	79fb      	ldrb	r3, [r7, #7]
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d817      	bhi.n	80069f4 <USBD_Get_USB_Status+0x44>
 80069c4:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <USBD_Get_USB_Status+0x1c>)
 80069c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ca:	bf00      	nop
 80069cc:	080069dd 	.word	0x080069dd
 80069d0:	080069e3 	.word	0x080069e3
 80069d4:	080069e9 	.word	0x080069e9
 80069d8:	080069ef 	.word	0x080069ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80069dc:	2300      	movs	r3, #0
 80069de:	73fb      	strb	r3, [r7, #15]
    break;
 80069e0:	e00b      	b.n	80069fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80069e2:	2302      	movs	r3, #2
 80069e4:	73fb      	strb	r3, [r7, #15]
    break;
 80069e6:	e008      	b.n	80069fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80069e8:	2301      	movs	r3, #1
 80069ea:	73fb      	strb	r3, [r7, #15]
    break;
 80069ec:	e005      	b.n	80069fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80069ee:	2302      	movs	r3, #2
 80069f0:	73fb      	strb	r3, [r7, #15]
    break;
 80069f2:	e002      	b.n	80069fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80069f4:	2302      	movs	r3, #2
 80069f6:	73fb      	strb	r3, [r7, #15]
    break;
 80069f8:	bf00      	nop
  }
  return usb_status;
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bc80      	pop	{r7}
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop

08006a08 <__libc_init_array>:
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	2500      	movs	r5, #0
 8006a0c:	4e0c      	ldr	r6, [pc, #48]	; (8006a40 <__libc_init_array+0x38>)
 8006a0e:	4c0d      	ldr	r4, [pc, #52]	; (8006a44 <__libc_init_array+0x3c>)
 8006a10:	1ba4      	subs	r4, r4, r6
 8006a12:	10a4      	asrs	r4, r4, #2
 8006a14:	42a5      	cmp	r5, r4
 8006a16:	d109      	bne.n	8006a2c <__libc_init_array+0x24>
 8006a18:	f000 f822 	bl	8006a60 <_init>
 8006a1c:	2500      	movs	r5, #0
 8006a1e:	4e0a      	ldr	r6, [pc, #40]	; (8006a48 <__libc_init_array+0x40>)
 8006a20:	4c0a      	ldr	r4, [pc, #40]	; (8006a4c <__libc_init_array+0x44>)
 8006a22:	1ba4      	subs	r4, r4, r6
 8006a24:	10a4      	asrs	r4, r4, #2
 8006a26:	42a5      	cmp	r5, r4
 8006a28:	d105      	bne.n	8006a36 <__libc_init_array+0x2e>
 8006a2a:	bd70      	pop	{r4, r5, r6, pc}
 8006a2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a30:	4798      	blx	r3
 8006a32:	3501      	adds	r5, #1
 8006a34:	e7ee      	b.n	8006a14 <__libc_init_array+0xc>
 8006a36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a3a:	4798      	blx	r3
 8006a3c:	3501      	adds	r5, #1
 8006a3e:	e7f2      	b.n	8006a26 <__libc_init_array+0x1e>
 8006a40:	08006ae4 	.word	0x08006ae4
 8006a44:	08006ae4 	.word	0x08006ae4
 8006a48:	08006ae4 	.word	0x08006ae4
 8006a4c:	08006ae8 	.word	0x08006ae8

08006a50 <memset>:
 8006a50:	4603      	mov	r3, r0
 8006a52:	4402      	add	r2, r0
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d100      	bne.n	8006a5a <memset+0xa>
 8006a58:	4770      	bx	lr
 8006a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a5e:	e7f9      	b.n	8006a54 <memset+0x4>

08006a60 <_init>:
 8006a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a62:	bf00      	nop
 8006a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a66:	bc08      	pop	{r3}
 8006a68:	469e      	mov	lr, r3
 8006a6a:	4770      	bx	lr

08006a6c <_fini>:
 8006a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6e:	bf00      	nop
 8006a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a72:	bc08      	pop	{r3}
 8006a74:	469e      	mov	lr, r3
 8006a76:	4770      	bx	lr
